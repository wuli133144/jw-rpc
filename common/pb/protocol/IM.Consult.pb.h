// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Consult.proto

#ifndef PROTOBUF_IM_2eConsult_2eproto__INCLUDED
#define PROTOBUF_IM_2eConsult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Consult {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eConsult_2eproto();
void protobuf_AssignDesc_IM_2eConsult_2eproto();
void protobuf_ShutdownFile_IM_2eConsult_2eproto();

class IMConsultData;
class IMConsultDataAck;
class IMConsultGetTeacherInfoReq;
class IMConsultGetTeacherInfoResp;
class IMConsultGetStudentStateReq;
class IMConsultGetStudentStateResp;
class IMConsultCreatReq;
class IMConsultCreatResp;
class IMConsultCloseReq;
class IMConsultCloseResp;
class IMConsultCreateAnnounce;
class IMConsultCloseAnnounce;
class IMConsultStudentInQueueReq;
class IMConsultStudentInQueueResp;
class IMConsultTeacherOfflineInform;
class IMConsultStudentOutQueueReq;
class IMConsultStudentOutQueueResp;
class IMConsultTeacherModifyStateReq;
class IMConsultTeacherModifyStateResp;
class IMConsultGetTeacherStateReq;
class IMConsultGetTeacherStateResp;
class IMConsultTeacherModifyTopReq;
class IMConsultTeacherModifyTopResp;
class IMConsultStudentGetStateReq;
class IMConsultStudentGetStateResp;
class IMConsultGetStudentConsultTeacherListReq;
class IMConsultGetStudentConsultTeacherListResp;
class IMConsultDeliverReq;
class IMConsultDeliverResp;
class IMConsultDeliverAnnounce;

// ===================================================================

class IMConsultData : public ::google::protobuf::MessageLite {
 public:
  IMConsultData();
  virtual ~IMConsultData();

  IMConsultData(const IMConsultData& from);

  inline IMConsultData& operator=(const IMConsultData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultData* other);

  // implements Message ----------------------------------------------

  IMConsultData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultData& from);
  void MergeFrom(const IMConsultData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_id = 1;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_id() const;
  inline void set_from_id(::google::protobuf::uint32 value);

  // required uint32 to_id = 2;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_id() const;
  inline void set_to_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 consult_id = 5;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 msg_type = 7;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 msg_type() const;
  inline void set_msg_type(::google::protobuf::uint32 value);

  // required bytes msg_data = 8;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 8;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  inline void set_allocated_msg_data(::std::string* msg_data);

  // required uint32 from_source = 9;
  inline bool has_from_source() const;
  inline void clear_from_source();
  static const int kFromSourceFieldNumber = 9;
  inline ::google::protobuf::uint32 from_source() const;
  inline void set_from_source(::google::protobuf::uint32 value);

  // required string from_name = 10;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 10;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // required string from_portrait = 11;
  inline bool has_from_portrait() const;
  inline void clear_from_portrait();
  static const int kFromPortraitFieldNumber = 11;
  inline const ::std::string& from_portrait() const;
  inline void set_from_portrait(const ::std::string& value);
  inline void set_from_portrait(const char* value);
  inline void set_from_portrait(const char* value, size_t size);
  inline ::std::string* mutable_from_portrait();
  inline ::std::string* release_from_portrait();
  inline void set_allocated_from_portrait(::std::string* from_portrait);

  // required uint32 from_identity = 12;
  inline bool has_from_identity() const;
  inline void clear_from_identity();
  static const int kFromIdentityFieldNumber = 12;
  inline ::google::protobuf::uint32 from_identity() const;
  inline void set_from_identity(::google::protobuf::uint32 value);

  // required uint32 to_identity = 13;
  inline bool has_to_identity() const;
  inline void clear_to_identity();
  static const int kToIdentityFieldNumber = 13;
  inline ::google::protobuf::uint32 to_identity() const;
  inline void set_to_identity(::google::protobuf::uint32 value);

  // required uint32 result = 14;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 14;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 consult_status = 15;
  inline bool has_consult_status() const;
  inline void clear_consult_status();
  static const int kConsultStatusFieldNumber = 15;
  inline ::google::protobuf::uint32 consult_status() const;
  inline void set_consult_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultData)
 private:
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  inline void set_has_from_source();
  inline void clear_has_from_source();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_from_portrait();
  inline void clear_has_from_portrait();
  inline void set_has_from_identity();
  inline void clear_has_from_identity();
  inline void set_has_to_identity();
  inline void clear_has_to_identity();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_consult_status();
  inline void clear_has_consult_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_id_;
  ::google::protobuf::uint32 to_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* msg_data_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 from_source_;
  ::std::string* from_name_;
  ::std::string* from_portrait_;
  ::google::protobuf::uint32 from_identity_;
  ::google::protobuf::uint32 to_identity_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 consult_status_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultData* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultDataAck : public ::google::protobuf::MessageLite {
 public:
  IMConsultDataAck();
  virtual ~IMConsultDataAck();

  IMConsultDataAck(const IMConsultDataAck& from);

  inline IMConsultDataAck& operator=(const IMConsultDataAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultDataAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultDataAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultDataAck* other);

  // implements Message ----------------------------------------------

  IMConsultDataAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultDataAck& from);
  void MergeFrom(const IMConsultDataAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_id = 1;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_id() const;
  inline void set_from_id(::google::protobuf::uint32 value);

  // required uint32 to_id = 2;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_id() const;
  inline void set_to_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 consult_id = 5;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 consult_status = 6;
  inline bool has_consult_status() const;
  inline void clear_consult_status();
  static const int kConsultStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 consult_status() const;
  inline void set_consult_status(::google::protobuf::uint32 value);

  // required uint32 create_time = 7;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultDataAck)
 private:
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_consult_status();
  inline void clear_has_consult_status();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_id_;
  ::google::protobuf::uint32 to_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 consult_status_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 result_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultDataAck* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetTeacherInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetTeacherInfoReq();
  virtual ~IMConsultGetTeacherInfoReq();

  IMConsultGetTeacherInfoReq(const IMConsultGetTeacherInfoReq& from);

  inline IMConsultGetTeacherInfoReq& operator=(const IMConsultGetTeacherInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetTeacherInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetTeacherInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetTeacherInfoReq* other);

  // implements Message ----------------------------------------------

  IMConsultGetTeacherInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetTeacherInfoReq& from);
  void MergeFrom(const IMConsultGetTeacherInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 manager_id = 3;
  inline bool has_manager_id() const;
  inline void clear_manager_id();
  static const int kManagerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 manager_id() const;
  inline void set_manager_id(::google::protobuf::uint32 value);

  // repeated uint32 duty_id_list = 4;
  inline int duty_id_list_size() const;
  inline void clear_duty_id_list();
  static const int kDutyIdListFieldNumber = 4;
  inline ::google::protobuf::uint32 duty_id_list(int index) const;
  inline void set_duty_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_duty_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      duty_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_duty_id_list();

  // optional uint32 sender_duty_id = 5;
  inline bool has_sender_duty_id() const;
  inline void clear_sender_duty_id();
  static const int kSenderDutyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 sender_duty_id() const;
  inline void set_sender_duty_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetTeacherInfoReq)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_manager_id();
  inline void clear_has_manager_id();
  inline void set_has_sender_duty_id();
  inline void clear_has_sender_duty_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > duty_id_list_;
  ::google::protobuf::uint32 manager_id_;
  ::google::protobuf::uint32 sender_duty_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetTeacherInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetTeacherInfoResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetTeacherInfoResp();
  virtual ~IMConsultGetTeacherInfoResp();

  IMConsultGetTeacherInfoResp(const IMConsultGetTeacherInfoResp& from);

  inline IMConsultGetTeacherInfoResp& operator=(const IMConsultGetTeacherInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetTeacherInfoResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetTeacherInfoResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetTeacherInfoResp* other);

  // implements Message ----------------------------------------------

  IMConsultGetTeacherInfoResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetTeacherInfoResp& from);
  void MergeFrom(const IMConsultGetTeacherInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ManagerStat manager_stat = 4;
  inline bool has_manager_stat() const;
  inline void clear_manager_stat();
  static const int kManagerStatFieldNumber = 4;
  inline const ::IM::BaseDefine::ManagerStat& manager_stat() const;
  inline ::IM::BaseDefine::ManagerStat* mutable_manager_stat();
  inline ::IM::BaseDefine::ManagerStat* release_manager_stat();
  inline void set_allocated_manager_stat(::IM::BaseDefine::ManagerStat* manager_stat);

  // repeated .IM.BaseDefine.DutyStat duty_stat_list = 5;
  inline int duty_stat_list_size() const;
  inline void clear_duty_stat_list();
  static const int kDutyStatListFieldNumber = 5;
  inline const ::IM::BaseDefine::DutyStat& duty_stat_list(int index) const;
  inline ::IM::BaseDefine::DutyStat* mutable_duty_stat_list(int index);
  inline ::IM::BaseDefine::DutyStat* add_duty_stat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DutyStat >&
      duty_stat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DutyStat >*
      mutable_duty_stat_list();

  // optional .IM.BaseDefine.StudentStat student_stat = 6;
  inline bool has_student_stat() const;
  inline void clear_student_stat();
  static const int kStudentStatFieldNumber = 6;
  inline const ::IM::BaseDefine::StudentStat& student_stat() const;
  inline ::IM::BaseDefine::StudentStat* mutable_student_stat();
  inline ::IM::BaseDefine::StudentStat* release_student_stat();
  inline void set_allocated_student_stat(::IM::BaseDefine::StudentStat* student_stat);

  // optional uint32 sender_duty_id = 7;
  inline bool has_sender_duty_id() const;
  inline void clear_sender_duty_id();
  static const int kSenderDutyIdFieldNumber = 7;
  inline ::google::protobuf::uint32 sender_duty_id() const;
  inline void set_sender_duty_id(::google::protobuf::uint32 value);

  // optional bytes script = 8;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 8;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetTeacherInfoResp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_manager_stat();
  inline void clear_has_manager_stat();
  inline void set_has_student_stat();
  inline void clear_has_student_stat();
  inline void set_has_sender_duty_id();
  inline void clear_has_sender_duty_id();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::IM::BaseDefine::ManagerStat* manager_stat_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DutyStat > duty_stat_list_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 sender_duty_id_;
  ::IM::BaseDefine::StudentStat* student_stat_;
  ::std::string* script_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetTeacherInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetStudentStateReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetStudentStateReq();
  virtual ~IMConsultGetStudentStateReq();

  IMConsultGetStudentStateReq(const IMConsultGetStudentStateReq& from);

  inline IMConsultGetStudentStateReq& operator=(const IMConsultGetStudentStateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetStudentStateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetStudentStateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetStudentStateReq* other);

  // implements Message ----------------------------------------------

  IMConsultGetStudentStateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetStudentStateReq& from);
  void MergeFrom(const IMConsultGetStudentStateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // repeated uint32 order_id_list = 3;
  inline int order_id_list_size() const;
  inline void clear_order_id_list();
  static const int kOrderIdListFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id_list(int index) const;
  inline void set_order_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_order_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetStudentStateReq)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetStudentStateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetStudentStateResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetStudentStateResp();
  virtual ~IMConsultGetStudentStateResp();

  IMConsultGetStudentStateResp(const IMConsultGetStudentStateResp& from);

  inline IMConsultGetStudentStateResp& operator=(const IMConsultGetStudentStateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetStudentStateResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetStudentStateResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetStudentStateResp* other);

  // implements Message ----------------------------------------------

  IMConsultGetStudentStateResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetStudentStateResp& from);
  void MergeFrom(const IMConsultGetStudentStateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // repeated uint32 order_id_list = 3;
  inline int order_id_list_size() const;
  inline void clear_order_id_list();
  static const int kOrderIdListFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id_list(int index) const;
  inline void set_order_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_order_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order_id_list();

  // required uint32 student_state = 4;
  inline bool has_student_state() const;
  inline void clear_student_state();
  static const int kStudentStateFieldNumber = 4;
  inline ::google::protobuf::uint32 student_state() const;
  inline void set_student_state(::google::protobuf::uint32 value);

  // required uint32 consult_teacher_id = 5;
  inline bool has_consult_teacher_id() const;
  inline void clear_consult_teacher_id();
  static const int kConsultTeacherIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_teacher_id() const;
  inline void set_consult_teacher_id(::google::protobuf::uint32 value);

  // required uint32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetStudentStateResp)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_student_state();
  inline void clear_has_student_state();
  inline void set_has_consult_teacher_id();
  inline void clear_has_consult_teacher_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_id_list_;
  ::google::protobuf::uint32 student_state_;
  ::google::protobuf::uint32 consult_teacher_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetStudentStateResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCreatReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultCreatReq();
  virtual ~IMConsultCreatReq();

  IMConsultCreatReq(const IMConsultCreatReq& from);

  inline IMConsultCreatReq& operator=(const IMConsultCreatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCreatReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCreatReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCreatReq* other);

  // implements Message ----------------------------------------------

  IMConsultCreatReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCreatReq& from);
  void MergeFrom(const IMConsultCreatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 2;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 create_type = 4;
  inline bool has_create_type() const;
  inline void clear_create_type();
  static const int kCreateTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 create_type() const;
  inline void set_create_type(::google::protobuf::uint32 value);

  // required uint32 queue_ts = 5;
  inline bool has_queue_ts() const;
  inline void clear_queue_ts();
  static const int kQueueTsFieldNumber = 5;
  inline ::google::protobuf::uint32 queue_ts() const;
  inline void set_queue_ts(::google::protobuf::uint32 value);

  // optional string manager_name = 6;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 6;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 7;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 7;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCreatReq)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_create_type();
  inline void clear_has_create_type();
  inline void set_has_queue_ts();
  inline void clear_has_queue_ts();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 create_type_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 queue_ts_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCreatReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCreatResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultCreatResp();
  virtual ~IMConsultCreatResp();

  IMConsultCreatResp(const IMConsultCreatResp& from);

  inline IMConsultCreatResp& operator=(const IMConsultCreatResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCreatResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCreatResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCreatResp* other);

  // implements Message ----------------------------------------------

  IMConsultCreatResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCreatResp& from);
  void MergeFrom(const IMConsultCreatResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 2;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 consult_id = 4;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 4;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 create_type = 5;
  inline bool has_create_type() const;
  inline void clear_create_type();
  static const int kCreateTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_type() const;
  inline void set_create_type(::google::protobuf::uint32 value);

  // required uint32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes script = 7;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 7;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional string manager_name = 8;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 8;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 9;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 9;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCreatResp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_create_type();
  inline void clear_has_create_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 create_type_;
  ::google::protobuf::uint32 result_;
  ::std::string* script_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCreatResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCloseReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultCloseReq();
  virtual ~IMConsultCloseReq();

  IMConsultCloseReq(const IMConsultCloseReq& from);

  inline IMConsultCloseReq& operator=(const IMConsultCloseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCloseReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCloseReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCloseReq* other);

  // implements Message ----------------------------------------------

  IMConsultCloseReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCloseReq& from);
  void MergeFrom(const IMConsultCloseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 3;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 consult_id = 5;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 close_type = 6;
  inline bool has_close_type() const;
  inline void clear_close_type();
  static const int kCloseTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 close_type() const;
  inline void set_close_type(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCloseReq)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_close_type();
  inline void clear_has_close_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 close_type_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCloseReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCloseResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultCloseResp();
  virtual ~IMConsultCloseResp();

  IMConsultCloseResp(const IMConsultCloseResp& from);

  inline IMConsultCloseResp& operator=(const IMConsultCloseResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCloseResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCloseResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCloseResp* other);

  // implements Message ----------------------------------------------

  IMConsultCloseResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCloseResp& from);
  void MergeFrom(const IMConsultCloseResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 3;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 consult_id = 5;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 close_type = 6;
  inline bool has_close_type() const;
  inline void clear_close_type();
  static const int kCloseTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 close_type() const;
  inline void set_close_type(::google::protobuf::uint32 value);

  // required uint32 result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes script = 8;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 8;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCloseResp)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_close_type();
  inline void clear_has_close_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 close_type_;
  ::std::string* script_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCloseResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCreateAnnounce : public ::google::protobuf::MessageLite {
 public:
  IMConsultCreateAnnounce();
  virtual ~IMConsultCreateAnnounce();

  IMConsultCreateAnnounce(const IMConsultCreateAnnounce& from);

  inline IMConsultCreateAnnounce& operator=(const IMConsultCreateAnnounce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCreateAnnounce& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCreateAnnounce* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCreateAnnounce* other);

  // implements Message ----------------------------------------------

  IMConsultCreateAnnounce* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCreateAnnounce& from);
  void MergeFrom(const IMConsultCreateAnnounce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 consult_id = 1;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 1;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 3;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 create_type = 5;
  inline bool has_create_type() const;
  inline void clear_create_type();
  static const int kCreateTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_type() const;
  inline void set_create_type(::google::protobuf::uint32 value);

  // optional bytes script = 6;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 6;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional string manager_name = 7;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 7;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 8;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 8;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCreateAnnounce)
 private:
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_create_type();
  inline void clear_has_create_type();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* script_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 create_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCreateAnnounce* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultCloseAnnounce : public ::google::protobuf::MessageLite {
 public:
  IMConsultCloseAnnounce();
  virtual ~IMConsultCloseAnnounce();

  IMConsultCloseAnnounce(const IMConsultCloseAnnounce& from);

  inline IMConsultCloseAnnounce& operator=(const IMConsultCloseAnnounce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultCloseAnnounce& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultCloseAnnounce* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultCloseAnnounce* other);

  // implements Message ----------------------------------------------

  IMConsultCloseAnnounce* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultCloseAnnounce& from);
  void MergeFrom(const IMConsultCloseAnnounce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 consult_id = 1;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 1;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 3;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 close_type = 5;
  inline bool has_close_type() const;
  inline void clear_close_type();
  static const int kCloseTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 close_type() const;
  inline void set_close_type(::google::protobuf::uint32 value);

  // optional bytes script = 6;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 6;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultCloseAnnounce)
 private:
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_close_type();
  inline void clear_has_close_type();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* script_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 close_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultCloseAnnounce* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentInQueueReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentInQueueReq();
  virtual ~IMConsultStudentInQueueReq();

  IMConsultStudentInQueueReq(const IMConsultStudentInQueueReq& from);

  inline IMConsultStudentInQueueReq& operator=(const IMConsultStudentInQueueReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentInQueueReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentInQueueReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentInQueueReq* other);

  // implements Message ----------------------------------------------

  IMConsultStudentInQueueReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentInQueueReq& from);
  void MergeFrom(const IMConsultStudentInQueueReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 2;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 queue_ts = 4;
  inline bool has_queue_ts() const;
  inline void clear_queue_ts();
  static const int kQueueTsFieldNumber = 4;
  inline ::google::protobuf::uint32 queue_ts() const;
  inline void set_queue_ts(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentInQueueReq)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_queue_ts();
  inline void clear_has_queue_ts();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 queue_ts_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentInQueueReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentInQueueResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentInQueueResp();
  virtual ~IMConsultStudentInQueueResp();

  IMConsultStudentInQueueResp(const IMConsultStudentInQueueResp& from);

  inline IMConsultStudentInQueueResp& operator=(const IMConsultStudentInQueueResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentInQueueResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentInQueueResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentInQueueResp* other);

  // implements Message ----------------------------------------------

  IMConsultStudentInQueueResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentInQueueResp& from);
  void MergeFrom(const IMConsultStudentInQueueResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 2;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes script = 5;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 5;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentInQueueResp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 result_;
  ::std::string* script_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentInQueueResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultTeacherOfflineInform : public ::google::protobuf::MessageLite {
 public:
  IMConsultTeacherOfflineInform();
  virtual ~IMConsultTeacherOfflineInform();

  IMConsultTeacherOfflineInform(const IMConsultTeacherOfflineInform& from);

  inline IMConsultTeacherOfflineInform& operator=(const IMConsultTeacherOfflineInform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultTeacherOfflineInform& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultTeacherOfflineInform* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultTeacherOfflineInform* other);

  // implements Message ----------------------------------------------

  IMConsultTeacherOfflineInform* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultTeacherOfflineInform& from);
  void MergeFrom(const IMConsultTeacherOfflineInform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 teacher_id = 2;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 queue_ts = 4;
  inline bool has_queue_ts() const;
  inline void clear_queue_ts();
  static const int kQueueTsFieldNumber = 4;
  inline ::google::protobuf::uint32 queue_ts() const;
  inline void set_queue_ts(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultTeacherOfflineInform)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_queue_ts();
  inline void clear_has_queue_ts();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 queue_ts_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultTeacherOfflineInform* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentOutQueueReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentOutQueueReq();
  virtual ~IMConsultStudentOutQueueReq();

  IMConsultStudentOutQueueReq(const IMConsultStudentOutQueueReq& from);

  inline IMConsultStudentOutQueueReq& operator=(const IMConsultStudentOutQueueReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentOutQueueReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentOutQueueReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentOutQueueReq* other);

  // implements Message ----------------------------------------------

  IMConsultStudentOutQueueReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentOutQueueReq& from);
  void MergeFrom(const IMConsultStudentOutQueueReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentOutQueueReq)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentOutQueueReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentOutQueueResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentOutQueueResp();
  virtual ~IMConsultStudentOutQueueResp();

  IMConsultStudentOutQueueResp(const IMConsultStudentOutQueueResp& from);

  inline IMConsultStudentOutQueueResp& operator=(const IMConsultStudentOutQueueResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentOutQueueResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentOutQueueResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentOutQueueResp* other);

  // implements Message ----------------------------------------------

  IMConsultStudentOutQueueResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentOutQueueResp& from);
  void MergeFrom(const IMConsultStudentOutQueueResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentOutQueueResp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentOutQueueResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultTeacherModifyStateReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultTeacherModifyStateReq();
  virtual ~IMConsultTeacherModifyStateReq();

  IMConsultTeacherModifyStateReq(const IMConsultTeacherModifyStateReq& from);

  inline IMConsultTeacherModifyStateReq& operator=(const IMConsultTeacherModifyStateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultTeacherModifyStateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultTeacherModifyStateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultTeacherModifyStateReq* other);

  // implements Message ----------------------------------------------

  IMConsultTeacherModifyStateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultTeacherModifyStateReq& from);
  void MergeFrom(const IMConsultTeacherModifyStateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 teacher_id = 1;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 1;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 client_type = 2;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 client_type() const;
  inline void set_client_type(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultTeacherModifyStateReq)
 private:
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 client_type_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultTeacherModifyStateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultTeacherModifyStateResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultTeacherModifyStateResp();
  virtual ~IMConsultTeacherModifyStateResp();

  IMConsultTeacherModifyStateResp(const IMConsultTeacherModifyStateResp& from);

  inline IMConsultTeacherModifyStateResp& operator=(const IMConsultTeacherModifyStateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultTeacherModifyStateResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultTeacherModifyStateResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultTeacherModifyStateResp* other);

  // implements Message ----------------------------------------------

  IMConsultTeacherModifyStateResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultTeacherModifyStateResp& from);
  void MergeFrom(const IMConsultTeacherModifyStateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 teacher_id = 1;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 1;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 client_type = 2;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 client_type() const;
  inline void set_client_type(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultTeacherModifyStateResp)
 private:
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 client_type_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 result_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultTeacherModifyStateResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetTeacherStateReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetTeacherStateReq();
  virtual ~IMConsultGetTeacherStateReq();

  IMConsultGetTeacherStateReq(const IMConsultGetTeacherStateReq& from);

  inline IMConsultGetTeacherStateReq& operator=(const IMConsultGetTeacherStateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetTeacherStateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetTeacherStateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetTeacherStateReq* other);

  // implements Message ----------------------------------------------

  IMConsultGetTeacherStateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetTeacherStateReq& from);
  void MergeFrom(const IMConsultGetTeacherStateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated uint32 teacher_id_list = 2;
  inline int teacher_id_list_size() const;
  inline void clear_teacher_id_list();
  static const int kTeacherIdListFieldNumber = 2;
  inline ::google::protobuf::uint32 teacher_id_list(int index) const;
  inline void set_teacher_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_teacher_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teacher_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teacher_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetTeacherStateReq)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teacher_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 request_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetTeacherStateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetTeacherStateResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetTeacherStateResp();
  virtual ~IMConsultGetTeacherStateResp();

  IMConsultGetTeacherStateResp(const IMConsultGetTeacherStateResp& from);

  inline IMConsultGetTeacherStateResp& operator=(const IMConsultGetTeacherStateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetTeacherStateResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetTeacherStateResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetTeacherStateResp* other);

  // implements Message ----------------------------------------------

  IMConsultGetTeacherStateResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetTeacherStateResp& from);
  void MergeFrom(const IMConsultGetTeacherStateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.TeacherStat teacher_state_list = 2;
  inline int teacher_state_list_size() const;
  inline void clear_teacher_state_list();
  static const int kTeacherStateListFieldNumber = 2;
  inline const ::IM::BaseDefine::TeacherStat& teacher_state_list(int index) const;
  inline ::IM::BaseDefine::TeacherStat* mutable_teacher_state_list(int index);
  inline ::IM::BaseDefine::TeacherStat* add_teacher_state_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::TeacherStat >&
      teacher_state_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::TeacherStat >*
      mutable_teacher_state_list();

  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetTeacherStateResp)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::TeacherStat > teacher_state_list_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 result_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetTeacherStateResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultTeacherModifyTopReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultTeacherModifyTopReq();
  virtual ~IMConsultTeacherModifyTopReq();

  IMConsultTeacherModifyTopReq(const IMConsultTeacherModifyTopReq& from);

  inline IMConsultTeacherModifyTopReq& operator=(const IMConsultTeacherModifyTopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultTeacherModifyTopReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultTeacherModifyTopReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultTeacherModifyTopReq* other);

  // implements Message ----------------------------------------------

  IMConsultTeacherModifyTopReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultTeacherModifyTopReq& from);
  void MergeFrom(const IMConsultTeacherModifyTopReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 teacher_id = 1;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 1;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 top_type = 4;
  inline bool has_top_type() const;
  inline void clear_top_type();
  static const int kTopTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 top_type() const;
  inline void set_top_type(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultTeacherModifyTopReq)
 private:
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_top_type();
  inline void clear_has_top_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 top_type_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultTeacherModifyTopReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultTeacherModifyTopResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultTeacherModifyTopResp();
  virtual ~IMConsultTeacherModifyTopResp();

  IMConsultTeacherModifyTopResp(const IMConsultTeacherModifyTopResp& from);

  inline IMConsultTeacherModifyTopResp& operator=(const IMConsultTeacherModifyTopResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultTeacherModifyTopResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultTeacherModifyTopResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultTeacherModifyTopResp* other);

  // implements Message ----------------------------------------------

  IMConsultTeacherModifyTopResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultTeacherModifyTopResp& from);
  void MergeFrom(const IMConsultTeacherModifyTopResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 teacher_id = 1;
  inline bool has_teacher_id() const;
  inline void clear_teacher_id();
  static const int kTeacherIdFieldNumber = 1;
  inline ::google::protobuf::uint32 teacher_id() const;
  inline void set_teacher_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 top_type = 4;
  inline bool has_top_type() const;
  inline void clear_top_type();
  static const int kTopTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 top_type() const;
  inline void set_top_type(::google::protobuf::uint32 value);

  // required uint32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultTeacherModifyTopResp)
 private:
  inline void set_has_teacher_id();
  inline void clear_has_teacher_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_top_type();
  inline void clear_has_top_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teacher_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 top_type_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultTeacherModifyTopResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentGetStateReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentGetStateReq();
  virtual ~IMConsultStudentGetStateReq();

  IMConsultStudentGetStateReq(const IMConsultStudentGetStateReq& from);

  inline IMConsultStudentGetStateReq& operator=(const IMConsultStudentGetStateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentGetStateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentGetStateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentGetStateReq* other);

  // implements Message ----------------------------------------------

  IMConsultStudentGetStateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentGetStateReq& from);
  void MergeFrom(const IMConsultStudentGetStateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentGetStateReq)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentGetStateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultStudentGetStateResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultStudentGetStateResp();
  virtual ~IMConsultStudentGetStateResp();

  IMConsultStudentGetStateResp(const IMConsultStudentGetStateResp& from);

  inline IMConsultStudentGetStateResp& operator=(const IMConsultStudentGetStateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultStudentGetStateResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultStudentGetStateResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultStudentGetStateResp* other);

  // implements Message ----------------------------------------------

  IMConsultStudentGetStateResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultStudentGetStateResp& from);
  void MergeFrom(const IMConsultStudentGetStateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 student_id = 1;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 2;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required uint32 consult_id = 4;
  inline bool has_consult_id() const;
  inline void clear_consult_id();
  static const int kConsultIdFieldNumber = 4;
  inline ::google::protobuf::uint32 consult_id() const;
  inline void set_consult_id(::google::protobuf::uint32 value);

  // required uint32 consult_teacher_id = 5;
  inline bool has_consult_teacher_id() const;
  inline void clear_consult_teacher_id();
  static const int kConsultTeacherIdFieldNumber = 5;
  inline ::google::protobuf::uint32 consult_teacher_id() const;
  inline void set_consult_teacher_id(::google::protobuf::uint32 value);

  // required uint32 consult_teacher_identity = 6;
  inline bool has_consult_teacher_identity() const;
  inline void clear_consult_teacher_identity();
  static const int kConsultTeacherIdentityFieldNumber = 6;
  inline ::google::protobuf::uint32 consult_teacher_identity() const;
  inline void set_consult_teacher_identity(::google::protobuf::uint32 value);

  // required uint32 result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultStudentGetStateResp)
 private:
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_consult_id();
  inline void clear_has_consult_id();
  inline void set_has_consult_teacher_id();
  inline void clear_has_consult_teacher_id();
  inline void set_has_consult_teacher_identity();
  inline void clear_has_consult_teacher_identity();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 consult_id_;
  ::google::protobuf::uint32 consult_teacher_id_;
  ::google::protobuf::uint32 consult_teacher_identity_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultStudentGetStateResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetStudentConsultTeacherListReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetStudentConsultTeacherListReq();
  virtual ~IMConsultGetStudentConsultTeacherListReq();

  IMConsultGetStudentConsultTeacherListReq(const IMConsultGetStudentConsultTeacherListReq& from);

  inline IMConsultGetStudentConsultTeacherListReq& operator=(const IMConsultGetStudentConsultTeacherListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetStudentConsultTeacherListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetStudentConsultTeacherListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetStudentConsultTeacherListReq* other);

  // implements Message ----------------------------------------------

  IMConsultGetStudentConsultTeacherListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetStudentConsultTeacherListReq& from);
  void MergeFrom(const IMConsultGetStudentConsultTeacherListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetStudentConsultTeacherListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultGetStudentConsultTeacherListResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultGetStudentConsultTeacherListResp();
  virtual ~IMConsultGetStudentConsultTeacherListResp();

  IMConsultGetStudentConsultTeacherListResp(const IMConsultGetStudentConsultTeacherListResp& from);

  inline IMConsultGetStudentConsultTeacherListResp& operator=(const IMConsultGetStudentConsultTeacherListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultGetStudentConsultTeacherListResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultGetStudentConsultTeacherListResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultGetStudentConsultTeacherListResp* other);

  // implements Message ----------------------------------------------

  IMConsultGetStudentConsultTeacherListResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultGetStudentConsultTeacherListResp& from);
  void MergeFrom(const IMConsultGetStudentConsultTeacherListResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // repeated uint32 teacher_id_list = 3;
  inline int teacher_id_list_size() const;
  inline void clear_teacher_id_list();
  static const int kTeacherIdListFieldNumber = 3;
  inline ::google::protobuf::uint32 teacher_id_list(int index) const;
  inline void set_teacher_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_teacher_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teacher_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teacher_id_list();

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teacher_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultGetStudentConsultTeacherListResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultDeliverReq : public ::google::protobuf::MessageLite {
 public:
  IMConsultDeliverReq();
  virtual ~IMConsultDeliverReq();

  IMConsultDeliverReq(const IMConsultDeliverReq& from);

  inline IMConsultDeliverReq& operator=(const IMConsultDeliverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultDeliverReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultDeliverReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultDeliverReq* other);

  // implements Message ----------------------------------------------

  IMConsultDeliverReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultDeliverReq& from);
  void MergeFrom(const IMConsultDeliverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 duty_id = 1;
  inline bool has_duty_id() const;
  inline void clear_duty_id();
  static const int kDutyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 duty_id() const;
  inline void set_duty_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 manager_id = 3;
  inline bool has_manager_id() const;
  inline void clear_manager_id();
  static const int kManagerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 manager_id() const;
  inline void set_manager_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 deliver_type = 5;
  inline bool has_deliver_type() const;
  inline void clear_deliver_type();
  static const int kDeliverTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 deliver_type() const;
  inline void set_deliver_type(::google::protobuf::uint32 value);

  // required uint32 deliver_consult_id = 6;
  inline bool has_deliver_consult_id() const;
  inline void clear_deliver_consult_id();
  static const int kDeliverConsultIdFieldNumber = 6;
  inline ::google::protobuf::uint32 deliver_consult_id() const;
  inline void set_deliver_consult_id(::google::protobuf::uint32 value);

  // optional string manager_name = 7;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 7;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 8;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 8;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultDeliverReq)
 private:
  inline void set_has_duty_id();
  inline void clear_has_duty_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_manager_id();
  inline void clear_has_manager_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_deliver_type();
  inline void clear_has_deliver_type();
  inline void set_has_deliver_consult_id();
  inline void clear_has_deliver_consult_id();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 duty_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 manager_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 deliver_type_;
  ::google::protobuf::uint32 deliver_consult_id_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultDeliverReq* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultDeliverResp : public ::google::protobuf::MessageLite {
 public:
  IMConsultDeliverResp();
  virtual ~IMConsultDeliverResp();

  IMConsultDeliverResp(const IMConsultDeliverResp& from);

  inline IMConsultDeliverResp& operator=(const IMConsultDeliverResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultDeliverResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultDeliverResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultDeliverResp* other);

  // implements Message ----------------------------------------------

  IMConsultDeliverResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultDeliverResp& from);
  void MergeFrom(const IMConsultDeliverResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 duty_id = 1;
  inline bool has_duty_id() const;
  inline void clear_duty_id();
  static const int kDutyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 duty_id() const;
  inline void set_duty_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 manager_id = 3;
  inline bool has_manager_id() const;
  inline void clear_manager_id();
  static const int kManagerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 manager_id() const;
  inline void set_manager_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 4;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 deliver_type = 5;
  inline bool has_deliver_type() const;
  inline void clear_deliver_type();
  static const int kDeliverTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 deliver_type() const;
  inline void set_deliver_type(::google::protobuf::uint32 value);

  // required uint32 deliver_consult_id = 6;
  inline bool has_deliver_consult_id() const;
  inline void clear_deliver_consult_id();
  static const int kDeliverConsultIdFieldNumber = 6;
  inline ::google::protobuf::uint32 deliver_consult_id() const;
  inline void set_deliver_consult_id(::google::protobuf::uint32 value);

  // required uint32 new_consult_id = 7;
  inline bool has_new_consult_id() const;
  inline void clear_new_consult_id();
  static const int kNewConsultIdFieldNumber = 7;
  inline ::google::protobuf::uint32 new_consult_id() const;
  inline void set_new_consult_id(::google::protobuf::uint32 value);

  // required uint32 result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional bytes script = 9;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 9;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional string manager_name = 10;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 10;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 11;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 11;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultDeliverResp)
 private:
  inline void set_has_duty_id();
  inline void clear_has_duty_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_manager_id();
  inline void clear_has_manager_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_deliver_type();
  inline void clear_has_deliver_type();
  inline void set_has_deliver_consult_id();
  inline void clear_has_deliver_consult_id();
  inline void set_has_new_consult_id();
  inline void clear_has_new_consult_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 duty_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 manager_id_;
  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 deliver_type_;
  ::google::protobuf::uint32 deliver_consult_id_;
  ::google::protobuf::uint32 new_consult_id_;
  ::google::protobuf::uint32 result_;
  ::std::string* script_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultDeliverResp* default_instance_;
};
// -------------------------------------------------------------------

class IMConsultDeliverAnnounce : public ::google::protobuf::MessageLite {
 public:
  IMConsultDeliverAnnounce();
  virtual ~IMConsultDeliverAnnounce();

  IMConsultDeliverAnnounce(const IMConsultDeliverAnnounce& from);

  inline IMConsultDeliverAnnounce& operator=(const IMConsultDeliverAnnounce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMConsultDeliverAnnounce& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMConsultDeliverAnnounce* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMConsultDeliverAnnounce* other);

  // implements Message ----------------------------------------------

  IMConsultDeliverAnnounce* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMConsultDeliverAnnounce& from);
  void MergeFrom(const IMConsultDeliverAnnounce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 old_consult_id = 1;
  inline bool has_old_consult_id() const;
  inline void clear_old_consult_id();
  static const int kOldConsultIdFieldNumber = 1;
  inline ::google::protobuf::uint32 old_consult_id() const;
  inline void set_old_consult_id(::google::protobuf::uint32 value);

  // required uint32 new_consult_id = 2;
  inline bool has_new_consult_id() const;
  inline void clear_new_consult_id();
  static const int kNewConsultIdFieldNumber = 2;
  inline ::google::protobuf::uint32 new_consult_id() const;
  inline void set_new_consult_id(::google::protobuf::uint32 value);

  // required uint32 student_id = 3;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 3;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);

  // required uint32 duty_id = 4;
  inline bool has_duty_id() const;
  inline void clear_duty_id();
  static const int kDutyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 duty_id() const;
  inline void set_duty_id(::google::protobuf::uint32 value);

  // required uint32 manager_id = 5;
  inline bool has_manager_id() const;
  inline void clear_manager_id();
  static const int kManagerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 manager_id() const;
  inline void set_manager_id(::google::protobuf::uint32 value);

  // required uint32 order_id = 6;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 6;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // required uint32 deliver_type = 7;
  inline bool has_deliver_type() const;
  inline void clear_deliver_type();
  static const int kDeliverTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 deliver_type() const;
  inline void set_deliver_type(::google::protobuf::uint32 value);

  // optional bytes script = 8;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 8;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // repeated .IM.BaseDefine.ConsultMsg consult_msg_list = 9;
  inline int consult_msg_list_size() const;
  inline void clear_consult_msg_list();
  static const int kConsultMsgListFieldNumber = 9;
  inline const ::IM::BaseDefine::ConsultMsg& consult_msg_list(int index) const;
  inline ::IM::BaseDefine::ConsultMsg* mutable_consult_msg_list(int index);
  inline ::IM::BaseDefine::ConsultMsg* add_consult_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ConsultMsg >&
      consult_msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ConsultMsg >*
      mutable_consult_msg_list();

  // optional string manager_name = 10;
  inline bool has_manager_name() const;
  inline void clear_manager_name();
  static const int kManagerNameFieldNumber = 10;
  inline const ::std::string& manager_name() const;
  inline void set_manager_name(const ::std::string& value);
  inline void set_manager_name(const char* value);
  inline void set_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_manager_name();
  inline ::std::string* release_manager_name();
  inline void set_allocated_manager_name(::std::string* manager_name);

  // optional string manager_portrait = 11;
  inline bool has_manager_portrait() const;
  inline void clear_manager_portrait();
  static const int kManagerPortraitFieldNumber = 11;
  inline const ::std::string& manager_portrait() const;
  inline void set_manager_portrait(const ::std::string& value);
  inline void set_manager_portrait(const char* value);
  inline void set_manager_portrait(const char* value, size_t size);
  inline ::std::string* mutable_manager_portrait();
  inline ::std::string* release_manager_portrait();
  inline void set_allocated_manager_portrait(::std::string* manager_portrait);

  // @@protoc_insertion_point(class_scope:IM.Consult.IMConsultDeliverAnnounce)
 private:
  inline void set_has_old_consult_id();
  inline void clear_has_old_consult_id();
  inline void set_has_new_consult_id();
  inline void clear_has_new_consult_id();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_duty_id();
  inline void clear_has_duty_id();
  inline void set_has_manager_id();
  inline void clear_has_manager_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_deliver_type();
  inline void clear_has_deliver_type();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_manager_name();
  inline void clear_has_manager_name();
  inline void set_has_manager_portrait();
  inline void clear_has_manager_portrait();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 old_consult_id_;
  ::google::protobuf::uint32 new_consult_id_;
  ::google::protobuf::uint32 student_id_;
  ::google::protobuf::uint32 duty_id_;
  ::google::protobuf::uint32 manager_id_;
  ::google::protobuf::uint32 order_id_;
  ::std::string* script_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ConsultMsg > consult_msg_list_;
  ::std::string* manager_name_;
  ::std::string* manager_portrait_;
  ::google::protobuf::uint32 deliver_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eConsult_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eConsult_2eproto();
  friend void protobuf_ShutdownFile_IM_2eConsult_2eproto();

  void InitAsDefaultInstance();
  static IMConsultDeliverAnnounce* default_instance_;
};
// ===================================================================


// ===================================================================

// IMConsultData

// required uint32 from_id = 1;
inline bool IMConsultData::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultData::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultData::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultData::clear_from_id() {
  from_id_ = 0u;
  clear_has_from_id();
}
inline ::google::protobuf::uint32 IMConsultData::from_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.from_id)
  return from_id_;
}
inline void IMConsultData::set_from_id(::google::protobuf::uint32 value) {
  set_has_from_id();
  from_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.from_id)
}

// required uint32 to_id = 2;
inline bool IMConsultData::has_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultData::set_has_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultData::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultData::clear_to_id() {
  to_id_ = 0u;
  clear_has_to_id();
}
inline ::google::protobuf::uint32 IMConsultData::to_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.to_id)
  return to_id_;
}
inline void IMConsultData::set_to_id(::google::protobuf::uint32 value) {
  set_has_to_id();
  to_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.to_id)
}

// required uint32 msg_id = 3;
inline bool IMConsultData::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultData::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultData::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultData::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMConsultData::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.msg_id)
  return msg_id_;
}
inline void IMConsultData::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.msg_id)
}

// required uint32 order_id = 4;
inline bool IMConsultData::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultData::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultData::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultData::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultData::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.order_id)
  return order_id_;
}
inline void IMConsultData::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.order_id)
}

// required uint32 consult_id = 5;
inline bool IMConsultData::has_consult_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultData::set_has_consult_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultData::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultData::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultData::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.consult_id)
  return consult_id_;
}
inline void IMConsultData::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.consult_id)
}

// required uint32 create_time = 6;
inline bool IMConsultData::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultData::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultData::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 IMConsultData::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.create_time)
  return create_time_;
}
inline void IMConsultData::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.create_time)
}

// required uint32 msg_type = 7;
inline bool IMConsultData::has_msg_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultData::set_has_msg_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultData::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultData::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 IMConsultData::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.msg_type)
  return msg_type_;
}
inline void IMConsultData::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.msg_type)
}

// required bytes msg_data = 8;
inline bool IMConsultData::has_msg_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultData::set_has_msg_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultData::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultData::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& IMConsultData::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.msg_data)
  return *msg_data_;
}
inline void IMConsultData::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.msg_data)
}
inline void IMConsultData::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultData.msg_data)
}
inline void IMConsultData::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultData.msg_data)
}
inline ::std::string* IMConsultData::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultData.msg_data)
  return msg_data_;
}
inline ::std::string* IMConsultData::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultData::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (msg_data) {
    set_has_msg_data();
    msg_data_ = msg_data;
  } else {
    clear_has_msg_data();
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultData.msg_data)
}

// required uint32 from_source = 9;
inline bool IMConsultData::has_from_source() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultData::set_has_from_source() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultData::clear_has_from_source() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultData::clear_from_source() {
  from_source_ = 0u;
  clear_has_from_source();
}
inline ::google::protobuf::uint32 IMConsultData::from_source() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.from_source)
  return from_source_;
}
inline void IMConsultData::set_from_source(::google::protobuf::uint32 value) {
  set_has_from_source();
  from_source_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.from_source)
}

// required string from_name = 10;
inline bool IMConsultData::has_from_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMConsultData::set_has_from_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMConsultData::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMConsultData::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& IMConsultData::from_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.from_name)
  return *from_name_;
}
inline void IMConsultData::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.from_name)
}
inline void IMConsultData::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultData.from_name)
}
inline void IMConsultData::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultData.from_name)
}
inline ::std::string* IMConsultData::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultData.from_name)
  return from_name_;
}
inline ::std::string* IMConsultData::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultData::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultData.from_name)
}

// required string from_portrait = 11;
inline bool IMConsultData::has_from_portrait() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IMConsultData::set_has_from_portrait() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IMConsultData::clear_has_from_portrait() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IMConsultData::clear_from_portrait() {
  if (from_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_portrait_->clear();
  }
  clear_has_from_portrait();
}
inline const ::std::string& IMConsultData::from_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.from_portrait)
  return *from_portrait_;
}
inline void IMConsultData::set_from_portrait(const ::std::string& value) {
  set_has_from_portrait();
  if (from_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_portrait_ = new ::std::string;
  }
  from_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.from_portrait)
}
inline void IMConsultData::set_from_portrait(const char* value) {
  set_has_from_portrait();
  if (from_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_portrait_ = new ::std::string;
  }
  from_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultData.from_portrait)
}
inline void IMConsultData::set_from_portrait(const char* value, size_t size) {
  set_has_from_portrait();
  if (from_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_portrait_ = new ::std::string;
  }
  from_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultData.from_portrait)
}
inline ::std::string* IMConsultData::mutable_from_portrait() {
  set_has_from_portrait();
  if (from_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultData.from_portrait)
  return from_portrait_;
}
inline ::std::string* IMConsultData::release_from_portrait() {
  clear_has_from_portrait();
  if (from_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_portrait_;
    from_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultData::set_allocated_from_portrait(::std::string* from_portrait) {
  if (from_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_portrait_;
  }
  if (from_portrait) {
    set_has_from_portrait();
    from_portrait_ = from_portrait;
  } else {
    clear_has_from_portrait();
    from_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultData.from_portrait)
}

// required uint32 from_identity = 12;
inline bool IMConsultData::has_from_identity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IMConsultData::set_has_from_identity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IMConsultData::clear_has_from_identity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IMConsultData::clear_from_identity() {
  from_identity_ = 0u;
  clear_has_from_identity();
}
inline ::google::protobuf::uint32 IMConsultData::from_identity() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.from_identity)
  return from_identity_;
}
inline void IMConsultData::set_from_identity(::google::protobuf::uint32 value) {
  set_has_from_identity();
  from_identity_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.from_identity)
}

// required uint32 to_identity = 13;
inline bool IMConsultData::has_to_identity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IMConsultData::set_has_to_identity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IMConsultData::clear_has_to_identity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IMConsultData::clear_to_identity() {
  to_identity_ = 0u;
  clear_has_to_identity();
}
inline ::google::protobuf::uint32 IMConsultData::to_identity() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.to_identity)
  return to_identity_;
}
inline void IMConsultData::set_to_identity(::google::protobuf::uint32 value) {
  set_has_to_identity();
  to_identity_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.to_identity)
}

// required uint32 result = 14;
inline bool IMConsultData::has_result() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IMConsultData::set_has_result() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IMConsultData::clear_has_result() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IMConsultData::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultData::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.result)
  return result_;
}
inline void IMConsultData::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.result)
}

// optional uint32 consult_status = 15;
inline bool IMConsultData::has_consult_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IMConsultData::set_has_consult_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IMConsultData::clear_has_consult_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IMConsultData::clear_consult_status() {
  consult_status_ = 0u;
  clear_has_consult_status();
}
inline ::google::protobuf::uint32 IMConsultData::consult_status() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.consult_status)
  return consult_status_;
}
inline void IMConsultData::set_consult_status(::google::protobuf::uint32 value) {
  set_has_consult_status();
  consult_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.consult_status)
}

// optional bytes attach_data = 20;
inline bool IMConsultData::has_attach_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IMConsultData::set_has_attach_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IMConsultData::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IMConsultData::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultData.attach_data)
  return *attach_data_;
}
inline void IMConsultData::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultData.attach_data)
}
inline void IMConsultData::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultData.attach_data)
}
inline void IMConsultData::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultData.attach_data)
}
inline ::std::string* IMConsultData::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultData.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultData::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultData::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultData.attach_data)
}

// -------------------------------------------------------------------

// IMConsultDataAck

// required uint32 from_id = 1;
inline bool IMConsultDataAck::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultDataAck::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultDataAck::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultDataAck::clear_from_id() {
  from_id_ = 0u;
  clear_has_from_id();
}
inline ::google::protobuf::uint32 IMConsultDataAck::from_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.from_id)
  return from_id_;
}
inline void IMConsultDataAck::set_from_id(::google::protobuf::uint32 value) {
  set_has_from_id();
  from_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.from_id)
}

// required uint32 to_id = 2;
inline bool IMConsultDataAck::has_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultDataAck::set_has_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultDataAck::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultDataAck::clear_to_id() {
  to_id_ = 0u;
  clear_has_to_id();
}
inline ::google::protobuf::uint32 IMConsultDataAck::to_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.to_id)
  return to_id_;
}
inline void IMConsultDataAck::set_to_id(::google::protobuf::uint32 value) {
  set_has_to_id();
  to_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.to_id)
}

// required uint32 msg_id = 3;
inline bool IMConsultDataAck::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultDataAck::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultDataAck::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultDataAck::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMConsultDataAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.msg_id)
  return msg_id_;
}
inline void IMConsultDataAck::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.msg_id)
}

// required uint32 order_id = 4;
inline bool IMConsultDataAck::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultDataAck::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultDataAck::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultDataAck::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultDataAck::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.order_id)
  return order_id_;
}
inline void IMConsultDataAck::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.order_id)
}

// required uint32 consult_id = 5;
inline bool IMConsultDataAck::has_consult_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultDataAck::set_has_consult_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultDataAck::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultDataAck::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDataAck::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.consult_id)
  return consult_id_;
}
inline void IMConsultDataAck::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.consult_id)
}

// required uint32 consult_status = 6;
inline bool IMConsultDataAck::has_consult_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultDataAck::set_has_consult_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultDataAck::clear_has_consult_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultDataAck::clear_consult_status() {
  consult_status_ = 0u;
  clear_has_consult_status();
}
inline ::google::protobuf::uint32 IMConsultDataAck::consult_status() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.consult_status)
  return consult_status_;
}
inline void IMConsultDataAck::set_consult_status(::google::protobuf::uint32 value) {
  set_has_consult_status();
  consult_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.consult_status)
}

// required uint32 create_time = 7;
inline bool IMConsultDataAck::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultDataAck::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultDataAck::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultDataAck::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 IMConsultDataAck::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.create_time)
  return create_time_;
}
inline void IMConsultDataAck::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.create_time)
}

// required uint32 result = 8;
inline bool IMConsultDataAck::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultDataAck::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultDataAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultDataAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultDataAck::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.result)
  return result_;
}
inline void IMConsultDataAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultDataAck::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultDataAck::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultDataAck::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultDataAck::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultDataAck::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDataAck.attach_data)
  return *attach_data_;
}
inline void IMConsultDataAck::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDataAck.attach_data)
}
inline void IMConsultDataAck::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDataAck.attach_data)
}
inline void IMConsultDataAck::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDataAck.attach_data)
}
inline ::std::string* IMConsultDataAck::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDataAck.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultDataAck::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDataAck::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDataAck.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetTeacherInfoReq

// required uint32 student_id = 1;
inline bool IMConsultGetTeacherInfoReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetTeacherInfoReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetTeacherInfoReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetTeacherInfoReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.student_id)
  return student_id_;
}
inline void IMConsultGetTeacherInfoReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultGetTeacherInfoReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetTeacherInfoReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetTeacherInfoReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetTeacherInfoReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.order_id)
  return order_id_;
}
inline void IMConsultGetTeacherInfoReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.order_id)
}

// required uint32 manager_id = 3;
inline bool IMConsultGetTeacherInfoReq::has_manager_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultGetTeacherInfoReq::set_has_manager_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultGetTeacherInfoReq::clear_has_manager_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultGetTeacherInfoReq::clear_manager_id() {
  manager_id_ = 0u;
  clear_has_manager_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoReq::manager_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.manager_id)
  return manager_id_;
}
inline void IMConsultGetTeacherInfoReq::set_manager_id(::google::protobuf::uint32 value) {
  set_has_manager_id();
  manager_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.manager_id)
}

// repeated uint32 duty_id_list = 4;
inline int IMConsultGetTeacherInfoReq::duty_id_list_size() const {
  return duty_id_list_.size();
}
inline void IMConsultGetTeacherInfoReq::clear_duty_id_list() {
  duty_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoReq::duty_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.duty_id_list)
  return duty_id_list_.Get(index);
}
inline void IMConsultGetTeacherInfoReq::set_duty_id_list(int index, ::google::protobuf::uint32 value) {
  duty_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.duty_id_list)
}
inline void IMConsultGetTeacherInfoReq::add_duty_id_list(::google::protobuf::uint32 value) {
  duty_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetTeacherInfoReq.duty_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMConsultGetTeacherInfoReq::duty_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetTeacherInfoReq.duty_id_list)
  return duty_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMConsultGetTeacherInfoReq::mutable_duty_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetTeacherInfoReq.duty_id_list)
  return &duty_id_list_;
}

// optional uint32 sender_duty_id = 5;
inline bool IMConsultGetTeacherInfoReq::has_sender_duty_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultGetTeacherInfoReq::set_has_sender_duty_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultGetTeacherInfoReq::clear_has_sender_duty_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultGetTeacherInfoReq::clear_sender_duty_id() {
  sender_duty_id_ = 0u;
  clear_has_sender_duty_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoReq::sender_duty_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.sender_duty_id)
  return sender_duty_id_;
}
inline void IMConsultGetTeacherInfoReq::set_sender_duty_id(::google::protobuf::uint32 value) {
  set_has_sender_duty_id();
  sender_duty_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.sender_duty_id)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetTeacherInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultGetTeacherInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultGetTeacherInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultGetTeacherInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetTeacherInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
  return *attach_data_;
}
inline void IMConsultGetTeacherInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
}
inline void IMConsultGetTeacherInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
}
inline void IMConsultGetTeacherInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
}
inline ::std::string* IMConsultGetTeacherInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetTeacherInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetTeacherInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetTeacherInfoResp

// required uint32 student_id = 1;
inline bool IMConsultGetTeacherInfoResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetTeacherInfoResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.student_id)
  return student_id_;
}
inline void IMConsultGetTeacherInfoResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultGetTeacherInfoResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetTeacherInfoResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.order_id)
  return order_id_;
}
inline void IMConsultGetTeacherInfoResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.order_id)
}

// required uint32 result = 3;
inline bool IMConsultGetTeacherInfoResp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultGetTeacherInfoResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.result)
  return result_;
}
inline void IMConsultGetTeacherInfoResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.result)
}

// required .IM.BaseDefine.ManagerStat manager_stat = 4;
inline bool IMConsultGetTeacherInfoResp::has_manager_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_manager_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_manager_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultGetTeacherInfoResp::clear_manager_stat() {
  if (manager_stat_ != NULL) manager_stat_->::IM::BaseDefine::ManagerStat::Clear();
  clear_has_manager_stat();
}
inline const ::IM::BaseDefine::ManagerStat& IMConsultGetTeacherInfoResp::manager_stat() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.manager_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return manager_stat_ != NULL ? *manager_stat_ : *default_instance().manager_stat_;
#else
  return manager_stat_ != NULL ? *manager_stat_ : *default_instance_->manager_stat_;
#endif
}
inline ::IM::BaseDefine::ManagerStat* IMConsultGetTeacherInfoResp::mutable_manager_stat() {
  set_has_manager_stat();
  if (manager_stat_ == NULL) manager_stat_ = new ::IM::BaseDefine::ManagerStat;
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoResp.manager_stat)
  return manager_stat_;
}
inline ::IM::BaseDefine::ManagerStat* IMConsultGetTeacherInfoResp::release_manager_stat() {
  clear_has_manager_stat();
  ::IM::BaseDefine::ManagerStat* temp = manager_stat_;
  manager_stat_ = NULL;
  return temp;
}
inline void IMConsultGetTeacherInfoResp::set_allocated_manager_stat(::IM::BaseDefine::ManagerStat* manager_stat) {
  delete manager_stat_;
  manager_stat_ = manager_stat;
  if (manager_stat) {
    set_has_manager_stat();
  } else {
    clear_has_manager_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherInfoResp.manager_stat)
}

// repeated .IM.BaseDefine.DutyStat duty_stat_list = 5;
inline int IMConsultGetTeacherInfoResp::duty_stat_list_size() const {
  return duty_stat_list_.size();
}
inline void IMConsultGetTeacherInfoResp::clear_duty_stat_list() {
  duty_stat_list_.Clear();
}
inline const ::IM::BaseDefine::DutyStat& IMConsultGetTeacherInfoResp::duty_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.duty_stat_list)
  return duty_stat_list_.Get(index);
}
inline ::IM::BaseDefine::DutyStat* IMConsultGetTeacherInfoResp::mutable_duty_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoResp.duty_stat_list)
  return duty_stat_list_.Mutable(index);
}
inline ::IM::BaseDefine::DutyStat* IMConsultGetTeacherInfoResp::add_duty_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetTeacherInfoResp.duty_stat_list)
  return duty_stat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DutyStat >&
IMConsultGetTeacherInfoResp::duty_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetTeacherInfoResp.duty_stat_list)
  return duty_stat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DutyStat >*
IMConsultGetTeacherInfoResp::mutable_duty_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetTeacherInfoResp.duty_stat_list)
  return &duty_stat_list_;
}

// optional .IM.BaseDefine.StudentStat student_stat = 6;
inline bool IMConsultGetTeacherInfoResp::has_student_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_student_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_student_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultGetTeacherInfoResp::clear_student_stat() {
  if (student_stat_ != NULL) student_stat_->::IM::BaseDefine::StudentStat::Clear();
  clear_has_student_stat();
}
inline const ::IM::BaseDefine::StudentStat& IMConsultGetTeacherInfoResp::student_stat() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.student_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return student_stat_ != NULL ? *student_stat_ : *default_instance().student_stat_;
#else
  return student_stat_ != NULL ? *student_stat_ : *default_instance_->student_stat_;
#endif
}
inline ::IM::BaseDefine::StudentStat* IMConsultGetTeacherInfoResp::mutable_student_stat() {
  set_has_student_stat();
  if (student_stat_ == NULL) student_stat_ = new ::IM::BaseDefine::StudentStat;
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoResp.student_stat)
  return student_stat_;
}
inline ::IM::BaseDefine::StudentStat* IMConsultGetTeacherInfoResp::release_student_stat() {
  clear_has_student_stat();
  ::IM::BaseDefine::StudentStat* temp = student_stat_;
  student_stat_ = NULL;
  return temp;
}
inline void IMConsultGetTeacherInfoResp::set_allocated_student_stat(::IM::BaseDefine::StudentStat* student_stat) {
  delete student_stat_;
  student_stat_ = student_stat;
  if (student_stat) {
    set_has_student_stat();
  } else {
    clear_has_student_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherInfoResp.student_stat)
}

// optional uint32 sender_duty_id = 7;
inline bool IMConsultGetTeacherInfoResp::has_sender_duty_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_sender_duty_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_sender_duty_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultGetTeacherInfoResp::clear_sender_duty_id() {
  sender_duty_id_ = 0u;
  clear_has_sender_duty_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherInfoResp::sender_duty_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.sender_duty_id)
  return sender_duty_id_;
}
inline void IMConsultGetTeacherInfoResp::set_sender_duty_id(::google::protobuf::uint32 value) {
  set_has_sender_duty_id();
  sender_duty_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.sender_duty_id)
}

// optional bytes script = 8;
inline bool IMConsultGetTeacherInfoResp::has_script() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_script() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_script() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultGetTeacherInfoResp::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultGetTeacherInfoResp::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.script)
  return *script_;
}
inline void IMConsultGetTeacherInfoResp::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.script)
}
inline void IMConsultGetTeacherInfoResp::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetTeacherInfoResp.script)
}
inline void IMConsultGetTeacherInfoResp::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetTeacherInfoResp.script)
}
inline ::std::string* IMConsultGetTeacherInfoResp::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoResp.script)
  return script_;
}
inline ::std::string* IMConsultGetTeacherInfoResp::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetTeacherInfoResp::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherInfoResp.script)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetTeacherInfoResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultGetTeacherInfoResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultGetTeacherInfoResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultGetTeacherInfoResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetTeacherInfoResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
  return *attach_data_;
}
inline void IMConsultGetTeacherInfoResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
}
inline void IMConsultGetTeacherInfoResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
}
inline void IMConsultGetTeacherInfoResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
}
inline ::std::string* IMConsultGetTeacherInfoResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetTeacherInfoResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetTeacherInfoResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherInfoResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetStudentStateReq

// required uint32 request_id = 1;
inline bool IMConsultGetStudentStateReq::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetStudentStateReq::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetStudentStateReq::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetStudentStateReq::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateReq::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateReq.request_id)
  return request_id_;
}
inline void IMConsultGetStudentStateReq::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateReq.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultGetStudentStateReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetStudentStateReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetStudentStateReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetStudentStateReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateReq.student_id)
  return student_id_;
}
inline void IMConsultGetStudentStateReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateReq.student_id)
}

// repeated uint32 order_id_list = 3;
inline int IMConsultGetStudentStateReq::order_id_list_size() const {
  return order_id_list_.size();
}
inline void IMConsultGetStudentStateReq::clear_order_id_list() {
  order_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateReq::order_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateReq.order_id_list)
  return order_id_list_.Get(index);
}
inline void IMConsultGetStudentStateReq::set_order_id_list(int index, ::google::protobuf::uint32 value) {
  order_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateReq.order_id_list)
}
inline void IMConsultGetStudentStateReq::add_order_id_list(::google::protobuf::uint32 value) {
  order_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetStudentStateReq.order_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMConsultGetStudentStateReq::order_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetStudentStateReq.order_id_list)
  return order_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMConsultGetStudentStateReq::mutable_order_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetStudentStateReq.order_id_list)
  return &order_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMConsultGetStudentStateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultGetStudentStateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultGetStudentStateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultGetStudentStateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetStudentStateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateReq.attach_data)
  return *attach_data_;
}
inline void IMConsultGetStudentStateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateReq.attach_data)
}
inline void IMConsultGetStudentStateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetStudentStateReq.attach_data)
}
inline void IMConsultGetStudentStateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetStudentStateReq.attach_data)
}
inline ::std::string* IMConsultGetStudentStateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetStudentStateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetStudentStateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetStudentStateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetStudentStateReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetStudentStateResp

// required uint32 request_id = 1;
inline bool IMConsultGetStudentStateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetStudentStateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetStudentStateResp::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.request_id)
  return request_id_;
}
inline void IMConsultGetStudentStateResp::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultGetStudentStateResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetStudentStateResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetStudentStateResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.student_id)
  return student_id_;
}
inline void IMConsultGetStudentStateResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.student_id)
}

// repeated uint32 order_id_list = 3;
inline int IMConsultGetStudentStateResp::order_id_list_size() const {
  return order_id_list_.size();
}
inline void IMConsultGetStudentStateResp::clear_order_id_list() {
  order_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::order_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.order_id_list)
  return order_id_list_.Get(index);
}
inline void IMConsultGetStudentStateResp::set_order_id_list(int index, ::google::protobuf::uint32 value) {
  order_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.order_id_list)
}
inline void IMConsultGetStudentStateResp::add_order_id_list(::google::protobuf::uint32 value) {
  order_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetStudentStateResp.order_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMConsultGetStudentStateResp::order_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetStudentStateResp.order_id_list)
  return order_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMConsultGetStudentStateResp::mutable_order_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetStudentStateResp.order_id_list)
  return &order_id_list_;
}

// required uint32 student_state = 4;
inline bool IMConsultGetStudentStateResp::has_student_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_student_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultGetStudentStateResp::clear_has_student_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultGetStudentStateResp::clear_student_state() {
  student_state_ = 0u;
  clear_has_student_state();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::student_state() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.student_state)
  return student_state_;
}
inline void IMConsultGetStudentStateResp::set_student_state(::google::protobuf::uint32 value) {
  set_has_student_state();
  student_state_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.student_state)
}

// required uint32 consult_teacher_id = 5;
inline bool IMConsultGetStudentStateResp::has_consult_teacher_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_consult_teacher_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultGetStudentStateResp::clear_has_consult_teacher_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultGetStudentStateResp::clear_consult_teacher_id() {
  consult_teacher_id_ = 0u;
  clear_has_consult_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::consult_teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.consult_teacher_id)
  return consult_teacher_id_;
}
inline void IMConsultGetStudentStateResp::set_consult_teacher_id(::google::protobuf::uint32 value) {
  set_has_consult_teacher_id();
  consult_teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.consult_teacher_id)
}

// required uint32 result = 6;
inline bool IMConsultGetStudentStateResp::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultGetStudentStateResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultGetStudentStateResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultGetStudentStateResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.result)
  return result_;
}
inline void IMConsultGetStudentStateResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetStudentStateResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultGetStudentStateResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultGetStudentStateResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultGetStudentStateResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetStudentStateResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentStateResp.attach_data)
  return *attach_data_;
}
inline void IMConsultGetStudentStateResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentStateResp.attach_data)
}
inline void IMConsultGetStudentStateResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetStudentStateResp.attach_data)
}
inline void IMConsultGetStudentStateResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetStudentStateResp.attach_data)
}
inline ::std::string* IMConsultGetStudentStateResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetStudentStateResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetStudentStateResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetStudentStateResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetStudentStateResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCreatReq

// required uint32 student_id = 1;
inline bool IMConsultCreatReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCreatReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCreatReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCreatReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCreatReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.student_id)
  return student_id_;
}
inline void IMConsultCreatReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.student_id)
}

// required uint32 teacher_id = 2;
inline bool IMConsultCreatReq::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCreatReq::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCreatReq::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCreatReq::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCreatReq::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.teacher_id)
  return teacher_id_;
}
inline void IMConsultCreatReq::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.teacher_id)
}

// required uint32 order_id = 3;
inline bool IMConsultCreatReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCreatReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCreatReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCreatReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCreatReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.order_id)
  return order_id_;
}
inline void IMConsultCreatReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.order_id)
}

// required uint32 create_type = 4;
inline bool IMConsultCreatReq::has_create_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCreatReq::set_has_create_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCreatReq::clear_has_create_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCreatReq::clear_create_type() {
  create_type_ = 0u;
  clear_has_create_type();
}
inline ::google::protobuf::uint32 IMConsultCreatReq::create_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.create_type)
  return create_type_;
}
inline void IMConsultCreatReq::set_create_type(::google::protobuf::uint32 value) {
  set_has_create_type();
  create_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.create_type)
}

// required uint32 queue_ts = 5;
inline bool IMConsultCreatReq::has_queue_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCreatReq::set_has_queue_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCreatReq::clear_has_queue_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCreatReq::clear_queue_ts() {
  queue_ts_ = 0u;
  clear_has_queue_ts();
}
inline ::google::protobuf::uint32 IMConsultCreatReq::queue_ts() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.queue_ts)
  return queue_ts_;
}
inline void IMConsultCreatReq::set_queue_ts(::google::protobuf::uint32 value) {
  set_has_queue_ts();
  queue_ts_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.queue_ts)
}

// optional string manager_name = 6;
inline bool IMConsultCreatReq::has_manager_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCreatReq::set_has_manager_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCreatReq::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCreatReq::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultCreatReq::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.manager_name)
  return *manager_name_;
}
inline void IMConsultCreatReq::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.manager_name)
}
inline void IMConsultCreatReq::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatReq.manager_name)
}
inline void IMConsultCreatReq::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatReq.manager_name)
}
inline ::std::string* IMConsultCreatReq::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatReq.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultCreatReq::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatReq::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatReq.manager_name)
}

// optional string manager_portrait = 7;
inline bool IMConsultCreatReq::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCreatReq::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCreatReq::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCreatReq::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultCreatReq::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultCreatReq::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.manager_portrait)
}
inline void IMConsultCreatReq::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatReq.manager_portrait)
}
inline void IMConsultCreatReq::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatReq.manager_portrait)
}
inline ::std::string* IMConsultCreatReq::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatReq.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultCreatReq::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatReq::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatReq.manager_portrait)
}

// optional bytes attach_data = 20;
inline bool IMConsultCreatReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultCreatReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultCreatReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultCreatReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCreatReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatReq.attach_data)
  return *attach_data_;
}
inline void IMConsultCreatReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatReq.attach_data)
}
inline void IMConsultCreatReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatReq.attach_data)
}
inline void IMConsultCreatReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatReq.attach_data)
}
inline ::std::string* IMConsultCreatReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCreatReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCreatResp

// required uint32 student_id = 1;
inline bool IMConsultCreatResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCreatResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCreatResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCreatResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.student_id)
  return student_id_;
}
inline void IMConsultCreatResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.student_id)
}

// required uint32 teacher_id = 2;
inline bool IMConsultCreatResp::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCreatResp::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCreatResp::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCreatResp::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.teacher_id)
  return teacher_id_;
}
inline void IMConsultCreatResp::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.teacher_id)
}

// required uint32 order_id = 3;
inline bool IMConsultCreatResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCreatResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCreatResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCreatResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.order_id)
  return order_id_;
}
inline void IMConsultCreatResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.order_id)
}

// required uint32 consult_id = 4;
inline bool IMConsultCreatResp::has_consult_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCreatResp::set_has_consult_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCreatResp::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCreatResp::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.consult_id)
  return consult_id_;
}
inline void IMConsultCreatResp::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.consult_id)
}

// required uint32 create_type = 5;
inline bool IMConsultCreatResp::has_create_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCreatResp::set_has_create_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCreatResp::clear_has_create_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCreatResp::clear_create_type() {
  create_type_ = 0u;
  clear_has_create_type();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::create_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.create_type)
  return create_type_;
}
inline void IMConsultCreatResp::set_create_type(::google::protobuf::uint32 value) {
  set_has_create_type();
  create_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.create_type)
}

// required uint32 result = 6;
inline bool IMConsultCreatResp::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCreatResp::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCreatResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCreatResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultCreatResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.result)
  return result_;
}
inline void IMConsultCreatResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.result)
}

// optional bytes script = 7;
inline bool IMConsultCreatResp::has_script() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCreatResp::set_has_script() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCreatResp::clear_has_script() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCreatResp::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultCreatResp::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.script)
  return *script_;
}
inline void IMConsultCreatResp::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.script)
}
inline void IMConsultCreatResp::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatResp.script)
}
inline void IMConsultCreatResp::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatResp.script)
}
inline ::std::string* IMConsultCreatResp::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatResp.script)
  return script_;
}
inline ::std::string* IMConsultCreatResp::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatResp::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatResp.script)
}

// optional string manager_name = 8;
inline bool IMConsultCreatResp::has_manager_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultCreatResp::set_has_manager_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultCreatResp::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultCreatResp::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultCreatResp::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.manager_name)
  return *manager_name_;
}
inline void IMConsultCreatResp::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.manager_name)
}
inline void IMConsultCreatResp::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatResp.manager_name)
}
inline void IMConsultCreatResp::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatResp.manager_name)
}
inline ::std::string* IMConsultCreatResp::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatResp.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultCreatResp::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatResp::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatResp.manager_name)
}

// optional string manager_portrait = 9;
inline bool IMConsultCreatResp::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultCreatResp::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultCreatResp::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultCreatResp::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultCreatResp::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultCreatResp::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.manager_portrait)
}
inline void IMConsultCreatResp::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatResp.manager_portrait)
}
inline void IMConsultCreatResp::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatResp.manager_portrait)
}
inline ::std::string* IMConsultCreatResp::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatResp.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultCreatResp::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatResp::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatResp.manager_portrait)
}

// optional bytes attach_data = 20;
inline bool IMConsultCreatResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMConsultCreatResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMConsultCreatResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMConsultCreatResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCreatResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreatResp.attach_data)
  return *attach_data_;
}
inline void IMConsultCreatResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreatResp.attach_data)
}
inline void IMConsultCreatResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreatResp.attach_data)
}
inline void IMConsultCreatResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreatResp.attach_data)
}
inline ::std::string* IMConsultCreatResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreatResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCreatResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreatResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreatResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCloseReq

// required uint32 request_id = 1;
inline bool IMConsultCloseReq::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCloseReq::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCloseReq::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCloseReq::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.request_id)
  return request_id_;
}
inline void IMConsultCloseReq::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultCloseReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCloseReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCloseReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCloseReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.student_id)
  return student_id_;
}
inline void IMConsultCloseReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.student_id)
}

// required uint32 teacher_id = 3;
inline bool IMConsultCloseReq::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCloseReq::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCloseReq::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCloseReq::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.teacher_id)
  return teacher_id_;
}
inline void IMConsultCloseReq::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.teacher_id)
}

// required uint32 order_id = 4;
inline bool IMConsultCloseReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCloseReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCloseReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCloseReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.order_id)
  return order_id_;
}
inline void IMConsultCloseReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.order_id)
}

// required uint32 consult_id = 5;
inline bool IMConsultCloseReq::has_consult_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCloseReq::set_has_consult_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCloseReq::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCloseReq::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.consult_id)
  return consult_id_;
}
inline void IMConsultCloseReq::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.consult_id)
}

// required uint32 close_type = 6;
inline bool IMConsultCloseReq::has_close_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCloseReq::set_has_close_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCloseReq::clear_has_close_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCloseReq::clear_close_type() {
  close_type_ = 0u;
  clear_has_close_type();
}
inline ::google::protobuf::uint32 IMConsultCloseReq::close_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.close_type)
  return close_type_;
}
inline void IMConsultCloseReq::set_close_type(::google::protobuf::uint32 value) {
  set_has_close_type();
  close_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.close_type)
}

// optional bytes attach_data = 20;
inline bool IMConsultCloseReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCloseReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCloseReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCloseReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCloseReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseReq.attach_data)
  return *attach_data_;
}
inline void IMConsultCloseReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseReq.attach_data)
}
inline void IMConsultCloseReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCloseReq.attach_data)
}
inline void IMConsultCloseReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCloseReq.attach_data)
}
inline ::std::string* IMConsultCloseReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCloseReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCloseReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCloseReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCloseReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCloseResp

// required uint32 request_id = 1;
inline bool IMConsultCloseResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCloseResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCloseResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCloseResp::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.request_id)
  return request_id_;
}
inline void IMConsultCloseResp::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultCloseResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCloseResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCloseResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCloseResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.student_id)
  return student_id_;
}
inline void IMConsultCloseResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.student_id)
}

// required uint32 teacher_id = 3;
inline bool IMConsultCloseResp::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCloseResp::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCloseResp::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCloseResp::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.teacher_id)
  return teacher_id_;
}
inline void IMConsultCloseResp::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.teacher_id)
}

// required uint32 order_id = 4;
inline bool IMConsultCloseResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCloseResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCloseResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCloseResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.order_id)
  return order_id_;
}
inline void IMConsultCloseResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.order_id)
}

// required uint32 consult_id = 5;
inline bool IMConsultCloseResp::has_consult_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCloseResp::set_has_consult_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCloseResp::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCloseResp::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.consult_id)
  return consult_id_;
}
inline void IMConsultCloseResp::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.consult_id)
}

// required uint32 close_type = 6;
inline bool IMConsultCloseResp::has_close_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCloseResp::set_has_close_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCloseResp::clear_has_close_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCloseResp::clear_close_type() {
  close_type_ = 0u;
  clear_has_close_type();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::close_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.close_type)
  return close_type_;
}
inline void IMConsultCloseResp::set_close_type(::google::protobuf::uint32 value) {
  set_has_close_type();
  close_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.close_type)
}

// required uint32 result = 7;
inline bool IMConsultCloseResp::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCloseResp::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCloseResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCloseResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultCloseResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.result)
  return result_;
}
inline void IMConsultCloseResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.result)
}

// optional bytes script = 8;
inline bool IMConsultCloseResp::has_script() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultCloseResp::set_has_script() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultCloseResp::clear_has_script() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultCloseResp::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultCloseResp::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.script)
  return *script_;
}
inline void IMConsultCloseResp::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.script)
}
inline void IMConsultCloseResp::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCloseResp.script)
}
inline void IMConsultCloseResp::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCloseResp.script)
}
inline ::std::string* IMConsultCloseResp::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCloseResp.script)
  return script_;
}
inline ::std::string* IMConsultCloseResp::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCloseResp::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCloseResp.script)
}

// optional bytes attach_data = 20;
inline bool IMConsultCloseResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultCloseResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultCloseResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultCloseResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCloseResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseResp.attach_data)
  return *attach_data_;
}
inline void IMConsultCloseResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseResp.attach_data)
}
inline void IMConsultCloseResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCloseResp.attach_data)
}
inline void IMConsultCloseResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCloseResp.attach_data)
}
inline ::std::string* IMConsultCloseResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCloseResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCloseResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCloseResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCloseResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCreateAnnounce

// required uint32 consult_id = 1;
inline bool IMConsultCreateAnnounce::has_consult_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_consult_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCreateAnnounce::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCreateAnnounce::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultCreateAnnounce::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.consult_id)
  return consult_id_;
}
inline void IMConsultCreateAnnounce::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.consult_id)
}

// required uint32 student_id = 2;
inline bool IMConsultCreateAnnounce::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCreateAnnounce::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCreateAnnounce::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCreateAnnounce::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.student_id)
  return student_id_;
}
inline void IMConsultCreateAnnounce::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.student_id)
}

// required uint32 teacher_id = 3;
inline bool IMConsultCreateAnnounce::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCreateAnnounce::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCreateAnnounce::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCreateAnnounce::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.teacher_id)
  return teacher_id_;
}
inline void IMConsultCreateAnnounce::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.teacher_id)
}

// required uint32 order_id = 4;
inline bool IMConsultCreateAnnounce::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCreateAnnounce::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCreateAnnounce::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCreateAnnounce::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.order_id)
  return order_id_;
}
inline void IMConsultCreateAnnounce::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.order_id)
}

// required uint32 create_type = 5;
inline bool IMConsultCreateAnnounce::has_create_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_create_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCreateAnnounce::clear_has_create_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCreateAnnounce::clear_create_type() {
  create_type_ = 0u;
  clear_has_create_type();
}
inline ::google::protobuf::uint32 IMConsultCreateAnnounce::create_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.create_type)
  return create_type_;
}
inline void IMConsultCreateAnnounce::set_create_type(::google::protobuf::uint32 value) {
  set_has_create_type();
  create_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.create_type)
}

// optional bytes script = 6;
inline bool IMConsultCreateAnnounce::has_script() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_script() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCreateAnnounce::clear_has_script() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCreateAnnounce::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultCreateAnnounce::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.script)
  return *script_;
}
inline void IMConsultCreateAnnounce::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.script)
}
inline void IMConsultCreateAnnounce::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreateAnnounce.script)
}
inline void IMConsultCreateAnnounce::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreateAnnounce.script)
}
inline ::std::string* IMConsultCreateAnnounce::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreateAnnounce.script)
  return script_;
}
inline ::std::string* IMConsultCreateAnnounce::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreateAnnounce::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreateAnnounce.script)
}

// optional string manager_name = 7;
inline bool IMConsultCreateAnnounce::has_manager_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_manager_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCreateAnnounce::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCreateAnnounce::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultCreateAnnounce::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.manager_name)
  return *manager_name_;
}
inline void IMConsultCreateAnnounce::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.manager_name)
}
inline void IMConsultCreateAnnounce::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreateAnnounce.manager_name)
}
inline void IMConsultCreateAnnounce::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreateAnnounce.manager_name)
}
inline ::std::string* IMConsultCreateAnnounce::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreateAnnounce.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultCreateAnnounce::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreateAnnounce::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreateAnnounce.manager_name)
}

// optional string manager_portrait = 8;
inline bool IMConsultCreateAnnounce::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultCreateAnnounce::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultCreateAnnounce::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultCreateAnnounce::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultCreateAnnounce::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
}
inline void IMConsultCreateAnnounce::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
}
inline void IMConsultCreateAnnounce::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
}
inline ::std::string* IMConsultCreateAnnounce::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultCreateAnnounce::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreateAnnounce::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreateAnnounce.manager_portrait)
}

// optional bytes attach_data = 20;
inline bool IMConsultCreateAnnounce::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultCreateAnnounce::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultCreateAnnounce::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultCreateAnnounce::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCreateAnnounce::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCreateAnnounce.attach_data)
  return *attach_data_;
}
inline void IMConsultCreateAnnounce::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCreateAnnounce.attach_data)
}
inline void IMConsultCreateAnnounce::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCreateAnnounce.attach_data)
}
inline void IMConsultCreateAnnounce::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCreateAnnounce.attach_data)
}
inline ::std::string* IMConsultCreateAnnounce::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCreateAnnounce.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCreateAnnounce::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCreateAnnounce::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCreateAnnounce.attach_data)
}

// -------------------------------------------------------------------

// IMConsultCloseAnnounce

// required uint32 consult_id = 1;
inline bool IMConsultCloseAnnounce::has_consult_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_consult_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultCloseAnnounce::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultCloseAnnounce::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultCloseAnnounce::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.consult_id)
  return consult_id_;
}
inline void IMConsultCloseAnnounce::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.consult_id)
}

// required uint32 student_id = 2;
inline bool IMConsultCloseAnnounce::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultCloseAnnounce::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultCloseAnnounce::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultCloseAnnounce::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.student_id)
  return student_id_;
}
inline void IMConsultCloseAnnounce::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.student_id)
}

// required uint32 teacher_id = 3;
inline bool IMConsultCloseAnnounce::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultCloseAnnounce::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultCloseAnnounce::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultCloseAnnounce::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.teacher_id)
  return teacher_id_;
}
inline void IMConsultCloseAnnounce::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.teacher_id)
}

// required uint32 order_id = 4;
inline bool IMConsultCloseAnnounce::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultCloseAnnounce::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultCloseAnnounce::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultCloseAnnounce::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.order_id)
  return order_id_;
}
inline void IMConsultCloseAnnounce::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.order_id)
}

// required uint32 close_type = 5;
inline bool IMConsultCloseAnnounce::has_close_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_close_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultCloseAnnounce::clear_has_close_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultCloseAnnounce::clear_close_type() {
  close_type_ = 0u;
  clear_has_close_type();
}
inline ::google::protobuf::uint32 IMConsultCloseAnnounce::close_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.close_type)
  return close_type_;
}
inline void IMConsultCloseAnnounce::set_close_type(::google::protobuf::uint32 value) {
  set_has_close_type();
  close_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.close_type)
}

// optional bytes script = 6;
inline bool IMConsultCloseAnnounce::has_script() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_script() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultCloseAnnounce::clear_has_script() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultCloseAnnounce::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultCloseAnnounce::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.script)
  return *script_;
}
inline void IMConsultCloseAnnounce::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.script)
}
inline void IMConsultCloseAnnounce::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCloseAnnounce.script)
}
inline void IMConsultCloseAnnounce::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCloseAnnounce.script)
}
inline ::std::string* IMConsultCloseAnnounce::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCloseAnnounce.script)
  return script_;
}
inline ::std::string* IMConsultCloseAnnounce::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCloseAnnounce::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCloseAnnounce.script)
}

// optional bytes attach_data = 20;
inline bool IMConsultCloseAnnounce::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultCloseAnnounce::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultCloseAnnounce::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultCloseAnnounce::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultCloseAnnounce::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultCloseAnnounce.attach_data)
  return *attach_data_;
}
inline void IMConsultCloseAnnounce::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultCloseAnnounce.attach_data)
}
inline void IMConsultCloseAnnounce::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultCloseAnnounce.attach_data)
}
inline void IMConsultCloseAnnounce::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultCloseAnnounce.attach_data)
}
inline ::std::string* IMConsultCloseAnnounce::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultCloseAnnounce.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultCloseAnnounce::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultCloseAnnounce::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultCloseAnnounce.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentInQueueReq

// required uint32 student_id = 1;
inline bool IMConsultStudentInQueueReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentInQueueReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentInQueueReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentInQueueReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueReq.student_id)
  return student_id_;
}
inline void IMConsultStudentInQueueReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueReq.student_id)
}

// required uint32 teacher_id = 2;
inline bool IMConsultStudentInQueueReq::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentInQueueReq::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentInQueueReq::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentInQueueReq::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueReq::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueReq.teacher_id)
  return teacher_id_;
}
inline void IMConsultStudentInQueueReq::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueReq.teacher_id)
}

// required uint32 order_id = 3;
inline bool IMConsultStudentInQueueReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentInQueueReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentInQueueReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentInQueueReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueReq.order_id)
  return order_id_;
}
inline void IMConsultStudentInQueueReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueReq.order_id)
}

// required uint32 queue_ts = 4;
inline bool IMConsultStudentInQueueReq::has_queue_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultStudentInQueueReq::set_has_queue_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultStudentInQueueReq::clear_has_queue_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultStudentInQueueReq::clear_queue_ts() {
  queue_ts_ = 0u;
  clear_has_queue_ts();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueReq::queue_ts() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueReq.queue_ts)
  return queue_ts_;
}
inline void IMConsultStudentInQueueReq::set_queue_ts(::google::protobuf::uint32 value) {
  set_has_queue_ts();
  queue_ts_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueReq.queue_ts)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentInQueueReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultStudentInQueueReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultStudentInQueueReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultStudentInQueueReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentInQueueReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueReq.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentInQueueReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueReq.attach_data)
}
inline void IMConsultStudentInQueueReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentInQueueReq.attach_data)
}
inline void IMConsultStudentInQueueReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentInQueueReq.attach_data)
}
inline ::std::string* IMConsultStudentInQueueReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentInQueueReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentInQueueReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentInQueueReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentInQueueReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentInQueueResp

// required uint32 student_id = 1;
inline bool IMConsultStudentInQueueResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentInQueueResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentInQueueResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.student_id)
  return student_id_;
}
inline void IMConsultStudentInQueueResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.student_id)
}

// required uint32 teacher_id = 2;
inline bool IMConsultStudentInQueueResp::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentInQueueResp::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentInQueueResp::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueResp::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.teacher_id)
  return teacher_id_;
}
inline void IMConsultStudentInQueueResp::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.teacher_id)
}

// required uint32 order_id = 3;
inline bool IMConsultStudentInQueueResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentInQueueResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentInQueueResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.order_id)
  return order_id_;
}
inline void IMConsultStudentInQueueResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.order_id)
}

// required uint32 result = 4;
inline bool IMConsultStudentInQueueResp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultStudentInQueueResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultStudentInQueueResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultStudentInQueueResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.result)
  return result_;
}
inline void IMConsultStudentInQueueResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.result)
}

// optional bytes script = 5;
inline bool IMConsultStudentInQueueResp::has_script() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_script() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultStudentInQueueResp::clear_has_script() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultStudentInQueueResp::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultStudentInQueueResp::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.script)
  return *script_;
}
inline void IMConsultStudentInQueueResp::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.script)
}
inline void IMConsultStudentInQueueResp::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentInQueueResp.script)
}
inline void IMConsultStudentInQueueResp::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentInQueueResp.script)
}
inline ::std::string* IMConsultStudentInQueueResp::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentInQueueResp.script)
  return script_;
}
inline ::std::string* IMConsultStudentInQueueResp::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentInQueueResp::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentInQueueResp.script)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentInQueueResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultStudentInQueueResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultStudentInQueueResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultStudentInQueueResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentInQueueResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentInQueueResp.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentInQueueResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentInQueueResp.attach_data)
}
inline void IMConsultStudentInQueueResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentInQueueResp.attach_data)
}
inline void IMConsultStudentInQueueResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentInQueueResp.attach_data)
}
inline ::std::string* IMConsultStudentInQueueResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentInQueueResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentInQueueResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentInQueueResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentInQueueResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultTeacherOfflineInform

// required uint32 student_id = 1;
inline bool IMConsultTeacherOfflineInform::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultTeacherOfflineInform::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultTeacherOfflineInform::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultTeacherOfflineInform::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherOfflineInform::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherOfflineInform.student_id)
  return student_id_;
}
inline void IMConsultTeacherOfflineInform::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherOfflineInform.student_id)
}

// required uint32 teacher_id = 2;
inline bool IMConsultTeacherOfflineInform::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultTeacherOfflineInform::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultTeacherOfflineInform::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultTeacherOfflineInform::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherOfflineInform::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherOfflineInform.teacher_id)
  return teacher_id_;
}
inline void IMConsultTeacherOfflineInform::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherOfflineInform.teacher_id)
}

// required uint32 order_id = 3;
inline bool IMConsultTeacherOfflineInform::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultTeacherOfflineInform::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultTeacherOfflineInform::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultTeacherOfflineInform::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherOfflineInform::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherOfflineInform.order_id)
  return order_id_;
}
inline void IMConsultTeacherOfflineInform::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherOfflineInform.order_id)
}

// required uint32 queue_ts = 4;
inline bool IMConsultTeacherOfflineInform::has_queue_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultTeacherOfflineInform::set_has_queue_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultTeacherOfflineInform::clear_has_queue_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultTeacherOfflineInform::clear_queue_ts() {
  queue_ts_ = 0u;
  clear_has_queue_ts();
}
inline ::google::protobuf::uint32 IMConsultTeacherOfflineInform::queue_ts() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherOfflineInform.queue_ts)
  return queue_ts_;
}
inline void IMConsultTeacherOfflineInform::set_queue_ts(::google::protobuf::uint32 value) {
  set_has_queue_ts();
  queue_ts_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherOfflineInform.queue_ts)
}

// optional bytes attach_data = 20;
inline bool IMConsultTeacherOfflineInform::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultTeacherOfflineInform::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultTeacherOfflineInform::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultTeacherOfflineInform::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultTeacherOfflineInform::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
  return *attach_data_;
}
inline void IMConsultTeacherOfflineInform::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
}
inline void IMConsultTeacherOfflineInform::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
}
inline void IMConsultTeacherOfflineInform::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
}
inline ::std::string* IMConsultTeacherOfflineInform::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultTeacherOfflineInform::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultTeacherOfflineInform::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultTeacherOfflineInform.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentOutQueueReq

// required uint32 student_id = 1;
inline bool IMConsultStudentOutQueueReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentOutQueueReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentOutQueueReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentOutQueueReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentOutQueueReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueReq.student_id)
  return student_id_;
}
inline void IMConsultStudentOutQueueReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueReq.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultStudentOutQueueReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentOutQueueReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentOutQueueReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentOutQueueReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentOutQueueReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueReq.order_id)
  return order_id_;
}
inline void IMConsultStudentOutQueueReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueReq.order_id)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentOutQueueReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentOutQueueReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentOutQueueReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentOutQueueReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentOutQueueReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentOutQueueReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
}
inline void IMConsultStudentOutQueueReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
}
inline void IMConsultStudentOutQueueReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
}
inline ::std::string* IMConsultStudentOutQueueReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentOutQueueReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentOutQueueReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentOutQueueReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentOutQueueResp

// required uint32 student_id = 1;
inline bool IMConsultStudentOutQueueResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentOutQueueResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentOutQueueResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentOutQueueResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentOutQueueResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueResp.student_id)
  return student_id_;
}
inline void IMConsultStudentOutQueueResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueResp.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultStudentOutQueueResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentOutQueueResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentOutQueueResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentOutQueueResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentOutQueueResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueResp.order_id)
  return order_id_;
}
inline void IMConsultStudentOutQueueResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueResp.order_id)
}

// required uint32 result = 3;
inline bool IMConsultStudentOutQueueResp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentOutQueueResp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentOutQueueResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentOutQueueResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultStudentOutQueueResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueResp.result)
  return result_;
}
inline void IMConsultStudentOutQueueResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentOutQueueResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultStudentOutQueueResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultStudentOutQueueResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultStudentOutQueueResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentOutQueueResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentOutQueueResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
}
inline void IMConsultStudentOutQueueResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
}
inline void IMConsultStudentOutQueueResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
}
inline ::std::string* IMConsultStudentOutQueueResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentOutQueueResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentOutQueueResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentOutQueueResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultTeacherModifyStateReq

// required uint32 teacher_id = 1;
inline bool IMConsultTeacherModifyStateReq::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultTeacherModifyStateReq::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultTeacherModifyStateReq::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultTeacherModifyStateReq::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateReq::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateReq.teacher_id)
  return teacher_id_;
}
inline void IMConsultTeacherModifyStateReq::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateReq.teacher_id)
}

// required uint32 client_type = 2;
inline bool IMConsultTeacherModifyStateReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultTeacherModifyStateReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultTeacherModifyStateReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultTeacherModifyStateReq::clear_client_type() {
  client_type_ = 0u;
  clear_has_client_type();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateReq.client_type)
  return client_type_;
}
inline void IMConsultTeacherModifyStateReq::set_client_type(::google::protobuf::uint32 value) {
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateReq.client_type)
}

// required uint32 state = 3;
inline bool IMConsultTeacherModifyStateReq::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultTeacherModifyStateReq::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultTeacherModifyStateReq::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultTeacherModifyStateReq::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateReq::state() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateReq.state)
  return state_;
}
inline void IMConsultTeacherModifyStateReq::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateReq.state)
}

// optional bytes attach_data = 20;
inline bool IMConsultTeacherModifyStateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultTeacherModifyStateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultTeacherModifyStateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultTeacherModifyStateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultTeacherModifyStateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
  return *attach_data_;
}
inline void IMConsultTeacherModifyStateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
}
inline void IMConsultTeacherModifyStateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
}
inline void IMConsultTeacherModifyStateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
}
inline ::std::string* IMConsultTeacherModifyStateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultTeacherModifyStateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultTeacherModifyStateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultTeacherModifyStateReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultTeacherModifyStateResp

// required uint32 teacher_id = 1;
inline bool IMConsultTeacherModifyStateResp::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultTeacherModifyStateResp::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultTeacherModifyStateResp::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultTeacherModifyStateResp::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateResp::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateResp.teacher_id)
  return teacher_id_;
}
inline void IMConsultTeacherModifyStateResp::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateResp.teacher_id)
}

// required uint32 client_type = 2;
inline bool IMConsultTeacherModifyStateResp::has_client_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultTeacherModifyStateResp::set_has_client_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultTeacherModifyStateResp::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultTeacherModifyStateResp::clear_client_type() {
  client_type_ = 0u;
  clear_has_client_type();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateResp::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateResp.client_type)
  return client_type_;
}
inline void IMConsultTeacherModifyStateResp::set_client_type(::google::protobuf::uint32 value) {
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateResp.client_type)
}

// required uint32 state = 3;
inline bool IMConsultTeacherModifyStateResp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultTeacherModifyStateResp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultTeacherModifyStateResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultTeacherModifyStateResp::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateResp::state() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateResp.state)
  return state_;
}
inline void IMConsultTeacherModifyStateResp::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateResp.state)
}

// required uint32 result = 4;
inline bool IMConsultTeacherModifyStateResp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultTeacherModifyStateResp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultTeacherModifyStateResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultTeacherModifyStateResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyStateResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateResp.result)
  return result_;
}
inline void IMConsultTeacherModifyStateResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultTeacherModifyStateResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultTeacherModifyStateResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultTeacherModifyStateResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultTeacherModifyStateResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultTeacherModifyStateResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
  return *attach_data_;
}
inline void IMConsultTeacherModifyStateResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
}
inline void IMConsultTeacherModifyStateResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
}
inline void IMConsultTeacherModifyStateResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
}
inline ::std::string* IMConsultTeacherModifyStateResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultTeacherModifyStateResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultTeacherModifyStateResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultTeacherModifyStateResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetTeacherStateReq

// required uint32 request_id = 1;
inline bool IMConsultGetTeacherStateReq::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetTeacherStateReq::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetTeacherStateReq::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetTeacherStateReq::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherStateReq::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateReq.request_id)
  return request_id_;
}
inline void IMConsultGetTeacherStateReq::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateReq.request_id)
}

// repeated uint32 teacher_id_list = 2;
inline int IMConsultGetTeacherStateReq::teacher_id_list_size() const {
  return teacher_id_list_.size();
}
inline void IMConsultGetTeacherStateReq::clear_teacher_id_list() {
  teacher_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherStateReq::teacher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateReq.teacher_id_list)
  return teacher_id_list_.Get(index);
}
inline void IMConsultGetTeacherStateReq::set_teacher_id_list(int index, ::google::protobuf::uint32 value) {
  teacher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateReq.teacher_id_list)
}
inline void IMConsultGetTeacherStateReq::add_teacher_id_list(::google::protobuf::uint32 value) {
  teacher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetTeacherStateReq.teacher_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMConsultGetTeacherStateReq::teacher_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetTeacherStateReq.teacher_id_list)
  return teacher_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMConsultGetTeacherStateReq::mutable_teacher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetTeacherStateReq.teacher_id_list)
  return &teacher_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMConsultGetTeacherStateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultGetTeacherStateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultGetTeacherStateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultGetTeacherStateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetTeacherStateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
  return *attach_data_;
}
inline void IMConsultGetTeacherStateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
}
inline void IMConsultGetTeacherStateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
}
inline void IMConsultGetTeacherStateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
}
inline ::std::string* IMConsultGetTeacherStateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetTeacherStateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetTeacherStateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherStateReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetTeacherStateResp

// required uint32 request_id = 1;
inline bool IMConsultGetTeacherStateResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetTeacherStateResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetTeacherStateResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetTeacherStateResp::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherStateResp::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateResp.request_id)
  return request_id_;
}
inline void IMConsultGetTeacherStateResp::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateResp.request_id)
}

// repeated .IM.BaseDefine.TeacherStat teacher_state_list = 2;
inline int IMConsultGetTeacherStateResp::teacher_state_list_size() const {
  return teacher_state_list_.size();
}
inline void IMConsultGetTeacherStateResp::clear_teacher_state_list() {
  teacher_state_list_.Clear();
}
inline const ::IM::BaseDefine::TeacherStat& IMConsultGetTeacherStateResp::teacher_state_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateResp.teacher_state_list)
  return teacher_state_list_.Get(index);
}
inline ::IM::BaseDefine::TeacherStat* IMConsultGetTeacherStateResp::mutable_teacher_state_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherStateResp.teacher_state_list)
  return teacher_state_list_.Mutable(index);
}
inline ::IM::BaseDefine::TeacherStat* IMConsultGetTeacherStateResp::add_teacher_state_list() {
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetTeacherStateResp.teacher_state_list)
  return teacher_state_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::TeacherStat >&
IMConsultGetTeacherStateResp::teacher_state_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetTeacherStateResp.teacher_state_list)
  return teacher_state_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::TeacherStat >*
IMConsultGetTeacherStateResp::mutable_teacher_state_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetTeacherStateResp.teacher_state_list)
  return &teacher_state_list_;
}

// required uint32 result = 3;
inline bool IMConsultGetTeacherStateResp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultGetTeacherStateResp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultGetTeacherStateResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultGetTeacherStateResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultGetTeacherStateResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateResp.result)
  return result_;
}
inline void IMConsultGetTeacherStateResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetTeacherStateResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultGetTeacherStateResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultGetTeacherStateResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultGetTeacherStateResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetTeacherStateResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
  return *attach_data_;
}
inline void IMConsultGetTeacherStateResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
}
inline void IMConsultGetTeacherStateResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
}
inline void IMConsultGetTeacherStateResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
}
inline ::std::string* IMConsultGetTeacherStateResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetTeacherStateResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetTeacherStateResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetTeacherStateResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultTeacherModifyTopReq

// required uint32 teacher_id = 1;
inline bool IMConsultTeacherModifyTopReq::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultTeacherModifyTopReq::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultTeacherModifyTopReq::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultTeacherModifyTopReq::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopReq::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopReq.teacher_id)
  return teacher_id_;
}
inline void IMConsultTeacherModifyTopReq::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopReq.teacher_id)
}

// required uint32 student_id = 2;
inline bool IMConsultTeacherModifyTopReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultTeacherModifyTopReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultTeacherModifyTopReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultTeacherModifyTopReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopReq.student_id)
  return student_id_;
}
inline void IMConsultTeacherModifyTopReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopReq.student_id)
}

// required uint32 order_id = 3;
inline bool IMConsultTeacherModifyTopReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultTeacherModifyTopReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultTeacherModifyTopReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultTeacherModifyTopReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopReq.order_id)
  return order_id_;
}
inline void IMConsultTeacherModifyTopReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopReq.order_id)
}

// required uint32 top_type = 4;
inline bool IMConsultTeacherModifyTopReq::has_top_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultTeacherModifyTopReq::set_has_top_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultTeacherModifyTopReq::clear_has_top_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultTeacherModifyTopReq::clear_top_type() {
  top_type_ = 0u;
  clear_has_top_type();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopReq::top_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopReq.top_type)
  return top_type_;
}
inline void IMConsultTeacherModifyTopReq::set_top_type(::google::protobuf::uint32 value) {
  set_has_top_type();
  top_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopReq.top_type)
}

// optional bytes attach_data = 20;
inline bool IMConsultTeacherModifyTopReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultTeacherModifyTopReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultTeacherModifyTopReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultTeacherModifyTopReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultTeacherModifyTopReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
  return *attach_data_;
}
inline void IMConsultTeacherModifyTopReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
}
inline void IMConsultTeacherModifyTopReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
}
inline void IMConsultTeacherModifyTopReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
}
inline ::std::string* IMConsultTeacherModifyTopReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultTeacherModifyTopReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultTeacherModifyTopReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultTeacherModifyTopReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultTeacherModifyTopResp

// required uint32 teacher_id = 1;
inline bool IMConsultTeacherModifyTopResp::has_teacher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_teacher_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_teacher_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultTeacherModifyTopResp::clear_teacher_id() {
  teacher_id_ = 0u;
  clear_has_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopResp::teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.teacher_id)
  return teacher_id_;
}
inline void IMConsultTeacherModifyTopResp::set_teacher_id(::google::protobuf::uint32 value) {
  set_has_teacher_id();
  teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.teacher_id)
}

// required uint32 student_id = 2;
inline bool IMConsultTeacherModifyTopResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultTeacherModifyTopResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.student_id)
  return student_id_;
}
inline void IMConsultTeacherModifyTopResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.student_id)
}

// required uint32 order_id = 3;
inline bool IMConsultTeacherModifyTopResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultTeacherModifyTopResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.order_id)
  return order_id_;
}
inline void IMConsultTeacherModifyTopResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.order_id)
}

// required uint32 top_type = 4;
inline bool IMConsultTeacherModifyTopResp::has_top_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_top_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_top_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultTeacherModifyTopResp::clear_top_type() {
  top_type_ = 0u;
  clear_has_top_type();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopResp::top_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.top_type)
  return top_type_;
}
inline void IMConsultTeacherModifyTopResp::set_top_type(::google::protobuf::uint32 value) {
  set_has_top_type();
  top_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.top_type)
}

// required uint32 result = 5;
inline bool IMConsultTeacherModifyTopResp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultTeacherModifyTopResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultTeacherModifyTopResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.result)
  return result_;
}
inline void IMConsultTeacherModifyTopResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultTeacherModifyTopResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultTeacherModifyTopResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultTeacherModifyTopResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultTeacherModifyTopResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultTeacherModifyTopResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
  return *attach_data_;
}
inline void IMConsultTeacherModifyTopResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
}
inline void IMConsultTeacherModifyTopResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
}
inline void IMConsultTeacherModifyTopResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
}
inline ::std::string* IMConsultTeacherModifyTopResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultTeacherModifyTopResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultTeacherModifyTopResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultTeacherModifyTopResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentGetStateReq

// required uint32 student_id = 1;
inline bool IMConsultStudentGetStateReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentGetStateReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentGetStateReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentGetStateReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateReq.student_id)
  return student_id_;
}
inline void IMConsultStudentGetStateReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateReq.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultStudentGetStateReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentGetStateReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentGetStateReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentGetStateReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateReq.order_id)
  return order_id_;
}
inline void IMConsultStudentGetStateReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateReq.order_id)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentGetStateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentGetStateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentGetStateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentGetStateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentGetStateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateReq.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentGetStateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateReq.attach_data)
}
inline void IMConsultStudentGetStateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentGetStateReq.attach_data)
}
inline void IMConsultStudentGetStateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentGetStateReq.attach_data)
}
inline ::std::string* IMConsultStudentGetStateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentGetStateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentGetStateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentGetStateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentGetStateReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultStudentGetStateResp

// required uint32 student_id = 1;
inline bool IMConsultStudentGetStateResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultStudentGetStateResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultStudentGetStateResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.student_id)
  return student_id_;
}
inline void IMConsultStudentGetStateResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.student_id)
}

// required uint32 order_id = 2;
inline bool IMConsultStudentGetStateResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultStudentGetStateResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultStudentGetStateResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.order_id)
  return order_id_;
}
inline void IMConsultStudentGetStateResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.order_id)
}

// required uint32 state = 3;
inline bool IMConsultStudentGetStateResp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultStudentGetStateResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultStudentGetStateResp::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::state() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.state)
  return state_;
}
inline void IMConsultStudentGetStateResp::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.state)
}

// required uint32 consult_id = 4;
inline bool IMConsultStudentGetStateResp::has_consult_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_consult_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultStudentGetStateResp::clear_has_consult_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultStudentGetStateResp::clear_consult_id() {
  consult_id_ = 0u;
  clear_has_consult_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.consult_id)
  return consult_id_;
}
inline void IMConsultStudentGetStateResp::set_consult_id(::google::protobuf::uint32 value) {
  set_has_consult_id();
  consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.consult_id)
}

// required uint32 consult_teacher_id = 5;
inline bool IMConsultStudentGetStateResp::has_consult_teacher_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_consult_teacher_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultStudentGetStateResp::clear_has_consult_teacher_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultStudentGetStateResp::clear_consult_teacher_id() {
  consult_teacher_id_ = 0u;
  clear_has_consult_teacher_id();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::consult_teacher_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.consult_teacher_id)
  return consult_teacher_id_;
}
inline void IMConsultStudentGetStateResp::set_consult_teacher_id(::google::protobuf::uint32 value) {
  set_has_consult_teacher_id();
  consult_teacher_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.consult_teacher_id)
}

// required uint32 consult_teacher_identity = 6;
inline bool IMConsultStudentGetStateResp::has_consult_teacher_identity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_consult_teacher_identity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultStudentGetStateResp::clear_has_consult_teacher_identity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultStudentGetStateResp::clear_consult_teacher_identity() {
  consult_teacher_identity_ = 0u;
  clear_has_consult_teacher_identity();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::consult_teacher_identity() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.consult_teacher_identity)
  return consult_teacher_identity_;
}
inline void IMConsultStudentGetStateResp::set_consult_teacher_identity(::google::protobuf::uint32 value) {
  set_has_consult_teacher_identity();
  consult_teacher_identity_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.consult_teacher_identity)
}

// required uint32 result = 7;
inline bool IMConsultStudentGetStateResp::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultStudentGetStateResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultStudentGetStateResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultStudentGetStateResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.result)
  return result_;
}
inline void IMConsultStudentGetStateResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultStudentGetStateResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultStudentGetStateResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultStudentGetStateResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultStudentGetStateResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultStudentGetStateResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultStudentGetStateResp.attach_data)
  return *attach_data_;
}
inline void IMConsultStudentGetStateResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultStudentGetStateResp.attach_data)
}
inline void IMConsultStudentGetStateResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultStudentGetStateResp.attach_data)
}
inline void IMConsultStudentGetStateResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultStudentGetStateResp.attach_data)
}
inline ::std::string* IMConsultStudentGetStateResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultStudentGetStateResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultStudentGetStateResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultStudentGetStateResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultStudentGetStateResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetStudentConsultTeacherListReq

// required uint32 request_id = 1;
inline bool IMConsultGetStudentConsultTeacherListReq::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListReq::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListReq.request_id)
  return request_id_;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListReq.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultGetStudentConsultTeacherListReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListReq.student_id)
  return student_id_;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListReq.student_id)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetStudentConsultTeacherListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultGetStudentConsultTeacherListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetStudentConsultTeacherListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
  return *attach_data_;
}
inline void IMConsultGetStudentConsultTeacherListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
}
inline void IMConsultGetStudentConsultTeacherListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
}
inline void IMConsultGetStudentConsultTeacherListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
}
inline ::std::string* IMConsultGetStudentConsultTeacherListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetStudentConsultTeacherListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetStudentConsultTeacherListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetStudentConsultTeacherListReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultGetStudentConsultTeacherListResp

// required uint32 request_id = 1;
inline bool IMConsultGetStudentConsultTeacherListResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListResp::request_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListResp.request_id)
  return request_id_;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListResp.request_id)
}

// required uint32 student_id = 2;
inline bool IMConsultGetStudentConsultTeacherListResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListResp.student_id)
  return student_id_;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListResp.student_id)
}

// repeated uint32 teacher_id_list = 3;
inline int IMConsultGetStudentConsultTeacherListResp::teacher_id_list_size() const {
  return teacher_id_list_.size();
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_teacher_id_list() {
  teacher_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListResp::teacher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListResp.teacher_id_list)
  return teacher_id_list_.Get(index);
}
inline void IMConsultGetStudentConsultTeacherListResp::set_teacher_id_list(int index, ::google::protobuf::uint32 value) {
  teacher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListResp.teacher_id_list)
}
inline void IMConsultGetStudentConsultTeacherListResp::add_teacher_id_list(::google::protobuf::uint32 value) {
  teacher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultGetStudentConsultTeacherListResp.teacher_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMConsultGetStudentConsultTeacherListResp::teacher_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultGetStudentConsultTeacherListResp.teacher_id_list)
  return teacher_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMConsultGetStudentConsultTeacherListResp::mutable_teacher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultGetStudentConsultTeacherListResp.teacher_id_list)
  return &teacher_id_list_;
}

// required uint32 result = 4;
inline bool IMConsultGetStudentConsultTeacherListResp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultGetStudentConsultTeacherListResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListResp.result)
  return result_;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListResp.result)
}

// optional bytes attach_data = 20;
inline bool IMConsultGetStudentConsultTeacherListResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultGetStudentConsultTeacherListResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultGetStudentConsultTeacherListResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
  return *attach_data_;
}
inline void IMConsultGetStudentConsultTeacherListResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
}
inline void IMConsultGetStudentConsultTeacherListResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
}
inline void IMConsultGetStudentConsultTeacherListResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
}
inline ::std::string* IMConsultGetStudentConsultTeacherListResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultGetStudentConsultTeacherListResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultGetStudentConsultTeacherListResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultGetStudentConsultTeacherListResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultDeliverReq

// required uint32 duty_id = 1;
inline bool IMConsultDeliverReq::has_duty_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultDeliverReq::set_has_duty_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultDeliverReq::clear_has_duty_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultDeliverReq::clear_duty_id() {
  duty_id_ = 0u;
  clear_has_duty_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::duty_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.duty_id)
  return duty_id_;
}
inline void IMConsultDeliverReq::set_duty_id(::google::protobuf::uint32 value) {
  set_has_duty_id();
  duty_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.duty_id)
}

// required uint32 student_id = 2;
inline bool IMConsultDeliverReq::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultDeliverReq::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultDeliverReq::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultDeliverReq::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.student_id)
  return student_id_;
}
inline void IMConsultDeliverReq::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.student_id)
}

// required uint32 manager_id = 3;
inline bool IMConsultDeliverReq::has_manager_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultDeliverReq::set_has_manager_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultDeliverReq::clear_has_manager_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultDeliverReq::clear_manager_id() {
  manager_id_ = 0u;
  clear_has_manager_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::manager_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.manager_id)
  return manager_id_;
}
inline void IMConsultDeliverReq::set_manager_id(::google::protobuf::uint32 value) {
  set_has_manager_id();
  manager_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.manager_id)
}

// required uint32 order_id = 4;
inline bool IMConsultDeliverReq::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultDeliverReq::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultDeliverReq::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultDeliverReq::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.order_id)
  return order_id_;
}
inline void IMConsultDeliverReq::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.order_id)
}

// required uint32 deliver_type = 5;
inline bool IMConsultDeliverReq::has_deliver_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultDeliverReq::set_has_deliver_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultDeliverReq::clear_has_deliver_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultDeliverReq::clear_deliver_type() {
  deliver_type_ = 0u;
  clear_has_deliver_type();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::deliver_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.deliver_type)
  return deliver_type_;
}
inline void IMConsultDeliverReq::set_deliver_type(::google::protobuf::uint32 value) {
  set_has_deliver_type();
  deliver_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.deliver_type)
}

// required uint32 deliver_consult_id = 6;
inline bool IMConsultDeliverReq::has_deliver_consult_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultDeliverReq::set_has_deliver_consult_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultDeliverReq::clear_has_deliver_consult_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultDeliverReq::clear_deliver_consult_id() {
  deliver_consult_id_ = 0u;
  clear_has_deliver_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverReq::deliver_consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.deliver_consult_id)
  return deliver_consult_id_;
}
inline void IMConsultDeliverReq::set_deliver_consult_id(::google::protobuf::uint32 value) {
  set_has_deliver_consult_id();
  deliver_consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.deliver_consult_id)
}

// optional string manager_name = 7;
inline bool IMConsultDeliverReq::has_manager_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultDeliverReq::set_has_manager_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultDeliverReq::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultDeliverReq::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultDeliverReq::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.manager_name)
  return *manager_name_;
}
inline void IMConsultDeliverReq::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.manager_name)
}
inline void IMConsultDeliverReq::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverReq.manager_name)
}
inline void IMConsultDeliverReq::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverReq.manager_name)
}
inline ::std::string* IMConsultDeliverReq::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverReq.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultDeliverReq::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverReq::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverReq.manager_name)
}

// optional string manager_portrait = 8;
inline bool IMConsultDeliverReq::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultDeliverReq::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultDeliverReq::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultDeliverReq::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultDeliverReq::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultDeliverReq::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.manager_portrait)
}
inline void IMConsultDeliverReq::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverReq.manager_portrait)
}
inline void IMConsultDeliverReq::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverReq.manager_portrait)
}
inline ::std::string* IMConsultDeliverReq::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverReq.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultDeliverReq::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverReq::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverReq.manager_portrait)
}

// optional bytes attach_data = 20;
inline bool IMConsultDeliverReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultDeliverReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultDeliverReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultDeliverReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultDeliverReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverReq.attach_data)
  return *attach_data_;
}
inline void IMConsultDeliverReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverReq.attach_data)
}
inline void IMConsultDeliverReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverReq.attach_data)
}
inline void IMConsultDeliverReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverReq.attach_data)
}
inline ::std::string* IMConsultDeliverReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultDeliverReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverReq.attach_data)
}

// -------------------------------------------------------------------

// IMConsultDeliverResp

// required uint32 duty_id = 1;
inline bool IMConsultDeliverResp::has_duty_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultDeliverResp::set_has_duty_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultDeliverResp::clear_has_duty_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultDeliverResp::clear_duty_id() {
  duty_id_ = 0u;
  clear_has_duty_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::duty_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.duty_id)
  return duty_id_;
}
inline void IMConsultDeliverResp::set_duty_id(::google::protobuf::uint32 value) {
  set_has_duty_id();
  duty_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.duty_id)
}

// required uint32 student_id = 2;
inline bool IMConsultDeliverResp::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultDeliverResp::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultDeliverResp::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultDeliverResp::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.student_id)
  return student_id_;
}
inline void IMConsultDeliverResp::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.student_id)
}

// required uint32 manager_id = 3;
inline bool IMConsultDeliverResp::has_manager_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultDeliverResp::set_has_manager_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultDeliverResp::clear_has_manager_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultDeliverResp::clear_manager_id() {
  manager_id_ = 0u;
  clear_has_manager_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::manager_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.manager_id)
  return manager_id_;
}
inline void IMConsultDeliverResp::set_manager_id(::google::protobuf::uint32 value) {
  set_has_manager_id();
  manager_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.manager_id)
}

// required uint32 order_id = 4;
inline bool IMConsultDeliverResp::has_order_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultDeliverResp::set_has_order_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultDeliverResp::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultDeliverResp::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.order_id)
  return order_id_;
}
inline void IMConsultDeliverResp::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.order_id)
}

// required uint32 deliver_type = 5;
inline bool IMConsultDeliverResp::has_deliver_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultDeliverResp::set_has_deliver_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultDeliverResp::clear_has_deliver_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultDeliverResp::clear_deliver_type() {
  deliver_type_ = 0u;
  clear_has_deliver_type();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::deliver_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.deliver_type)
  return deliver_type_;
}
inline void IMConsultDeliverResp::set_deliver_type(::google::protobuf::uint32 value) {
  set_has_deliver_type();
  deliver_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.deliver_type)
}

// required uint32 deliver_consult_id = 6;
inline bool IMConsultDeliverResp::has_deliver_consult_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultDeliverResp::set_has_deliver_consult_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultDeliverResp::clear_has_deliver_consult_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultDeliverResp::clear_deliver_consult_id() {
  deliver_consult_id_ = 0u;
  clear_has_deliver_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::deliver_consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.deliver_consult_id)
  return deliver_consult_id_;
}
inline void IMConsultDeliverResp::set_deliver_consult_id(::google::protobuf::uint32 value) {
  set_has_deliver_consult_id();
  deliver_consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.deliver_consult_id)
}

// required uint32 new_consult_id = 7;
inline bool IMConsultDeliverResp::has_new_consult_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultDeliverResp::set_has_new_consult_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultDeliverResp::clear_has_new_consult_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultDeliverResp::clear_new_consult_id() {
  new_consult_id_ = 0u;
  clear_has_new_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::new_consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.new_consult_id)
  return new_consult_id_;
}
inline void IMConsultDeliverResp::set_new_consult_id(::google::protobuf::uint32 value) {
  set_has_new_consult_id();
  new_consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.new_consult_id)
}

// required uint32 result = 8;
inline bool IMConsultDeliverResp::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultDeliverResp::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultDeliverResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultDeliverResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMConsultDeliverResp::result() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.result)
  return result_;
}
inline void IMConsultDeliverResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.result)
}

// optional bytes script = 9;
inline bool IMConsultDeliverResp::has_script() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMConsultDeliverResp::set_has_script() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMConsultDeliverResp::clear_has_script() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMConsultDeliverResp::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultDeliverResp::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.script)
  return *script_;
}
inline void IMConsultDeliverResp::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.script)
}
inline void IMConsultDeliverResp::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverResp.script)
}
inline void IMConsultDeliverResp::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverResp.script)
}
inline ::std::string* IMConsultDeliverResp::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverResp.script)
  return script_;
}
inline ::std::string* IMConsultDeliverResp::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverResp::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverResp.script)
}

// optional string manager_name = 10;
inline bool IMConsultDeliverResp::has_manager_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMConsultDeliverResp::set_has_manager_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMConsultDeliverResp::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMConsultDeliverResp::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultDeliverResp::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.manager_name)
  return *manager_name_;
}
inline void IMConsultDeliverResp::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.manager_name)
}
inline void IMConsultDeliverResp::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverResp.manager_name)
}
inline void IMConsultDeliverResp::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverResp.manager_name)
}
inline ::std::string* IMConsultDeliverResp::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverResp.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultDeliverResp::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverResp::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverResp.manager_name)
}

// optional string manager_portrait = 11;
inline bool IMConsultDeliverResp::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IMConsultDeliverResp::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IMConsultDeliverResp::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IMConsultDeliverResp::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultDeliverResp::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultDeliverResp::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.manager_portrait)
}
inline void IMConsultDeliverResp::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverResp.manager_portrait)
}
inline void IMConsultDeliverResp::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverResp.manager_portrait)
}
inline ::std::string* IMConsultDeliverResp::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverResp.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultDeliverResp::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverResp::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverResp.manager_portrait)
}

// optional bytes attach_data = 20;
inline bool IMConsultDeliverResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IMConsultDeliverResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IMConsultDeliverResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IMConsultDeliverResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMConsultDeliverResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverResp.attach_data)
  return *attach_data_;
}
inline void IMConsultDeliverResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverResp.attach_data)
}
inline void IMConsultDeliverResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverResp.attach_data)
}
inline void IMConsultDeliverResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverResp.attach_data)
}
inline ::std::string* IMConsultDeliverResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMConsultDeliverResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverResp.attach_data)
}

// -------------------------------------------------------------------

// IMConsultDeliverAnnounce

// required uint32 old_consult_id = 1;
inline bool IMConsultDeliverAnnounce::has_old_consult_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_old_consult_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMConsultDeliverAnnounce::clear_has_old_consult_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMConsultDeliverAnnounce::clear_old_consult_id() {
  old_consult_id_ = 0u;
  clear_has_old_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::old_consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.old_consult_id)
  return old_consult_id_;
}
inline void IMConsultDeliverAnnounce::set_old_consult_id(::google::protobuf::uint32 value) {
  set_has_old_consult_id();
  old_consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.old_consult_id)
}

// required uint32 new_consult_id = 2;
inline bool IMConsultDeliverAnnounce::has_new_consult_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_new_consult_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMConsultDeliverAnnounce::clear_has_new_consult_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMConsultDeliverAnnounce::clear_new_consult_id() {
  new_consult_id_ = 0u;
  clear_has_new_consult_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::new_consult_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.new_consult_id)
  return new_consult_id_;
}
inline void IMConsultDeliverAnnounce::set_new_consult_id(::google::protobuf::uint32 value) {
  set_has_new_consult_id();
  new_consult_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.new_consult_id)
}

// required uint32 student_id = 3;
inline bool IMConsultDeliverAnnounce::has_student_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_student_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMConsultDeliverAnnounce::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMConsultDeliverAnnounce::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::student_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.student_id)
  return student_id_;
}
inline void IMConsultDeliverAnnounce::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.student_id)
}

// required uint32 duty_id = 4;
inline bool IMConsultDeliverAnnounce::has_duty_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_duty_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMConsultDeliverAnnounce::clear_has_duty_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMConsultDeliverAnnounce::clear_duty_id() {
  duty_id_ = 0u;
  clear_has_duty_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::duty_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.duty_id)
  return duty_id_;
}
inline void IMConsultDeliverAnnounce::set_duty_id(::google::protobuf::uint32 value) {
  set_has_duty_id();
  duty_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.duty_id)
}

// required uint32 manager_id = 5;
inline bool IMConsultDeliverAnnounce::has_manager_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_manager_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMConsultDeliverAnnounce::clear_has_manager_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMConsultDeliverAnnounce::clear_manager_id() {
  manager_id_ = 0u;
  clear_has_manager_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::manager_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.manager_id)
  return manager_id_;
}
inline void IMConsultDeliverAnnounce::set_manager_id(::google::protobuf::uint32 value) {
  set_has_manager_id();
  manager_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.manager_id)
}

// required uint32 order_id = 6;
inline bool IMConsultDeliverAnnounce::has_order_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_order_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMConsultDeliverAnnounce::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMConsultDeliverAnnounce::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::order_id() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.order_id)
  return order_id_;
}
inline void IMConsultDeliverAnnounce::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.order_id)
}

// required uint32 deliver_type = 7;
inline bool IMConsultDeliverAnnounce::has_deliver_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_deliver_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMConsultDeliverAnnounce::clear_has_deliver_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMConsultDeliverAnnounce::clear_deliver_type() {
  deliver_type_ = 0u;
  clear_has_deliver_type();
}
inline ::google::protobuf::uint32 IMConsultDeliverAnnounce::deliver_type() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.deliver_type)
  return deliver_type_;
}
inline void IMConsultDeliverAnnounce::set_deliver_type(::google::protobuf::uint32 value) {
  set_has_deliver_type();
  deliver_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.deliver_type)
}

// optional bytes script = 8;
inline bool IMConsultDeliverAnnounce::has_script() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_script() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMConsultDeliverAnnounce::clear_has_script() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMConsultDeliverAnnounce::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& IMConsultDeliverAnnounce::script() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.script)
  return *script_;
}
inline void IMConsultDeliverAnnounce::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.script)
}
inline void IMConsultDeliverAnnounce::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverAnnounce.script)
}
inline void IMConsultDeliverAnnounce::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverAnnounce.script)
}
inline ::std::string* IMConsultDeliverAnnounce::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverAnnounce.script)
  return script_;
}
inline ::std::string* IMConsultDeliverAnnounce::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverAnnounce::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverAnnounce.script)
}

// repeated .IM.BaseDefine.ConsultMsg consult_msg_list = 9;
inline int IMConsultDeliverAnnounce::consult_msg_list_size() const {
  return consult_msg_list_.size();
}
inline void IMConsultDeliverAnnounce::clear_consult_msg_list() {
  consult_msg_list_.Clear();
}
inline const ::IM::BaseDefine::ConsultMsg& IMConsultDeliverAnnounce::consult_msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.consult_msg_list)
  return consult_msg_list_.Get(index);
}
inline ::IM::BaseDefine::ConsultMsg* IMConsultDeliverAnnounce::mutable_consult_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverAnnounce.consult_msg_list)
  return consult_msg_list_.Mutable(index);
}
inline ::IM::BaseDefine::ConsultMsg* IMConsultDeliverAnnounce::add_consult_msg_list() {
  // @@protoc_insertion_point(field_add:IM.Consult.IMConsultDeliverAnnounce.consult_msg_list)
  return consult_msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ConsultMsg >&
IMConsultDeliverAnnounce::consult_msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Consult.IMConsultDeliverAnnounce.consult_msg_list)
  return consult_msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ConsultMsg >*
IMConsultDeliverAnnounce::mutable_consult_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Consult.IMConsultDeliverAnnounce.consult_msg_list)
  return &consult_msg_list_;
}

// optional string manager_name = 10;
inline bool IMConsultDeliverAnnounce::has_manager_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_manager_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMConsultDeliverAnnounce::clear_has_manager_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMConsultDeliverAnnounce::clear_manager_name() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_->clear();
  }
  clear_has_manager_name();
}
inline const ::std::string& IMConsultDeliverAnnounce::manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.manager_name)
  return *manager_name_;
}
inline void IMConsultDeliverAnnounce::set_manager_name(const ::std::string& value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.manager_name)
}
inline void IMConsultDeliverAnnounce::set_manager_name(const char* value) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverAnnounce.manager_name)
}
inline void IMConsultDeliverAnnounce::set_manager_name(const char* value, size_t size) {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverAnnounce.manager_name)
}
inline ::std::string* IMConsultDeliverAnnounce::mutable_manager_name() {
  set_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverAnnounce.manager_name)
  return manager_name_;
}
inline ::std::string* IMConsultDeliverAnnounce::release_manager_name() {
  clear_has_manager_name();
  if (manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_name_;
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverAnnounce::set_allocated_manager_name(::std::string* manager_name) {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_name) {
    set_has_manager_name();
    manager_name_ = manager_name;
  } else {
    clear_has_manager_name();
    manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverAnnounce.manager_name)
}

// optional string manager_portrait = 11;
inline bool IMConsultDeliverAnnounce::has_manager_portrait() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IMConsultDeliverAnnounce::set_has_manager_portrait() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IMConsultDeliverAnnounce::clear_has_manager_portrait() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IMConsultDeliverAnnounce::clear_manager_portrait() {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_->clear();
  }
  clear_has_manager_portrait();
}
inline const ::std::string& IMConsultDeliverAnnounce::manager_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
  return *manager_portrait_;
}
inline void IMConsultDeliverAnnounce::set_manager_portrait(const ::std::string& value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
}
inline void IMConsultDeliverAnnounce::set_manager_portrait(const char* value) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
}
inline void IMConsultDeliverAnnounce::set_manager_portrait(const char* value, size_t size) {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  manager_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
}
inline ::std::string* IMConsultDeliverAnnounce::mutable_manager_portrait() {
  set_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manager_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
  return manager_portrait_;
}
inline ::std::string* IMConsultDeliverAnnounce::release_manager_portrait() {
  clear_has_manager_portrait();
  if (manager_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manager_portrait_;
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMConsultDeliverAnnounce::set_allocated_manager_portrait(::std::string* manager_portrait) {
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (manager_portrait) {
    set_has_manager_portrait();
    manager_portrait_ = manager_portrait;
  } else {
    clear_has_manager_portrait();
    manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Consult.IMConsultDeliverAnnounce.manager_portrait)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Consult
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eConsult_2eproto__INCLUDED
