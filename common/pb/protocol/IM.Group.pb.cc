// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

void protobuf_ShutdownFile_IM_2eGroup_2eproto() {
  delete IMNormalGroupListReq::default_instance_;
  delete IMNormalGroupListRsp::default_instance_;
  delete IMGroupInfoListReq::default_instance_;
  delete IMGroupInfoListRsp::default_instance_;
  delete IMGroupCreateReq::default_instance_;
  delete IMGroupCreateRsp::default_instance_;
  delete IMGroupChangeMemberReq::default_instance_;
  delete IMGroupChangeMemberRsp::default_instance_;
  delete IMGroupShieldReq::default_instance_;
  delete IMGroupShieldRsp::default_instance_;
  delete IMGroupDescpReq::default_instance_;
  delete IMGroupDescpResp::default_instance_;
  delete IMGroupMemberShieldReq::default_instance_;
  delete IMGroupMemberShieldResp::default_instance_;
  delete IMGroupMsgDataRevokeReq::default_instance_;
  delete IMGroupMsgDataRevokeResp::default_instance_;
  delete IMGroupChangeMemberNotify::default_instance_;
  delete IMGroupSetAnnounceReq::default_instance_;
  delete IMGroupSetAnnounceResp::default_instance_;
  delete IMGroupGetAnnounceReq::default_instance_;
  delete IMGroupGetAnnounceResp::default_instance_;
  delete IMGroupRemoveAnnounceReq::default_instance_;
  delete IMGroupRemoveAnnounceResp::default_instance_;
  delete IMGroupManagementModifyReq::default_instance_;
  delete IMGroupManagementModifyResp::default_instance_;
  delete IMGroupAtReq::default_instance_;
  delete IMGroupAtResp::default_instance_;
  delete IMGroupMemberInviteReq::default_instance_;
  delete IMGroupMemberInviteResp::default_instance_;
  delete IMGroupMemberKickReq::default_instance_;
  delete IMGroupMemberKickResp::default_instance_;
  delete IMGroupMemberApplyReq::default_instance_;
  delete IMGroupMemberApplyResp::default_instance_;
  delete IMGroupMemberReviewReq::default_instance_;
  delete IMGroupMemberReviewResp::default_instance_;
  delete IMGroupMemberQuitReq::default_instance_;
  delete IMGroupMemberQuitResp::default_instance_;
  delete IMGroupMemberDismissReq::default_instance_;
  delete IMGroupMemberDismissResp::default_instance_;
  delete IMGroupInfoModifyReq::default_instance_;
  delete IMGroupInfoModifyResp::default_instance_;
  delete IMGroupForbiddenReq::default_instance_;
  delete IMGroupForbiddenResp::default_instance_;
  delete IMGroupSetMemberIdentityReq::default_instance_;
  delete IMGroupSetMemberIdentityResp::default_instance_;
  delete IMGroupMemberInfoUpdateReq::default_instance_;
  delete IMGroupMemberInfoUpdateResp::default_instance_;
  delete IMGroupMemberForbiddenReq::default_instance_;
  delete IMGroupMemberForbiddenResp::default_instance_;
  delete IMGroupBaseInfoAlterNotify::default_instance_;
  delete IMGroupMemberListAlterNotify::default_instance_;
  delete IMMemberBaseInfoAlterNotify::default_instance_;
  delete IMGroupMemberIdentityAlterNotify::default_instance_;
  delete IMGroupSetAnnounceAlterNotify::default_instance_;
  delete IMGroupManagementModifyAlterNotify::default_instance_;
  delete IMGroupAtAlterNotify::default_instance_;
  delete IMGroupRemoveAnnounceAlterNotify::default_instance_;
  delete IMGroupMemberInfoReq::default_instance_;
  delete IMGroupMemberInfoResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eGroup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMNormalGroupListReq::default_instance_ = new IMNormalGroupListReq();
  IMNormalGroupListRsp::default_instance_ = new IMNormalGroupListRsp();
  IMGroupInfoListReq::default_instance_ = new IMGroupInfoListReq();
  IMGroupInfoListRsp::default_instance_ = new IMGroupInfoListRsp();
  IMGroupCreateReq::default_instance_ = new IMGroupCreateReq();
  IMGroupCreateRsp::default_instance_ = new IMGroupCreateRsp();
  IMGroupChangeMemberReq::default_instance_ = new IMGroupChangeMemberReq();
  IMGroupChangeMemberRsp::default_instance_ = new IMGroupChangeMemberRsp();
  IMGroupShieldReq::default_instance_ = new IMGroupShieldReq();
  IMGroupShieldRsp::default_instance_ = new IMGroupShieldRsp();
  IMGroupDescpReq::default_instance_ = new IMGroupDescpReq();
  IMGroupDescpResp::default_instance_ = new IMGroupDescpResp();
  IMGroupMemberShieldReq::default_instance_ = new IMGroupMemberShieldReq();
  IMGroupMemberShieldResp::default_instance_ = new IMGroupMemberShieldResp();
  IMGroupMsgDataRevokeReq::default_instance_ = new IMGroupMsgDataRevokeReq();
  IMGroupMsgDataRevokeResp::default_instance_ = new IMGroupMsgDataRevokeResp();
  IMGroupChangeMemberNotify::default_instance_ = new IMGroupChangeMemberNotify();
  IMGroupSetAnnounceReq::default_instance_ = new IMGroupSetAnnounceReq();
  IMGroupSetAnnounceResp::default_instance_ = new IMGroupSetAnnounceResp();
  IMGroupGetAnnounceReq::default_instance_ = new IMGroupGetAnnounceReq();
  IMGroupGetAnnounceResp::default_instance_ = new IMGroupGetAnnounceResp();
  IMGroupRemoveAnnounceReq::default_instance_ = new IMGroupRemoveAnnounceReq();
  IMGroupRemoveAnnounceResp::default_instance_ = new IMGroupRemoveAnnounceResp();
  IMGroupManagementModifyReq::default_instance_ = new IMGroupManagementModifyReq();
  IMGroupManagementModifyResp::default_instance_ = new IMGroupManagementModifyResp();
  IMGroupAtReq::default_instance_ = new IMGroupAtReq();
  IMGroupAtResp::default_instance_ = new IMGroupAtResp();
  IMGroupMemberInviteReq::default_instance_ = new IMGroupMemberInviteReq();
  IMGroupMemberInviteResp::default_instance_ = new IMGroupMemberInviteResp();
  IMGroupMemberKickReq::default_instance_ = new IMGroupMemberKickReq();
  IMGroupMemberKickResp::default_instance_ = new IMGroupMemberKickResp();
  IMGroupMemberApplyReq::default_instance_ = new IMGroupMemberApplyReq();
  IMGroupMemberApplyResp::default_instance_ = new IMGroupMemberApplyResp();
  IMGroupMemberReviewReq::default_instance_ = new IMGroupMemberReviewReq();
  IMGroupMemberReviewResp::default_instance_ = new IMGroupMemberReviewResp();
  IMGroupMemberQuitReq::default_instance_ = new IMGroupMemberQuitReq();
  IMGroupMemberQuitResp::default_instance_ = new IMGroupMemberQuitResp();
  IMGroupMemberDismissReq::default_instance_ = new IMGroupMemberDismissReq();
  IMGroupMemberDismissResp::default_instance_ = new IMGroupMemberDismissResp();
  IMGroupInfoModifyReq::default_instance_ = new IMGroupInfoModifyReq();
  IMGroupInfoModifyResp::default_instance_ = new IMGroupInfoModifyResp();
  IMGroupForbiddenReq::default_instance_ = new IMGroupForbiddenReq();
  IMGroupForbiddenResp::default_instance_ = new IMGroupForbiddenResp();
  IMGroupSetMemberIdentityReq::default_instance_ = new IMGroupSetMemberIdentityReq();
  IMGroupSetMemberIdentityResp::default_instance_ = new IMGroupSetMemberIdentityResp();
  IMGroupMemberInfoUpdateReq::default_instance_ = new IMGroupMemberInfoUpdateReq();
  IMGroupMemberInfoUpdateResp::default_instance_ = new IMGroupMemberInfoUpdateResp();
  IMGroupMemberForbiddenReq::default_instance_ = new IMGroupMemberForbiddenReq();
  IMGroupMemberForbiddenResp::default_instance_ = new IMGroupMemberForbiddenResp();
  IMGroupBaseInfoAlterNotify::default_instance_ = new IMGroupBaseInfoAlterNotify();
  IMGroupMemberListAlterNotify::default_instance_ = new IMGroupMemberListAlterNotify();
  IMMemberBaseInfoAlterNotify::default_instance_ = new IMMemberBaseInfoAlterNotify();
  IMGroupMemberIdentityAlterNotify::default_instance_ = new IMGroupMemberIdentityAlterNotify();
  IMGroupSetAnnounceAlterNotify::default_instance_ = new IMGroupSetAnnounceAlterNotify();
  IMGroupManagementModifyAlterNotify::default_instance_ = new IMGroupManagementModifyAlterNotify();
  IMGroupAtAlterNotify::default_instance_ = new IMGroupAtAlterNotify();
  IMGroupRemoveAnnounceAlterNotify::default_instance_ = new IMGroupRemoveAnnounceAlterNotify();
  IMGroupMemberInfoReq::default_instance_ = new IMGroupMemberInfoReq();
  IMGroupMemberInfoResp::default_instance_ = new IMGroupMemberInfoResp();
  IMNormalGroupListReq::default_instance_->InitAsDefaultInstance();
  IMNormalGroupListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoListRsp::default_instance_->InitAsDefaultInstance();
  IMGroupCreateReq::default_instance_->InitAsDefaultInstance();
  IMGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberReq::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberRsp::default_instance_->InitAsDefaultInstance();
  IMGroupShieldReq::default_instance_->InitAsDefaultInstance();
  IMGroupShieldRsp::default_instance_->InitAsDefaultInstance();
  IMGroupDescpReq::default_instance_->InitAsDefaultInstance();
  IMGroupDescpResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberShieldReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberShieldResp::default_instance_->InitAsDefaultInstance();
  IMGroupMsgDataRevokeReq::default_instance_->InitAsDefaultInstance();
  IMGroupMsgDataRevokeResp::default_instance_->InitAsDefaultInstance();
  IMGroupChangeMemberNotify::default_instance_->InitAsDefaultInstance();
  IMGroupSetAnnounceReq::default_instance_->InitAsDefaultInstance();
  IMGroupSetAnnounceResp::default_instance_->InitAsDefaultInstance();
  IMGroupGetAnnounceReq::default_instance_->InitAsDefaultInstance();
  IMGroupGetAnnounceResp::default_instance_->InitAsDefaultInstance();
  IMGroupRemoveAnnounceReq::default_instance_->InitAsDefaultInstance();
  IMGroupRemoveAnnounceResp::default_instance_->InitAsDefaultInstance();
  IMGroupManagementModifyReq::default_instance_->InitAsDefaultInstance();
  IMGroupManagementModifyResp::default_instance_->InitAsDefaultInstance();
  IMGroupAtReq::default_instance_->InitAsDefaultInstance();
  IMGroupAtResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInviteReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInviteResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberKickReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberKickResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberApplyReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberApplyResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberReviewReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberReviewResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberQuitReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberQuitResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberDismissReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberDismissResp::default_instance_->InitAsDefaultInstance();
  IMGroupInfoModifyReq::default_instance_->InitAsDefaultInstance();
  IMGroupInfoModifyResp::default_instance_->InitAsDefaultInstance();
  IMGroupForbiddenReq::default_instance_->InitAsDefaultInstance();
  IMGroupForbiddenResp::default_instance_->InitAsDefaultInstance();
  IMGroupSetMemberIdentityReq::default_instance_->InitAsDefaultInstance();
  IMGroupSetMemberIdentityResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInfoUpdateReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInfoUpdateResp::default_instance_->InitAsDefaultInstance();
  IMGroupMemberForbiddenReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberForbiddenResp::default_instance_->InitAsDefaultInstance();
  IMGroupBaseInfoAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupMemberListAlterNotify::default_instance_->InitAsDefaultInstance();
  IMMemberBaseInfoAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupMemberIdentityAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupSetAnnounceAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupManagementModifyAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupAtAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupRemoveAnnounceAlterNotify::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInfoReq::default_instance_->InitAsDefaultInstance();
  IMGroupMemberInfoResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eGroup_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eGroup_2eproto_once_);
void protobuf_AddDesc_IM_2eGroup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eGroup_2eproto_once_,
                 &protobuf_AddDesc_IM_2eGroup_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eGroup_2eproto {
  StaticDescriptorInitializer_IM_2eGroup_2eproto() {
    protobuf_AddDesc_IM_2eGroup_2eproto();
  }
} static_descriptor_initializer_IM_2eGroup_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMNormalGroupListReq::kUserIdFieldNumber;
const int IMNormalGroupListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMNormalGroupListReq::IMNormalGroupListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::InitAsDefaultInstance() {
}

IMNormalGroupListReq::IMNormalGroupListReq(const IMNormalGroupListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListReq)
}

void IMNormalGroupListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListReq::~IMNormalGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListReq)
  SharedDtor();
}

void IMNormalGroupListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListReq& IMNormalGroupListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListReq* IMNormalGroupListReq::default_instance_ = NULL;

IMNormalGroupListReq* IMNormalGroupListReq::New() const {
  return new IMNormalGroupListReq;
}

void IMNormalGroupListReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMNormalGroupListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListReq)
  return false;
#undef DO_
}

void IMNormalGroupListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListReq)
}

int IMNormalGroupListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListReq*>(&from));
}

void IMNormalGroupListReq::MergeFrom(const IMNormalGroupListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMNormalGroupListReq::CopyFrom(const IMNormalGroupListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMNormalGroupListReq::Swap(IMNormalGroupListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMNormalGroupListReq::GetTypeName() const {
  return "IM.Group.IMNormalGroupListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMNormalGroupListRsp::kUserIdFieldNumber;
const int IMNormalGroupListRsp::kGroupVersionListFieldNumber;
const int IMNormalGroupListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMNormalGroupListRsp::IMNormalGroupListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::InitAsDefaultInstance() {
}

IMNormalGroupListRsp::IMNormalGroupListRsp(const IMNormalGroupListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListRsp)
}

void IMNormalGroupListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMNormalGroupListRsp::~IMNormalGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListRsp)
  SharedDtor();
}

void IMNormalGroupListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMNormalGroupListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMNormalGroupListRsp& IMNormalGroupListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMNormalGroupListRsp* IMNormalGroupListRsp::default_instance_ = NULL;

IMNormalGroupListRsp* IMNormalGroupListRsp::New() const {
  return new IMNormalGroupListRsp;
}

void IMNormalGroupListRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMNormalGroupListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMNormalGroupListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMNormalGroupListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMNormalGroupListRsp)
  return false;
#undef DO_
}

void IMNormalGroupListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMNormalGroupListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (int i = 0; i < this->group_version_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMNormalGroupListRsp)
}

int IMNormalGroupListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMNormalGroupListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMNormalGroupListRsp*>(&from));
}

void IMNormalGroupListRsp::MergeFrom(const IMNormalGroupListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMNormalGroupListRsp::CopyFrom(const IMNormalGroupListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMNormalGroupListRsp::Swap(IMNormalGroupListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_version_list_.Swap(&other->group_version_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMNormalGroupListRsp::GetTypeName() const {
  return "IM.Group.IMNormalGroupListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoListReq::kUserIdFieldNumber;
const int IMGroupInfoListReq::kGroupVersionListFieldNumber;
const int IMGroupInfoListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoListReq::IMGroupInfoListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::InitAsDefaultInstance() {
}

IMGroupInfoListReq::IMGroupInfoListReq(const IMGroupInfoListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListReq)
}

void IMGroupInfoListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListReq::~IMGroupInfoListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListReq)
  SharedDtor();
}

void IMGroupInfoListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListReq& IMGroupInfoListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListReq* IMGroupInfoListReq::default_instance_ = NULL;

IMGroupInfoListReq* IMGroupInfoListReq::New() const {
  return new IMGroupInfoListReq;
}

void IMGroupInfoListReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_version_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_version_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_version_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_version_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListReq)
  return false;
#undef DO_
}

void IMGroupInfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (int i = 0; i < this->group_version_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_version_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListReq)
}

int IMGroupInfoListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1 * this->group_version_list_size();
  for (int i = 0; i < this->group_version_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_version_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListReq*>(&from));
}

void IMGroupInfoListReq::MergeFrom(const IMGroupInfoListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoListReq::CopyFrom(const IMGroupInfoListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_version_list())) return false;
  return true;
}

void IMGroupInfoListReq::Swap(IMGroupInfoListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_version_list_.Swap(&other->group_version_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoListReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoListRsp::kUserIdFieldNumber;
const int IMGroupInfoListRsp::kGroupInfoListFieldNumber;
const int IMGroupInfoListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoListRsp::IMGroupInfoListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::InitAsDefaultInstance() {
}

IMGroupInfoListRsp::IMGroupInfoListRsp(const IMGroupInfoListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListRsp)
}

void IMGroupInfoListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoListRsp::~IMGroupInfoListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListRsp)
  SharedDtor();
}

void IMGroupInfoListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoListRsp& IMGroupInfoListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoListRsp* IMGroupInfoListRsp::default_instance_ = NULL;

IMGroupInfoListRsp* IMGroupInfoListRsp::New() const {
  return new IMGroupInfoListRsp;
}

void IMGroupInfoListRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  group_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_info_list;
        break;
      }

      // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_group_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoListRsp)
  return false;
#undef DO_
}

void IMGroupInfoListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  for (int i = 0; i < this->group_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoListRsp)
}

int IMGroupInfoListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  total_size += 1 * this->group_info_list_size();
  for (int i = 0; i < this->group_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoListRsp*>(&from));
}

void IMGroupInfoListRsp::MergeFrom(const IMGroupInfoListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoListRsp::CopyFrom(const IMGroupInfoListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->group_info_list())) return false;
  return true;
}

void IMGroupInfoListRsp::Swap(IMGroupInfoListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    group_info_list_.Swap(&other->group_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoListRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateReq::kUserIdFieldNumber;
const int IMGroupCreateReq::kGroupTypeFieldNumber;
const int IMGroupCreateReq::kGroupNameFieldNumber;
const int IMGroupCreateReq::kGroupAvatarFieldNumber;
const int IMGroupCreateReq::kMemberIdListFieldNumber;
const int IMGroupCreateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateReq::IMGroupCreateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::InitAsDefaultInstance() {
}

IMGroupCreateReq::IMGroupCreateReq(const IMGroupCreateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateReq)
}

void IMGroupCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_type_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateReq::~IMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateReq)
  SharedDtor();
}

void IMGroupCreateReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateReq& IMGroupCreateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateReq* IMGroupCreateReq::default_instance_ = NULL;

IMGroupCreateReq* IMGroupCreateReq::New() const {
  return new IMGroupCreateReq;
}

void IMGroupCreateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupCreateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(user_id_, group_type_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_avatar_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 2;
      case 2: {
        if (tag == 16) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateReq)
  return false;
#undef DO_
}

void IMGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group_type(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required string group_avatar = 4;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_avatar(), output);
  }

  // repeated uint32 member_id_list = 5;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateReq)
}

int IMGroupCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 4;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateReq*>(&from));
}

void IMGroupCreateReq::MergeFrom(const IMGroupCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateReq::CopyFrom(const IMGroupCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupCreateReq::Swap(IMGroupCreateReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateReq::GetTypeName() const {
  return "IM.Group.IMGroupCreateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupCreateRsp::kUserIdFieldNumber;
const int IMGroupCreateRsp::kResultCodeFieldNumber;
const int IMGroupCreateRsp::kGroupIdFieldNumber;
const int IMGroupCreateRsp::kGroupNameFieldNumber;
const int IMGroupCreateRsp::kUserIdListFieldNumber;
const int IMGroupCreateRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupCreateRsp::IMGroupCreateRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::InitAsDefaultInstance() {
}

IMGroupCreateRsp::IMGroupCreateRsp(const IMGroupCreateRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateRsp)
}

void IMGroupCreateRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupCreateRsp::~IMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateRsp)
  SharedDtor();
}

void IMGroupCreateRsp::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupCreateRsp& IMGroupCreateRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupCreateRsp* IMGroupCreateRsp::default_instance_ = NULL;

IMGroupCreateRsp* IMGroupCreateRsp::New() const {
  return new IMGroupCreateRsp;
}

void IMGroupCreateRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupCreateRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(user_id_, result_code_);
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupCreateRsp)
  return false;
#undef DO_
}

void IMGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupCreateRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // repeated uint32 user_id_list = 5;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupCreateRsp)
}

int IMGroupCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupCreateRsp*>(&from));
}

void IMGroupCreateRsp::MergeFrom(const IMGroupCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupCreateRsp::CopyFrom(const IMGroupCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void IMGroupCreateRsp::Swap(IMGroupCreateRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupCreateRsp::GetTypeName() const {
  return "IM.Group.IMGroupCreateRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberReq::kUserIdFieldNumber;
const int IMGroupChangeMemberReq::kChangeTypeFieldNumber;
const int IMGroupChangeMemberReq::kGroupIdFieldNumber;
const int IMGroupChangeMemberReq::kMemberIdListFieldNumber;
const int IMGroupChangeMemberReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberReq::IMGroupChangeMemberReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::InitAsDefaultInstance() {
}

IMGroupChangeMemberReq::IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberReq)
}

void IMGroupChangeMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberReq::~IMGroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberReq)
  SharedDtor();
}

void IMGroupChangeMemberReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberReq& IMGroupChangeMemberReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberReq* IMGroupChangeMemberReq::default_instance_ = NULL;

IMGroupChangeMemberReq* IMGroupChangeMemberReq::New() const {
  return new IMGroupChangeMemberReq;
}

void IMGroupChangeMemberReq::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  member_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        break;
      }

      // repeated uint32 member_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_member_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberReq)
  return false;
#undef DO_
}

void IMGroupChangeMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 member_id_list = 4;
  for (int i = 0; i < this->member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->member_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberReq)
}

int IMGroupChangeMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id_list(i));
    }
    total_size += 1 * this->member_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberReq*>(&from));
}

void IMGroupChangeMemberReq::MergeFrom(const IMGroupChangeMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberReq::CopyFrom(const IMGroupChangeMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberReq::Swap(IMGroupChangeMemberReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(group_id_, other->group_id_);
    member_id_list_.Swap(&other->member_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberReq::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberRsp::kUserIdFieldNumber;
const int IMGroupChangeMemberRsp::kChangeTypeFieldNumber;
const int IMGroupChangeMemberRsp::kResultCodeFieldNumber;
const int IMGroupChangeMemberRsp::kGroupIdFieldNumber;
const int IMGroupChangeMemberRsp::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kChgUserIdListFieldNumber;
const int IMGroupChangeMemberRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::InitAsDefaultInstance() {
}

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberRsp)
}

void IMGroupChangeMemberRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  result_code_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberRsp::~IMGroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberRsp)
  SharedDtor();
}

void IMGroupChangeMemberRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberRsp& IMGroupChangeMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::default_instance_ = NULL;

IMGroupChangeMemberRsp* IMGroupChangeMemberRsp::New() const {
  return new IMGroupChangeMemberRsp;
}

void IMGroupChangeMemberRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupChangeMemberRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(result_code_, group_id_);
    user_id_ = 0u;
    change_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_cur_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_user_id_list;
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 6;
      case 6: {
        if (tag == 48) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_chg_user_id_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_chg_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberRsp)
  return false;
#undef DO_
}

void IMGroupChangeMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 5;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 6;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->chg_user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberRsp)
}

int IMGroupChangeMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 cur_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberRsp*>(&from));
}

void IMGroupChangeMemberRsp::MergeFrom(const IMGroupChangeMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberRsp::CopyFrom(const IMGroupChangeMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupChangeMemberRsp::Swap(IMGroupChangeMemberRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(result_code_, other->result_code_);
    std::swap(group_id_, other->group_id_);
    cur_user_id_list_.Swap(&other->cur_user_id_list_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberRsp::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupShieldReq::kUserIdFieldNumber;
const int IMGroupShieldReq::kGroupIdFieldNumber;
const int IMGroupShieldReq::kShieldStatusFieldNumber;
const int IMGroupShieldReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupShieldReq::IMGroupShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::InitAsDefaultInstance() {
}

IMGroupShieldReq::IMGroupShieldReq(const IMGroupShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldReq)
}

void IMGroupShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  shield_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldReq::~IMGroupShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldReq)
  SharedDtor();
}

void IMGroupShieldReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldReq& IMGroupShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldReq* IMGroupShieldReq::default_instance_ = NULL;

IMGroupShieldReq* IMGroupShieldReq::New() const {
  return new IMGroupShieldReq;
}

void IMGroupShieldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupShieldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    shield_status_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shield_status;
        break;
      }

      // required uint32 shield_status = 3;
      case 3: {
        if (tag == 24) {
         parse_shield_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
          set_has_shield_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldReq)
  return false;
#undef DO_
}

void IMGroupShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 shield_status = 3;
  if (has_shield_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldReq)
}

int IMGroupShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 shield_status = 3;
    if (has_shield_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldReq*>(&from));
}

void IMGroupShieldReq::MergeFrom(const IMGroupShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_shield_status()) {
      set_shield_status(from.shield_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupShieldReq::CopyFrom(const IMGroupShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldReq::Swap(IMGroupShieldReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(shield_status_, other->shield_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupShieldReq::GetTypeName() const {
  return "IM.Group.IMGroupShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupShieldRsp::kUserIdFieldNumber;
const int IMGroupShieldRsp::kGroupIdFieldNumber;
const int IMGroupShieldRsp::kResultCodeFieldNumber;
const int IMGroupShieldRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupShieldRsp::IMGroupShieldRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::InitAsDefaultInstance() {
}

IMGroupShieldRsp::IMGroupShieldRsp(const IMGroupShieldRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldRsp)
}

void IMGroupShieldRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupShieldRsp::~IMGroupShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldRsp)
  SharedDtor();
}

void IMGroupShieldRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupShieldRsp& IMGroupShieldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupShieldRsp* IMGroupShieldRsp::default_instance_ = NULL;

IMGroupShieldRsp* IMGroupShieldRsp::New() const {
  return new IMGroupShieldRsp;
}

void IMGroupShieldRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupShieldRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, group_id_);
    result_code_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupShieldRsp)
  return false;
#undef DO_
}

void IMGroupShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupShieldRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupShieldRsp)
}

int IMGroupShieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupShieldRsp*>(&from));
}

void IMGroupShieldRsp::MergeFrom(const IMGroupShieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupShieldRsp::CopyFrom(const IMGroupShieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupShieldRsp::Swap(IMGroupShieldRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupShieldRsp::GetTypeName() const {
  return "IM.Group.IMGroupShieldRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDescpReq::kCreatorIdFieldNumber;
const int IMGroupDescpReq::kGroupIdFieldNumber;
const int IMGroupDescpReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupDescpReq::IMGroupDescpReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDescpReq)
}

void IMGroupDescpReq::InitAsDefaultInstance() {
}

IMGroupDescpReq::IMGroupDescpReq(const IMGroupDescpReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDescpReq)
}

void IMGroupDescpReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDescpReq::~IMGroupDescpReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDescpReq)
  SharedDtor();
}

void IMGroupDescpReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDescpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDescpReq& IMGroupDescpReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDescpReq* IMGroupDescpReq::default_instance_ = NULL;

IMGroupDescpReq* IMGroupDescpReq::New() const {
  return new IMGroupDescpReq;
}

void IMGroupDescpReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDescpReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(creator_id_, group_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDescpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDescpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDescpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDescpReq)
  return false;
#undef DO_
}

void IMGroupDescpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDescpReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDescpReq)
}

int IMGroupDescpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDescpReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDescpReq*>(&from));
}

void IMGroupDescpReq::MergeFrom(const IMGroupDescpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDescpReq::CopyFrom(const IMGroupDescpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDescpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupDescpReq::Swap(IMGroupDescpReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDescpReq::GetTypeName() const {
  return "IM.Group.IMGroupDescpReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupDescpResp::kCreatorIdFieldNumber;
const int IMGroupDescpResp::kGroupIdFieldNumber;
const int IMGroupDescpResp::kGroupDescrpFieldNumber;
const int IMGroupDescpResp::kResultCodeFieldNumber;
const int IMGroupDescpResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupDescpResp::IMGroupDescpResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupDescpResp)
}

void IMGroupDescpResp::InitAsDefaultInstance() {
}

IMGroupDescpResp::IMGroupDescpResp(const IMGroupDescpResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupDescpResp)
}

void IMGroupDescpResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupDescpResp::~IMGroupDescpResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupDescpResp)
  SharedDtor();
}

void IMGroupDescpResp::SharedDtor() {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupDescpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupDescpResp& IMGroupDescpResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupDescpResp* IMGroupDescpResp::default_instance_ = NULL;

IMGroupDescpResp* IMGroupDescpResp::New() const {
  return new IMGroupDescpResp;
}

void IMGroupDescpResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupDescpResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(creator_id_, group_id_);
    if (has_group_descrp()) {
      if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_descrp_->clear();
      }
    }
    result_code_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupDescpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupDescpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_descrp;
        break;
      }

      // optional string group_descrp = 3;
      case 3: {
        if (tag == 26) {
         parse_group_descrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_descrp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupDescpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupDescpResp)
  return false;
#undef DO_
}

void IMGroupDescpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupDescpResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional string group_descrp = 3;
  if (has_group_descrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_descrp(), output);
  }

  // required uint32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupDescpResp)
}

int IMGroupDescpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional string group_descrp = 3;
    if (has_group_descrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_descrp());
    }

    // required uint32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupDescpResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupDescpResp*>(&from));
}

void IMGroupDescpResp::MergeFrom(const IMGroupDescpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_descrp()) {
      set_group_descrp(from.group_descrp());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupDescpResp::CopyFrom(const IMGroupDescpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupDescpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void IMGroupDescpResp::Swap(IMGroupDescpResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_descrp_, other->group_descrp_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupDescpResp::GetTypeName() const {
  return "IM.Group.IMGroupDescpResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberShieldReq::kMemberIdFieldNumber;
const int IMGroupMemberShieldReq::kCreatorIdFieldNumber;
const int IMGroupMemberShieldReq::kGroupIdFieldNumber;
const int IMGroupMemberShieldReq::kMsgIdFieldNumber;
const int IMGroupMemberShieldReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberShieldReq::IMGroupMemberShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberShieldReq)
}

void IMGroupMemberShieldReq::InitAsDefaultInstance() {
}

IMGroupMemberShieldReq::IMGroupMemberShieldReq(const IMGroupMemberShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberShieldReq)
}

void IMGroupMemberShieldReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  creator_id_ = 0u;
  group_id_ = 0u;
  msg_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberShieldReq::~IMGroupMemberShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberShieldReq)
  SharedDtor();
}

void IMGroupMemberShieldReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberShieldReq& IMGroupMemberShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberShieldReq* IMGroupMemberShieldReq::default_instance_ = NULL;

IMGroupMemberShieldReq* IMGroupMemberShieldReq::New() const {
  return new IMGroupMemberShieldReq;
}

void IMGroupMemberShieldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberShieldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(member_id_, msg_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberShieldReq)
  return false;
#undef DO_
}

void IMGroupMemberShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberShieldReq)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->creator_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required uint32 msg_id = 4;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberShieldReq)
}

int IMGroupMemberShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 msg_id = 4;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberShieldReq*>(&from));
}

void IMGroupMemberShieldReq::MergeFrom(const IMGroupMemberShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberShieldReq::CopyFrom(const IMGroupMemberShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupMemberShieldReq::Swap(IMGroupMemberShieldReq* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberShieldReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberShieldResp::kMemberIdFieldNumber;
const int IMGroupMemberShieldResp::kCreatorIdFieldNumber;
const int IMGroupMemberShieldResp::kGroupIdFieldNumber;
const int IMGroupMemberShieldResp::kMsgIdFieldNumber;
const int IMGroupMemberShieldResp::kMemberListFieldNumber;
const int IMGroupMemberShieldResp::kResultCodeFieldNumber;
const int IMGroupMemberShieldResp::kReasonFieldNumber;
const int IMGroupMemberShieldResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberShieldResp::IMGroupMemberShieldResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberShieldResp)
}

void IMGroupMemberShieldResp::InitAsDefaultInstance() {
}

IMGroupMemberShieldResp::IMGroupMemberShieldResp(const IMGroupMemberShieldResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberShieldResp)
}

void IMGroupMemberShieldResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  creator_id_ = 0u;
  group_id_ = 0u;
  msg_id_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberShieldResp::~IMGroupMemberShieldResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberShieldResp)
  SharedDtor();
}

void IMGroupMemberShieldResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberShieldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberShieldResp& IMGroupMemberShieldResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberShieldResp* IMGroupMemberShieldResp::default_instance_ = NULL;

IMGroupMemberShieldResp* IMGroupMemberShieldResp::New() const {
  return new IMGroupMemberShieldResp;
}

void IMGroupMemberShieldResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberShieldResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(member_id_, msg_id_);
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberShieldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberShieldResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberShieldResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberShieldResp)
  return false;
#undef DO_
}

void IMGroupMemberShieldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberShieldResp)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->creator_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required uint32 msg_id = 4;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional string reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberShieldResp)
}

int IMGroupMemberShieldResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 msg_id = 4;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberShieldResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberShieldResp*>(&from));
}

void IMGroupMemberShieldResp::MergeFrom(const IMGroupMemberShieldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberShieldResp::CopyFrom(const IMGroupMemberShieldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberShieldResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void IMGroupMemberShieldResp::Swap(IMGroupMemberShieldResp* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_id_, other->msg_id_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberShieldResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberShieldResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMsgDataRevokeReq::kUserIdFieldNumber;
const int IMGroupMsgDataRevokeReq::kGroupIdFieldNumber;
const int IMGroupMsgDataRevokeReq::kMsgIdFieldNumber;
const int IMGroupMsgDataRevokeReq::kReasonFieldNumber;
const int IMGroupMsgDataRevokeReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMsgDataRevokeReq::IMGroupMsgDataRevokeReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMsgDataRevokeReq)
}

void IMGroupMsgDataRevokeReq::InitAsDefaultInstance() {
}

IMGroupMsgDataRevokeReq::IMGroupMsgDataRevokeReq(const IMGroupMsgDataRevokeReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMsgDataRevokeReq)
}

void IMGroupMsgDataRevokeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  msg_id_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMsgDataRevokeReq::~IMGroupMsgDataRevokeReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMsgDataRevokeReq)
  SharedDtor();
}

void IMGroupMsgDataRevokeReq::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMsgDataRevokeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMsgDataRevokeReq& IMGroupMsgDataRevokeReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMsgDataRevokeReq* IMGroupMsgDataRevokeReq::default_instance_ = NULL;

IMGroupMsgDataRevokeReq* IMGroupMsgDataRevokeReq::New() const {
  return new IMGroupMsgDataRevokeReq;
}

void IMGroupMsgDataRevokeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMsgDataRevokeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, group_id_);
    msg_id_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMsgDataRevokeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMsgDataRevokeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMsgDataRevokeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMsgDataRevokeReq)
  return false;
#undef DO_
}

void IMGroupMsgDataRevokeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMsgDataRevokeReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMsgDataRevokeReq)
}

int IMGroupMsgDataRevokeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMsgDataRevokeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMsgDataRevokeReq*>(&from));
}

void IMGroupMsgDataRevokeReq::MergeFrom(const IMGroupMsgDataRevokeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMsgDataRevokeReq::CopyFrom(const IMGroupMsgDataRevokeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMsgDataRevokeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupMsgDataRevokeReq::Swap(IMGroupMsgDataRevokeReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMsgDataRevokeReq::GetTypeName() const {
  return "IM.Group.IMGroupMsgDataRevokeReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMsgDataRevokeResp::kUserIdFieldNumber;
const int IMGroupMsgDataRevokeResp::kGroupIdFieldNumber;
const int IMGroupMsgDataRevokeResp::kMsgIdFieldNumber;
const int IMGroupMsgDataRevokeResp::kResultCodeFieldNumber;
const int IMGroupMsgDataRevokeResp::kMemberListFieldNumber;
const int IMGroupMsgDataRevokeResp::kReasonFieldNumber;
const int IMGroupMsgDataRevokeResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMsgDataRevokeResp::IMGroupMsgDataRevokeResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMsgDataRevokeResp)
}

void IMGroupMsgDataRevokeResp::InitAsDefaultInstance() {
}

IMGroupMsgDataRevokeResp::IMGroupMsgDataRevokeResp(const IMGroupMsgDataRevokeResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMsgDataRevokeResp)
}

void IMGroupMsgDataRevokeResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  msg_id_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMsgDataRevokeResp::~IMGroupMsgDataRevokeResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMsgDataRevokeResp)
  SharedDtor();
}

void IMGroupMsgDataRevokeResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMsgDataRevokeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMsgDataRevokeResp& IMGroupMsgDataRevokeResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMsgDataRevokeResp* IMGroupMsgDataRevokeResp::default_instance_ = NULL;

IMGroupMsgDataRevokeResp* IMGroupMsgDataRevokeResp::New() const {
  return new IMGroupMsgDataRevokeResp;
}

void IMGroupMsgDataRevokeResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMsgDataRevokeResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(user_id_, result_code_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMsgDataRevokeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMsgDataRevokeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (tag == 50) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMsgDataRevokeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMsgDataRevokeResp)
  return false;
#undef DO_
}

void IMGroupMsgDataRevokeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMsgDataRevokeResp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required uint32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_code(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMsgDataRevokeResp)
}

int IMGroupMsgDataRevokeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMsgDataRevokeResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMsgDataRevokeResp*>(&from));
}

void IMGroupMsgDataRevokeResp::MergeFrom(const IMGroupMsgDataRevokeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMsgDataRevokeResp::CopyFrom(const IMGroupMsgDataRevokeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMsgDataRevokeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupMsgDataRevokeResp::Swap(IMGroupMsgDataRevokeResp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(result_code_, other->result_code_);
    member_list_.Swap(&other->member_list_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMsgDataRevokeResp::GetTypeName() const {
  return "IM.Group.IMGroupMsgDataRevokeResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupChangeMemberNotify::kUserIdFieldNumber;
const int IMGroupChangeMemberNotify::kChangeTypeFieldNumber;
const int IMGroupChangeMemberNotify::kGroupIdFieldNumber;
const int IMGroupChangeMemberNotify::kCurUserIdListFieldNumber;
const int IMGroupChangeMemberNotify::kChgUserIdListFieldNumber;
#endif  // !_MSC_VER

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::InitAsDefaultInstance() {
}

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberNotify)
}

void IMGroupChangeMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 1;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupChangeMemberNotify::~IMGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberNotify)
  SharedDtor();
}

void IMGroupChangeMemberNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupChangeMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupChangeMemberNotify& IMGroupChangeMemberNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::default_instance_ = NULL;

IMGroupChangeMemberNotify* IMGroupChangeMemberNotify::New() const {
  return new IMGroupChangeMemberNotify;
}

void IMGroupChangeMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    change_type_ = 1;
    group_id_ = 0u;
  }
  cur_user_id_list_.Clear();
  chg_user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupChangeMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupChangeMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupModifyType_IsValid(value)) {
            set_change_type(static_cast< ::IM::BaseDefine::GroupModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        break;
      }

      // repeated uint32 cur_user_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cur_user_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_user_id_list;
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        break;
      }

      // repeated uint32 chg_user_id_list = 5;
      case 5: {
        if (tag == 40) {
         parse_chg_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_chg_user_id_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chg_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chg_user_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupChangeMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupChangeMemberNotify)
  return false;
#undef DO_
}

void IMGroupChangeMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupChangeMemberNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // repeated uint32 cur_user_id_list = 4;
  for (int i = 0; i < this->cur_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cur_user_id_list(i), output);
  }

  // repeated uint32 chg_user_id_list = 5;
  for (int i = 0; i < this->chg_user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->chg_user_id_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupChangeMemberNotify)
}

int IMGroupChangeMemberNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated uint32 cur_user_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_user_id_list(i));
    }
    total_size += 1 * this->cur_user_id_list_size() + data_size;
  }

  // repeated uint32 chg_user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chg_user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chg_user_id_list(i));
    }
    total_size += 1 * this->chg_user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupChangeMemberNotify*>(&from));
}

void IMGroupChangeMemberNotify::MergeFrom(const IMGroupChangeMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cur_user_id_list_.MergeFrom(from.cur_user_id_list_);
  chg_user_id_list_.MergeFrom(from.chg_user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupChangeMemberNotify::CopyFrom(const IMGroupChangeMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupChangeMemberNotify::Swap(IMGroupChangeMemberNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(group_id_, other->group_id_);
    cur_user_id_list_.Swap(&other->cur_user_id_list_);
    chg_user_id_list_.Swap(&other->chg_user_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetAnnounceReq::kCreatorIdFieldNumber;
const int IMGroupSetAnnounceReq::kGroupIdFieldNumber;
const int IMGroupSetAnnounceReq::kCreatorNameFieldNumber;
const int IMGroupSetAnnounceReq::kAnnounceFieldNumber;
const int IMGroupSetAnnounceReq::kGroupNameFieldNumber;
const int IMGroupSetAnnounceReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupSetAnnounceReq::IMGroupSetAnnounceReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetAnnounceReq)
}

void IMGroupSetAnnounceReq::InitAsDefaultInstance() {
}

IMGroupSetAnnounceReq::IMGroupSetAnnounceReq(const IMGroupSetAnnounceReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetAnnounceReq)
}

void IMGroupSetAnnounceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetAnnounceReq::~IMGroupSetAnnounceReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetAnnounceReq)
  SharedDtor();
}

void IMGroupSetAnnounceReq::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetAnnounceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetAnnounceReq& IMGroupSetAnnounceReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetAnnounceReq* IMGroupSetAnnounceReq::default_instance_ = NULL;

IMGroupSetAnnounceReq* IMGroupSetAnnounceReq::New() const {
  return new IMGroupSetAnnounceReq;
}

void IMGroupSetAnnounceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetAnnounceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(creator_id_, group_id_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        announce_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetAnnounceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetAnnounceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_announce;
        break;
      }

      // required string announce = 4;
      case 4: {
        if (tag == 34) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_name;
        break;
      }

      // optional string group_name = 5;
      case 5: {
        if (tag == 42) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetAnnounceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetAnnounceReq)
  return false;
#undef DO_
}

void IMGroupSetAnnounceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetAnnounceReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_name(), output);
  }

  // required string announce = 4;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->announce(), output);
  }

  // optional string group_name = 5;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetAnnounceReq)
}

int IMGroupSetAnnounceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required string announce = 4;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announce());
    }

    // optional string group_name = 5;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetAnnounceReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetAnnounceReq*>(&from));
}

void IMGroupSetAnnounceReq::MergeFrom(const IMGroupSetAnnounceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetAnnounceReq::CopyFrom(const IMGroupSetAnnounceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetAnnounceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupSetAnnounceReq::Swap(IMGroupSetAnnounceReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(announce_, other->announce_);
    std::swap(group_name_, other->group_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetAnnounceReq::GetTypeName() const {
  return "IM.Group.IMGroupSetAnnounceReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetAnnounceResp::kCreatorIdFieldNumber;
const int IMGroupSetAnnounceResp::kGroupIdFieldNumber;
const int IMGroupSetAnnounceResp::kCreatorNameFieldNumber;
const int IMGroupSetAnnounceResp::kUpdateTimeFieldNumber;
const int IMGroupSetAnnounceResp::kResultCodeFieldNumber;
const int IMGroupSetAnnounceResp::kMemberListFieldNumber;
const int IMGroupSetAnnounceResp::kGroupNameFieldNumber;
const int IMGroupSetAnnounceResp::kAnnounceFieldNumber;
const int IMGroupSetAnnounceResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupSetAnnounceResp::IMGroupSetAnnounceResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetAnnounceResp)
}

void IMGroupSetAnnounceResp::InitAsDefaultInstance() {
}

IMGroupSetAnnounceResp::IMGroupSetAnnounceResp(const IMGroupSetAnnounceResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetAnnounceResp)
}

void IMGroupSetAnnounceResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  result_code_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetAnnounceResp::~IMGroupSetAnnounceResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetAnnounceResp)
  SharedDtor();
}

void IMGroupSetAnnounceResp::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetAnnounceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetAnnounceResp& IMGroupSetAnnounceResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetAnnounceResp* IMGroupSetAnnounceResp::default_instance_ = NULL;

IMGroupSetAnnounceResp* IMGroupSetAnnounceResp::New() const {
  return new IMGroupSetAnnounceResp;
}

void IMGroupSetAnnounceResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetAnnounceResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(creator_id_, group_id_);
    ZR_(update_time_, result_code_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        announce_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetAnnounceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetAnnounceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 5;
      case 5: {
        if (tag == 40) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 6;
      case 6: {
        if (tag == 48) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_member_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        if (input->ExpectTag(58)) goto parse_group_name;
        break;
      }

      // optional string group_name = 7;
      case 7: {
        if (tag == 58) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_announce;
        break;
      }

      // optional string announce = 8;
      case 8: {
        if (tag == 66) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetAnnounceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetAnnounceResp)
  return false;
#undef DO_
}

void IMGroupSetAnnounceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetAnnounceResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_name(), output);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  // required uint32 result_code = 5;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result_code(), output);
  }

  // repeated uint32 member_list = 6;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->member_list(i), output);
  }

  // optional string group_name = 7;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_name(), output);
  }

  // optional string announce = 8;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->announce(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetAnnounceResp)
}

int IMGroupSetAnnounceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 result_code = 5;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string group_name = 7;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string announce = 8;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetAnnounceResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetAnnounceResp*>(&from));
}

void IMGroupSetAnnounceResp::MergeFrom(const IMGroupSetAnnounceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetAnnounceResp::CopyFrom(const IMGroupSetAnnounceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetAnnounceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupSetAnnounceResp::Swap(IMGroupSetAnnounceResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(update_time_, other->update_time_);
    std::swap(result_code_, other->result_code_);
    member_list_.Swap(&other->member_list_);
    std::swap(group_name_, other->group_name_);
    std::swap(announce_, other->announce_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetAnnounceResp::GetTypeName() const {
  return "IM.Group.IMGroupSetAnnounceResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupGetAnnounceReq::kUserIdFieldNumber;
const int IMGroupGetAnnounceReq::kGroupIdFieldNumber;
const int IMGroupGetAnnounceReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupGetAnnounceReq::IMGroupGetAnnounceReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupGetAnnounceReq)
}

void IMGroupGetAnnounceReq::InitAsDefaultInstance() {
}

IMGroupGetAnnounceReq::IMGroupGetAnnounceReq(const IMGroupGetAnnounceReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupGetAnnounceReq)
}

void IMGroupGetAnnounceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupGetAnnounceReq::~IMGroupGetAnnounceReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupGetAnnounceReq)
  SharedDtor();
}

void IMGroupGetAnnounceReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupGetAnnounceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupGetAnnounceReq& IMGroupGetAnnounceReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupGetAnnounceReq* IMGroupGetAnnounceReq::default_instance_ = NULL;

IMGroupGetAnnounceReq* IMGroupGetAnnounceReq::New() const {
  return new IMGroupGetAnnounceReq;
}

void IMGroupGetAnnounceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupGetAnnounceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, group_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupGetAnnounceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupGetAnnounceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupGetAnnounceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupGetAnnounceReq)
  return false;
#undef DO_
}

void IMGroupGetAnnounceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupGetAnnounceReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupGetAnnounceReq)
}

int IMGroupGetAnnounceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupGetAnnounceReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupGetAnnounceReq*>(&from));
}

void IMGroupGetAnnounceReq::MergeFrom(const IMGroupGetAnnounceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupGetAnnounceReq::CopyFrom(const IMGroupGetAnnounceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetAnnounceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupGetAnnounceReq::Swap(IMGroupGetAnnounceReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupGetAnnounceReq::GetTypeName() const {
  return "IM.Group.IMGroupGetAnnounceReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupGetAnnounceResp::kUserIdFieldNumber;
const int IMGroupGetAnnounceResp::kGroupIdFieldNumber;
const int IMGroupGetAnnounceResp::kAnnounceFieldNumber;
const int IMGroupGetAnnounceResp::kCreatorNameFieldNumber;
const int IMGroupGetAnnounceResp::kUpdateTimeFieldNumber;
const int IMGroupGetAnnounceResp::kResultCodeFieldNumber;
const int IMGroupGetAnnounceResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupGetAnnounceResp::IMGroupGetAnnounceResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupGetAnnounceResp)
}

void IMGroupGetAnnounceResp::InitAsDefaultInstance() {
}

IMGroupGetAnnounceResp::IMGroupGetAnnounceResp(const IMGroupGetAnnounceResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupGetAnnounceResp)
}

void IMGroupGetAnnounceResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupGetAnnounceResp::~IMGroupGetAnnounceResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupGetAnnounceResp)
  SharedDtor();
}

void IMGroupGetAnnounceResp::SharedDtor() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupGetAnnounceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupGetAnnounceResp& IMGroupGetAnnounceResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupGetAnnounceResp* IMGroupGetAnnounceResp::default_instance_ = NULL;

IMGroupGetAnnounceResp* IMGroupGetAnnounceResp::New() const {
  return new IMGroupGetAnnounceResp;
}

void IMGroupGetAnnounceResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupGetAnnounceResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, group_id_);
    ZR_(update_time_, result_code_);
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        announce_->clear();
      }
    }
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupGetAnnounceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupGetAnnounceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_announce;
        break;
      }

      // required string announce = 3;
      case 3: {
        if (tag == 26) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 4;
      case 4: {
        if (tag == 34) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 5;
      case 5: {
        if (tag == 40) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupGetAnnounceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupGetAnnounceResp)
  return false;
#undef DO_
}

void IMGroupGetAnnounceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupGetAnnounceResp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string announce = 3;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->announce(), output);
  }

  // required string creator_name = 4;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator_name(), output);
  }

  // required uint32 update_time = 5;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->update_time(), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupGetAnnounceResp)
}

int IMGroupGetAnnounceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string announce = 3;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announce());
    }

    // required string creator_name = 4;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required uint32 update_time = 5;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupGetAnnounceResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupGetAnnounceResp*>(&from));
}

void IMGroupGetAnnounceResp::MergeFrom(const IMGroupGetAnnounceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupGetAnnounceResp::CopyFrom(const IMGroupGetAnnounceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetAnnounceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMGroupGetAnnounceResp::Swap(IMGroupGetAnnounceResp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(announce_, other->announce_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(update_time_, other->update_time_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupGetAnnounceResp::GetTypeName() const {
  return "IM.Group.IMGroupGetAnnounceResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupRemoveAnnounceReq::kCreatorIdFieldNumber;
const int IMGroupRemoveAnnounceReq::kGroupIdFieldNumber;
const int IMGroupRemoveAnnounceReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupRemoveAnnounceReq::IMGroupRemoveAnnounceReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupRemoveAnnounceReq)
}

void IMGroupRemoveAnnounceReq::InitAsDefaultInstance() {
}

IMGroupRemoveAnnounceReq::IMGroupRemoveAnnounceReq(const IMGroupRemoveAnnounceReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupRemoveAnnounceReq)
}

void IMGroupRemoveAnnounceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupRemoveAnnounceReq::~IMGroupRemoveAnnounceReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupRemoveAnnounceReq)
  SharedDtor();
}

void IMGroupRemoveAnnounceReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupRemoveAnnounceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupRemoveAnnounceReq& IMGroupRemoveAnnounceReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupRemoveAnnounceReq* IMGroupRemoveAnnounceReq::default_instance_ = NULL;

IMGroupRemoveAnnounceReq* IMGroupRemoveAnnounceReq::New() const {
  return new IMGroupRemoveAnnounceReq;
}

void IMGroupRemoveAnnounceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupRemoveAnnounceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(creator_id_, group_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupRemoveAnnounceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupRemoveAnnounceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupRemoveAnnounceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupRemoveAnnounceReq)
  return false;
#undef DO_
}

void IMGroupRemoveAnnounceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupRemoveAnnounceReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupRemoveAnnounceReq)
}

int IMGroupRemoveAnnounceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupRemoveAnnounceReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupRemoveAnnounceReq*>(&from));
}

void IMGroupRemoveAnnounceReq::MergeFrom(const IMGroupRemoveAnnounceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupRemoveAnnounceReq::CopyFrom(const IMGroupRemoveAnnounceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupRemoveAnnounceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupRemoveAnnounceReq::Swap(IMGroupRemoveAnnounceReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupRemoveAnnounceReq::GetTypeName() const {
  return "IM.Group.IMGroupRemoveAnnounceReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupRemoveAnnounceResp::kCreatorIdFieldNumber;
const int IMGroupRemoveAnnounceResp::kGroupIdFieldNumber;
const int IMGroupRemoveAnnounceResp::kUpdateTimeFieldNumber;
const int IMGroupRemoveAnnounceResp::kResultCodeFieldNumber;
const int IMGroupRemoveAnnounceResp::kMemberListFieldNumber;
const int IMGroupRemoveAnnounceResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupRemoveAnnounceResp::IMGroupRemoveAnnounceResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupRemoveAnnounceResp)
}

void IMGroupRemoveAnnounceResp::InitAsDefaultInstance() {
}

IMGroupRemoveAnnounceResp::IMGroupRemoveAnnounceResp(const IMGroupRemoveAnnounceResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupRemoveAnnounceResp)
}

void IMGroupRemoveAnnounceResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  update_time_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupRemoveAnnounceResp::~IMGroupRemoveAnnounceResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupRemoveAnnounceResp)
  SharedDtor();
}

void IMGroupRemoveAnnounceResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupRemoveAnnounceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupRemoveAnnounceResp& IMGroupRemoveAnnounceResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupRemoveAnnounceResp* IMGroupRemoveAnnounceResp::default_instance_ = NULL;

IMGroupRemoveAnnounceResp* IMGroupRemoveAnnounceResp::New() const {
  return new IMGroupRemoveAnnounceResp;
}

void IMGroupRemoveAnnounceResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupRemoveAnnounceResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(creator_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupRemoveAnnounceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupRemoveAnnounceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupRemoveAnnounceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupRemoveAnnounceResp)
  return false;
#undef DO_
}

void IMGroupRemoveAnnounceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupRemoveAnnounceResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  // required uint32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_code(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupRemoveAnnounceResp)
}

int IMGroupRemoveAnnounceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupRemoveAnnounceResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupRemoveAnnounceResp*>(&from));
}

void IMGroupRemoveAnnounceResp::MergeFrom(const IMGroupRemoveAnnounceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupRemoveAnnounceResp::CopyFrom(const IMGroupRemoveAnnounceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupRemoveAnnounceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupRemoveAnnounceResp::Swap(IMGroupRemoveAnnounceResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(result_code_, other->result_code_);
    member_list_.Swap(&other->member_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupRemoveAnnounceResp::GetTypeName() const {
  return "IM.Group.IMGroupRemoveAnnounceResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupManagementModifyReq::kCreatorIdFieldNumber;
const int IMGroupManagementModifyReq::kGroupIdFieldNumber;
const int IMGroupManagementModifyReq::kCreatorNameFieldNumber;
const int IMGroupManagementModifyReq::kPeerIdFieldNumber;
const int IMGroupManagementModifyReq::kGroupNameFieldNumber;
const int IMGroupManagementModifyReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupManagementModifyReq::IMGroupManagementModifyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupManagementModifyReq)
}

void IMGroupManagementModifyReq::InitAsDefaultInstance() {
}

IMGroupManagementModifyReq::IMGroupManagementModifyReq(const IMGroupManagementModifyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupManagementModifyReq)
}

void IMGroupManagementModifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupManagementModifyReq::~IMGroupManagementModifyReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupManagementModifyReq)
  SharedDtor();
}

void IMGroupManagementModifyReq::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupManagementModifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupManagementModifyReq& IMGroupManagementModifyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupManagementModifyReq* IMGroupManagementModifyReq::default_instance_ = NULL;

IMGroupManagementModifyReq* IMGroupManagementModifyReq::New() const {
  return new IMGroupManagementModifyReq;
}

void IMGroupManagementModifyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupManagementModifyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(creator_id_, group_id_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    peer_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupManagementModifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupManagementModifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_peer_id;
        break;
      }

      // required uint32 peer_id = 4;
      case 4: {
        if (tag == 32) {
         parse_peer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_id_)));
          set_has_peer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_name;
        break;
      }

      // required string group_name = 5;
      case 5: {
        if (tag == 42) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupManagementModifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupManagementModifyReq)
  return false;
#undef DO_
}

void IMGroupManagementModifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupManagementModifyReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_name(), output);
  }

  // required uint32 peer_id = 4;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peer_id(), output);
  }

  // required string group_name = 5;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupManagementModifyReq)
}

int IMGroupManagementModifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required uint32 peer_id = 4;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peer_id());
    }

    // required string group_name = 5;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupManagementModifyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupManagementModifyReq*>(&from));
}

void IMGroupManagementModifyReq::MergeFrom(const IMGroupManagementModifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupManagementModifyReq::CopyFrom(const IMGroupManagementModifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupManagementModifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupManagementModifyReq::Swap(IMGroupManagementModifyReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupManagementModifyReq::GetTypeName() const {
  return "IM.Group.IMGroupManagementModifyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupManagementModifyResp::kCreatorIdFieldNumber;
const int IMGroupManagementModifyResp::kGroupIdFieldNumber;
const int IMGroupManagementModifyResp::kCreatorNameFieldNumber;
const int IMGroupManagementModifyResp::kPeerIdFieldNumber;
const int IMGroupManagementModifyResp::kPeerNameFieldNumber;
const int IMGroupManagementModifyResp::kResultCodeFieldNumber;
const int IMGroupManagementModifyResp::kMemberListFieldNumber;
const int IMGroupManagementModifyResp::kGroupNameFieldNumber;
const int IMGroupManagementModifyResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupManagementModifyResp::IMGroupManagementModifyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupManagementModifyResp)
}

void IMGroupManagementModifyResp::InitAsDefaultInstance() {
}

IMGroupManagementModifyResp::IMGroupManagementModifyResp(const IMGroupManagementModifyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupManagementModifyResp)
}

void IMGroupManagementModifyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = 0u;
  peer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupManagementModifyResp::~IMGroupManagementModifyResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupManagementModifyResp)
  SharedDtor();
}

void IMGroupManagementModifyResp::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (peer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupManagementModifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupManagementModifyResp& IMGroupManagementModifyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupManagementModifyResp* IMGroupManagementModifyResp::default_instance_ = NULL;

IMGroupManagementModifyResp* IMGroupManagementModifyResp::New() const {
  return new IMGroupManagementModifyResp;
}

void IMGroupManagementModifyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupManagementModifyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(creator_id_, group_id_);
    ZR_(peer_id_, result_code_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_peer_name()) {
      if (peer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupManagementModifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupManagementModifyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_peer_id;
        break;
      }

      // required uint32 peer_id = 4;
      case 4: {
        if (tag == 32) {
         parse_peer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_id_)));
          set_has_peer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_peer_name;
        break;
      }

      // required string peer_name = 5;
      case 5: {
        if (tag == 42) {
         parse_peer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 7;
      case 7: {
        if (tag == 56) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_member_list())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        if (input->ExpectTag(66)) goto parse_group_name;
        break;
      }

      // required string group_name = 8;
      case 8: {
        if (tag == 66) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupManagementModifyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupManagementModifyResp)
  return false;
#undef DO_
}

void IMGroupManagementModifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupManagementModifyResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creator_name(), output);
  }

  // required uint32 peer_id = 4;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peer_id(), output);
  }

  // required string peer_name = 5;
  if (has_peer_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->peer_name(), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // repeated uint32 member_list = 7;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->member_list(i), output);
  }

  // required string group_name = 8;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->group_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupManagementModifyResp)
}

int IMGroupManagementModifyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required uint32 peer_id = 4;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peer_id());
    }

    // required string peer_name = 5;
    if (has_peer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_name());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string group_name = 8;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupManagementModifyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupManagementModifyResp*>(&from));
}

void IMGroupManagementModifyResp::MergeFrom(const IMGroupManagementModifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
    if (from.has_peer_name()) {
      set_peer_name(from.peer_name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupManagementModifyResp::CopyFrom(const IMGroupManagementModifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupManagementModifyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  return true;
}

void IMGroupManagementModifyResp::Swap(IMGroupManagementModifyResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(peer_name_, other->peer_name_);
    std::swap(result_code_, other->result_code_);
    member_list_.Swap(&other->member_list_);
    std::swap(group_name_, other->group_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupManagementModifyResp::GetTypeName() const {
  return "IM.Group.IMGroupManagementModifyResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupAtReq::kFromUserIdFieldNumber;
const int IMGroupAtReq::kGroupIdFieldNumber;
const int IMGroupAtReq::kPeerIdFieldNumber;
const int IMGroupAtReq::kGroupAtTypeFieldNumber;
const int IMGroupAtReq::kFromUserNameFieldNumber;
const int IMGroupAtReq::kGroupNameFieldNumber;
const int IMGroupAtReq::kMsgIdFieldNumber;
const int IMGroupAtReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupAtReq::IMGroupAtReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupAtReq)
}

void IMGroupAtReq::InitAsDefaultInstance() {
}

IMGroupAtReq::IMGroupAtReq(const IMGroupAtReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupAtReq)
}

void IMGroupAtReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  group_id_ = 0u;
  group_at_type_ = 0u;
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupAtReq::~IMGroupAtReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupAtReq)
  SharedDtor();
}

void IMGroupAtReq::SharedDtor() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupAtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupAtReq& IMGroupAtReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupAtReq* IMGroupAtReq::default_instance_ = NULL;

IMGroupAtReq* IMGroupAtReq::New() const {
  return new IMGroupAtReq;
}

void IMGroupAtReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupAtReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(from_user_id_, group_id_);
    ZR_(group_at_type_, msg_id_);
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_user_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  peer_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupAtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupAtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peer_id;
        break;
      }

      // repeated uint32 peer_id = 3;
      case 3: {
        if (tag == 24) {
         parse_peer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_peer_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_peer_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peer_id;
        if (input->ExpectTag(32)) goto parse_group_at_type;
        break;
      }

      // required uint32 group_at_type = 4;
      case 4: {
        if (tag == 32) {
         parse_group_at_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_at_type_)));
          set_has_group_at_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from_user_name;
        break;
      }

      // required string from_user_name = 5;
      case 5: {
        if (tag == 42) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_name;
        break;
      }

      // optional string group_name = 6;
      case 6: {
        if (tag == 50) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_msg_id;
        break;
      }

      // optional uint32 msg_id = 7;
      case 7: {
        if (tag == 56) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupAtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupAtReq)
  return false;
#undef DO_
}

void IMGroupAtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupAtReq)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 peer_id = 3;
  for (int i = 0; i < this->peer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->peer_id(i), output);
  }

  // required uint32 group_at_type = 4;
  if (has_group_at_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_at_type(), output);
  }

  // required string from_user_name = 5;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_user_name(), output);
  }

  // optional string group_name = 6;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_name(), output);
  }

  // optional uint32 msg_id = 7;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msg_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupAtReq)
}

int IMGroupAtReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 group_at_type = 4;
    if (has_group_at_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_at_type());
    }

    // required string from_user_name = 5;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // optional string group_name = 6;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 msg_id = 7;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 peer_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->peer_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->peer_id(i));
    }
    total_size += 1 * this->peer_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupAtReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupAtReq*>(&from));
}

void IMGroupAtReq::MergeFrom(const IMGroupAtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_id_.MergeFrom(from.peer_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_at_type()) {
      set_group_at_type(from.group_at_type());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupAtReq::CopyFrom(const IMGroupAtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupAtReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void IMGroupAtReq::Swap(IMGroupAtReq* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(group_id_, other->group_id_);
    peer_id_.Swap(&other->peer_id_);
    std::swap(group_at_type_, other->group_at_type_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(group_name_, other->group_name_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupAtReq::GetTypeName() const {
  return "IM.Group.IMGroupAtReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupAtResp::kFromUserIdFieldNumber;
const int IMGroupAtResp::kGroupIdFieldNumber;
const int IMGroupAtResp::kPeerIdFieldNumber;
const int IMGroupAtResp::kGroupAtTypeFieldNumber;
const int IMGroupAtResp::kFromUserNameFieldNumber;
const int IMGroupAtResp::kResultCodeFieldNumber;
const int IMGroupAtResp::kMsgIdFieldNumber;
const int IMGroupAtResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupAtResp::IMGroupAtResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupAtResp)
}

void IMGroupAtResp::InitAsDefaultInstance() {
}

IMGroupAtResp::IMGroupAtResp(const IMGroupAtResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupAtResp)
}

void IMGroupAtResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  group_id_ = 0u;
  group_at_type_ = 0u;
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  msg_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupAtResp::~IMGroupAtResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupAtResp)
  SharedDtor();
}

void IMGroupAtResp::SharedDtor() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupAtResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupAtResp& IMGroupAtResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupAtResp* IMGroupAtResp::default_instance_ = NULL;

IMGroupAtResp* IMGroupAtResp::New() const {
  return new IMGroupAtResp;
}

void IMGroupAtResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupAtResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(from_user_id_, group_id_);
    ZR_(group_at_type_, result_code_);
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_user_name_->clear();
      }
    }
    msg_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  peer_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupAtResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupAtResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peer_id;
        break;
      }

      // repeated uint32 peer_id = 3;
      case 3: {
        if (tag == 24) {
         parse_peer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_peer_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_peer_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peer_id;
        if (input->ExpectTag(32)) goto parse_group_at_type;
        break;
      }

      // required uint32 group_at_type = 4;
      case 4: {
        if (tag == 32) {
         parse_group_at_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_at_type_)));
          set_has_group_at_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_from_user_name;
        break;
      }

      // required string from_user_name = 5;
      case 5: {
        if (tag == 42) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 7;
      case 7: {
        if (tag == 56) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msg_id;
        break;
      }

      // optional uint32 msg_id = 8;
      case 8: {
        if (tag == 64) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupAtResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupAtResp)
  return false;
#undef DO_
}

void IMGroupAtResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupAtResp)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 peer_id = 3;
  for (int i = 0; i < this->peer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->peer_id(i), output);
  }

  // required uint32 group_at_type = 4;
  if (has_group_at_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_at_type(), output);
  }

  // required string from_user_name = 5;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_user_name(), output);
  }

  // required uint32 result_code = 7;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->result_code(), output);
  }

  // optional uint32 msg_id = 8;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msg_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupAtResp)
}

int IMGroupAtResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 group_at_type = 4;
    if (has_group_at_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_at_type());
    }

    // required string from_user_name = 5;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // required uint32 result_code = 7;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional uint32 msg_id = 8;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 peer_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->peer_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->peer_id(i));
    }
    total_size += 1 * this->peer_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupAtResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupAtResp*>(&from));
}

void IMGroupAtResp::MergeFrom(const IMGroupAtResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_id_.MergeFrom(from.peer_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_at_type()) {
      set_group_at_type(from.group_at_type());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupAtResp::CopyFrom(const IMGroupAtResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupAtResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void IMGroupAtResp::Swap(IMGroupAtResp* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(group_id_, other->group_id_);
    peer_id_.Swap(&other->peer_id_);
    std::swap(group_at_type_, other->group_at_type_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(result_code_, other->result_code_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupAtResp::GetTypeName() const {
  return "IM.Group.IMGroupAtResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInviteReq::kCreatorIdFieldNumber;
const int IMGroupMemberInviteReq::kGroupIdFieldNumber;
const int IMGroupMemberInviteReq::kUserIdFieldNumber;
const int IMGroupMemberInviteReq::kNameFieldNumber;
const int IMGroupMemberInviteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInviteReq::IMGroupMemberInviteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInviteReq)
}

void IMGroupMemberInviteReq::InitAsDefaultInstance() {
}

IMGroupMemberInviteReq::IMGroupMemberInviteReq(const IMGroupMemberInviteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInviteReq)
}

void IMGroupMemberInviteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInviteReq::~IMGroupMemberInviteReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInviteReq)
  SharedDtor();
}

void IMGroupMemberInviteReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInviteReq& IMGroupMemberInviteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInviteReq* IMGroupMemberInviteReq::default_instance_ = NULL;

IMGroupMemberInviteReq* IMGroupMemberInviteReq::New() const {
  return new IMGroupMemberInviteReq;
}

void IMGroupMemberInviteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInviteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(creator_id_, group_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_.Clear();
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // repeated uint32 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // repeated string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInviteReq)
  return false;
#undef DO_
}

void IMGroupMemberInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInviteReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 user_id = 3;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->user_id(i), output);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInviteReq)
}

int IMGroupMemberInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  // repeated string name = 4;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInviteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInviteReq*>(&from));
}

void IMGroupMemberInviteReq::MergeFrom(const IMGroupMemberInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInviteReq::CopyFrom(const IMGroupMemberInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupMemberInviteReq::Swap(IMGroupMemberInviteReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    user_id_.Swap(&other->user_id_);
    name_.Swap(&other->name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInviteReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberInviteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInviteResp::kCreatorIdFieldNumber;
const int IMGroupMemberInviteResp::kGroupIdFieldNumber;
const int IMGroupMemberInviteResp::kUserIdFieldNumber;
const int IMGroupMemberInviteResp::kNameFieldNumber;
const int IMGroupMemberInviteResp::kMemberListFieldNumber;
const int IMGroupMemberInviteResp::kResultCodeFieldNumber;
const int IMGroupMemberInviteResp::kReasonFieldNumber;
const int IMGroupMemberInviteResp::kGroupNameFieldNumber;
const int IMGroupMemberInviteResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInviteResp::IMGroupMemberInviteResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInviteResp)
}

void IMGroupMemberInviteResp::InitAsDefaultInstance() {
}

IMGroupMemberInviteResp::IMGroupMemberInviteResp(const IMGroupMemberInviteResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInviteResp)
}

void IMGroupMemberInviteResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInviteResp::~IMGroupMemberInviteResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInviteResp)
  SharedDtor();
}

void IMGroupMemberInviteResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInviteResp& IMGroupMemberInviteResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInviteResp* IMGroupMemberInviteResp::default_instance_ = NULL;

IMGroupMemberInviteResp* IMGroupMemberInviteResp::New() const {
  return new IMGroupMemberInviteResp;
}

void IMGroupMemberInviteResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInviteResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    ZR_(creator_id_, group_id_);
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_.Clear();
  name_.Clear();
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInviteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // repeated uint32 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_user_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // repeated string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_group_name;
        break;
      }

      // optional string group_name = 8;
      case 8: {
        if (tag == 66) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInviteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInviteResp)
  return false;
#undef DO_
}

void IMGroupMemberInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInviteResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 user_id = 3;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->user_id(i), output);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(i), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional string reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // optional string group_name = 8;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->group_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInviteResp)
}

int IMGroupMemberInviteResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string group_name = 8;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  // repeated string name = 4;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInviteResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInviteResp*>(&from));
}

void IMGroupMemberInviteResp::MergeFrom(const IMGroupMemberInviteResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  name_.MergeFrom(from.name_);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInviteResp::CopyFrom(const IMGroupMemberInviteResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  return true;
}

void IMGroupMemberInviteResp::Swap(IMGroupMemberInviteResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    user_id_.Swap(&other->user_id_);
    name_.Swap(&other->name_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(group_name_, other->group_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInviteResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberInviteResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberKickReq::kCreatorIdFieldNumber;
const int IMGroupMemberKickReq::kGroupIdFieldNumber;
const int IMGroupMemberKickReq::kMemberIdFieldNumber;
const int IMGroupMemberKickReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberKickReq::IMGroupMemberKickReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberKickReq)
}

void IMGroupMemberKickReq::InitAsDefaultInstance() {
}

IMGroupMemberKickReq::IMGroupMemberKickReq(const IMGroupMemberKickReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberKickReq)
}

void IMGroupMemberKickReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberKickReq::~IMGroupMemberKickReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberKickReq)
  SharedDtor();
}

void IMGroupMemberKickReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberKickReq& IMGroupMemberKickReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberKickReq* IMGroupMemberKickReq::default_instance_ = NULL;

IMGroupMemberKickReq* IMGroupMemberKickReq::New() const {
  return new IMGroupMemberKickReq;
}

void IMGroupMemberKickReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberKickReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(creator_id_, group_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberKickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // repeated uint32 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_member_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberKickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberKickReq)
  return false;
#undef DO_
}

void IMGroupMemberKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberKickReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->member_id(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberKickReq)
}

int IMGroupMemberKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id(i));
    }
    total_size += 1 * this->member_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberKickReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberKickReq*>(&from));
}

void IMGroupMemberKickReq::MergeFrom(const IMGroupMemberKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_.MergeFrom(from.member_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberKickReq::CopyFrom(const IMGroupMemberKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberKickReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupMemberKickReq::Swap(IMGroupMemberKickReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    member_id_.Swap(&other->member_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberKickReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberKickReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberKickResp::kCreatorIdFieldNumber;
const int IMGroupMemberKickResp::kGroupIdFieldNumber;
const int IMGroupMemberKickResp::kMemberIdFieldNumber;
const int IMGroupMemberKickResp::kMemberNameFieldNumber;
const int IMGroupMemberKickResp::kMemberListFieldNumber;
const int IMGroupMemberKickResp::kResultCodeFieldNumber;
const int IMGroupMemberKickResp::kReasonFieldNumber;
const int IMGroupMemberKickResp::kUserTokenInfoFieldNumber;
const int IMGroupMemberKickResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberKickResp::IMGroupMemberKickResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberKickResp)
}

void IMGroupMemberKickResp::InitAsDefaultInstance() {
}

IMGroupMemberKickResp::IMGroupMemberKickResp(const IMGroupMemberKickResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberKickResp)
}

void IMGroupMemberKickResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberKickResp::~IMGroupMemberKickResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberKickResp)
  SharedDtor();
}

void IMGroupMemberKickResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberKickResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberKickResp& IMGroupMemberKickResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberKickResp* IMGroupMemberKickResp::default_instance_ = NULL;

IMGroupMemberKickResp* IMGroupMemberKickResp::New() const {
  return new IMGroupMemberKickResp;
}

void IMGroupMemberKickResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberKickResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 99) {
    ZR_(creator_id_, group_id_);
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_.Clear();
  member_name_.Clear();
  member_list_.Clear();
  user_token_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberKickResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberKickResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // repeated uint32 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_member_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        if (input->ExpectTag(34)) goto parse_member_name;
        break;
      }

      // repeated string member_name = 4;
      case 4: {
        if (tag == 34) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_member_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_name;
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user_token_info;
        break;
      }

      // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 8;
      case 8: {
        if (tag == 66) {
         parse_user_token_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_token_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user_token_info;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberKickResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberKickResp)
  return false;
#undef DO_
}

void IMGroupMemberKickResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberKickResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->member_id(i), output);
  }

  // repeated string member_name = 4;
  for (int i = 0; i < this->member_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->member_name(i), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional string reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 8;
  for (int i = 0; i < this->user_token_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->user_token_info(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberKickResp)
}

int IMGroupMemberKickResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_id(i));
    }
    total_size += 1 * this->member_id_size() + data_size;
  }

  // repeated string member_name = 4;
  total_size += 1 * this->member_name_size();
  for (int i = 0; i < this->member_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->member_name(i));
  }

  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 8;
  total_size += 1 * this->user_token_info_size();
  for (int i = 0; i < this->user_token_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_token_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberKickResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberKickResp*>(&from));
}

void IMGroupMemberKickResp::MergeFrom(const IMGroupMemberKickResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_.MergeFrom(from.member_id_);
  member_name_.MergeFrom(from.member_name_);
  member_list_.MergeFrom(from.member_list_);
  user_token_info_.MergeFrom(from.user_token_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberKickResp::CopyFrom(const IMGroupMemberKickResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberKickResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_token_info())) return false;
  return true;
}

void IMGroupMemberKickResp::Swap(IMGroupMemberKickResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    member_id_.Swap(&other->member_id_);
    member_name_.Swap(&other->member_name_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    user_token_info_.Swap(&other->user_token_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberKickResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberKickResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberApplyReq::kUserIdFieldNumber;
const int IMGroupMemberApplyReq::kGroupIdFieldNumber;
const int IMGroupMemberApplyReq::kNameFieldNumber;
const int IMGroupMemberApplyReq::kCreatorIdFieldNumber;
const int IMGroupMemberApplyReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberApplyReq::IMGroupMemberApplyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberApplyReq)
}

void IMGroupMemberApplyReq::InitAsDefaultInstance() {
}

IMGroupMemberApplyReq::IMGroupMemberApplyReq(const IMGroupMemberApplyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberApplyReq)
}

void IMGroupMemberApplyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberApplyReq::~IMGroupMemberApplyReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberApplyReq)
  SharedDtor();
}

void IMGroupMemberApplyReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberApplyReq& IMGroupMemberApplyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberApplyReq* IMGroupMemberApplyReq::default_instance_ = NULL;

IMGroupMemberApplyReq* IMGroupMemberApplyReq::New() const {
  return new IMGroupMemberApplyReq;
}

void IMGroupMemberApplyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberApplyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, group_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    creator_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creator_id;
        break;
      }

      // optional uint32 creator_id = 4;
      case 4: {
        if (tag == 32) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberApplyReq)
  return false;
#undef DO_
}

void IMGroupMemberApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberApplyReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 creator_id = 4;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberApplyReq)
}

int IMGroupMemberApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 creator_id = 4;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberApplyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberApplyReq*>(&from));
}

void IMGroupMemberApplyReq::MergeFrom(const IMGroupMemberApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberApplyReq::CopyFrom(const IMGroupMemberApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberApplyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupMemberApplyReq::Swap(IMGroupMemberApplyReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(name_, other->name_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberApplyReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberApplyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberApplyResp::kUserIdFieldNumber;
const int IMGroupMemberApplyResp::kGroupIdFieldNumber;
const int IMGroupMemberApplyResp::kCreatorIdFieldNumber;
const int IMGroupMemberApplyResp::kNameFieldNumber;
const int IMGroupMemberApplyResp::kResultCodeFieldNumber;
const int IMGroupMemberApplyResp::kReasonFieldNumber;
const int IMGroupMemberApplyResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberApplyResp::IMGroupMemberApplyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberApplyResp)
}

void IMGroupMemberApplyResp::InitAsDefaultInstance() {
}

IMGroupMemberApplyResp::IMGroupMemberApplyResp(const IMGroupMemberApplyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberApplyResp)
}

void IMGroupMemberApplyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberApplyResp::~IMGroupMemberApplyResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberApplyResp)
  SharedDtor();
}

void IMGroupMemberApplyResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberApplyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberApplyResp& IMGroupMemberApplyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberApplyResp* IMGroupMemberApplyResp::default_instance_ = NULL;

IMGroupMemberApplyResp* IMGroupMemberApplyResp::New() const {
  return new IMGroupMemberApplyResp;
}

void IMGroupMemberApplyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberApplyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, group_id_);
    ZR_(creator_id_, result_code_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberApplyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberApplyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 5;
      case 5: {
        if (tag == 40) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (tag == 50) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberApplyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberApplyResp)
  return false;
#undef DO_
}

void IMGroupMemberApplyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberApplyResp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required uint32 result_code = 5;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result_code(), output);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberApplyResp)
}

int IMGroupMemberApplyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 result_code = 5;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberApplyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberApplyResp*>(&from));
}

void IMGroupMemberApplyResp::MergeFrom(const IMGroupMemberApplyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberApplyResp::CopyFrom(const IMGroupMemberApplyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberApplyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupMemberApplyResp::Swap(IMGroupMemberApplyResp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(name_, other->name_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberApplyResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberApplyResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberReviewReq::kCreatorIdFieldNumber;
const int IMGroupMemberReviewReq::kUserIdFieldNumber;
const int IMGroupMemberReviewReq::kGroupIdFieldNumber;
const int IMGroupMemberReviewReq::kActionFieldNumber;
const int IMGroupMemberReviewReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberReviewReq::IMGroupMemberReviewReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberReviewReq)
}

void IMGroupMemberReviewReq::InitAsDefaultInstance() {
}

IMGroupMemberReviewReq::IMGroupMemberReviewReq(const IMGroupMemberReviewReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberReviewReq)
}

void IMGroupMemberReviewReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  user_id_ = 0u;
  group_id_ = 0u;
  action_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberReviewReq::~IMGroupMemberReviewReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberReviewReq)
  SharedDtor();
}

void IMGroupMemberReviewReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberReviewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberReviewReq& IMGroupMemberReviewReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberReviewReq* IMGroupMemberReviewReq::default_instance_ = NULL;

IMGroupMemberReviewReq* IMGroupMemberReviewReq::New() const {
  return new IMGroupMemberReviewReq;
}

void IMGroupMemberReviewReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberReviewReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(creator_id_, action_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberReviewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberReviewReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // required uint32 action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberReviewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberReviewReq)
  return false;
#undef DO_
}

void IMGroupMemberReviewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberReviewReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required uint32 action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberReviewReq)
}

int IMGroupMemberReviewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberReviewReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberReviewReq*>(&from));
}

void IMGroupMemberReviewReq::MergeFrom(const IMGroupMemberReviewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberReviewReq::CopyFrom(const IMGroupMemberReviewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberReviewReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupMemberReviewReq::Swap(IMGroupMemberReviewReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(action_, other->action_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberReviewReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberReviewReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberReviewResp::kCreatorIdFieldNumber;
const int IMGroupMemberReviewResp::kUserIdFieldNumber;
const int IMGroupMemberReviewResp::kNameFieldNumber;
const int IMGroupMemberReviewResp::kGroupIdFieldNumber;
const int IMGroupMemberReviewResp::kMemberListFieldNumber;
const int IMGroupMemberReviewResp::kResultCodeFieldNumber;
const int IMGroupMemberReviewResp::kActionFieldNumber;
const int IMGroupMemberReviewResp::kReasonFieldNumber;
const int IMGroupMemberReviewResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberReviewResp::IMGroupMemberReviewResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberReviewResp)
}

void IMGroupMemberReviewResp::InitAsDefaultInstance() {
}

IMGroupMemberReviewResp::IMGroupMemberReviewResp(const IMGroupMemberReviewResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberReviewResp)
}

void IMGroupMemberReviewResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  result_code_ = 0u;
  action_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberReviewResp::~IMGroupMemberReviewResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberReviewResp)
  SharedDtor();
}

void IMGroupMemberReviewResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberReviewResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberReviewResp& IMGroupMemberReviewResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberReviewResp* IMGroupMemberReviewResp::default_instance_ = NULL;

IMGroupMemberReviewResp* IMGroupMemberReviewResp::New() const {
  return new IMGroupMemberReviewResp;
}

void IMGroupMemberReviewResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberReviewResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(creator_id_, user_id_);
    ZR_(group_id_, result_code_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    action_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberReviewResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberReviewResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_action;
        break;
      }

      // required uint32 action = 7;
      case 7: {
        if (tag == 56) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberReviewResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberReviewResp)
  return false;
#undef DO_
}

void IMGroupMemberReviewResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberReviewResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // required uint32 action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->action(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberReviewResp)
}

int IMGroupMemberReviewResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberReviewResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberReviewResp*>(&from));
}

void IMGroupMemberReviewResp::MergeFrom(const IMGroupMemberReviewResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberReviewResp::CopyFrom(const IMGroupMemberReviewResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberReviewResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  return true;
}

void IMGroupMemberReviewResp::Swap(IMGroupMemberReviewResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(group_id_, other->group_id_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(action_, other->action_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberReviewResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberReviewResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberQuitReq::kMemberIdFieldNumber;
const int IMGroupMemberQuitReq::kGroupIdFieldNumber;
const int IMGroupMemberQuitReq::kNameFieldNumber;
const int IMGroupMemberQuitReq::kReasonFieldNumber;
const int IMGroupMemberQuitReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberQuitReq::IMGroupMemberQuitReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberQuitReq)
}

void IMGroupMemberQuitReq::InitAsDefaultInstance() {
}

IMGroupMemberQuitReq::IMGroupMemberQuitReq(const IMGroupMemberQuitReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberQuitReq)
}

void IMGroupMemberQuitReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  group_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberQuitReq::~IMGroupMemberQuitReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberQuitReq)
  SharedDtor();
}

void IMGroupMemberQuitReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberQuitReq& IMGroupMemberQuitReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberQuitReq* IMGroupMemberQuitReq::default_instance_ = NULL;

IMGroupMemberQuitReq* IMGroupMemberQuitReq::New() const {
  return new IMGroupMemberQuitReq;
}

void IMGroupMemberQuitReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberQuitReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(member_id_, group_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberQuitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberQuitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberQuitReq)
  return false;
#undef DO_
}

void IMGroupMemberQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberQuitReq)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberQuitReq)
}

int IMGroupMemberQuitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberQuitReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberQuitReq*>(&from));
}

void IMGroupMemberQuitReq::MergeFrom(const IMGroupMemberQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberQuitReq::CopyFrom(const IMGroupMemberQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberQuitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupMemberQuitReq::Swap(IMGroupMemberQuitReq* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(name_, other->name_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberQuitReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberQuitReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberQuitResp::kMemberIdFieldNumber;
const int IMGroupMemberQuitResp::kCreatorIdFieldNumber;
const int IMGroupMemberQuitResp::kGroupIdFieldNumber;
const int IMGroupMemberQuitResp::kNameFieldNumber;
const int IMGroupMemberQuitResp::kMemberListFieldNumber;
const int IMGroupMemberQuitResp::kResultCodeFieldNumber;
const int IMGroupMemberQuitResp::kReasonFieldNumber;
const int IMGroupMemberQuitResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberQuitResp::IMGroupMemberQuitResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberQuitResp)
}

void IMGroupMemberQuitResp::InitAsDefaultInstance() {
}

IMGroupMemberQuitResp::IMGroupMemberQuitResp(const IMGroupMemberQuitResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberQuitResp)
}

void IMGroupMemberQuitResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  creator_id_ = 0u;
  group_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberQuitResp::~IMGroupMemberQuitResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberQuitResp)
  SharedDtor();
}

void IMGroupMemberQuitResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberQuitResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberQuitResp& IMGroupMemberQuitResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberQuitResp* IMGroupMemberQuitResp::default_instance_ = NULL;

IMGroupMemberQuitResp* IMGroupMemberQuitResp::New() const {
  return new IMGroupMemberQuitResp;
}

void IMGroupMemberQuitResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberQuitResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(member_id_, creator_id_);
    ZR_(group_id_, result_code_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberQuitResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberQuitResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberQuitResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberQuitResp)
  return false;
#undef DO_
}

void IMGroupMemberQuitResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberQuitResp)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->creator_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional string reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberQuitResp)
}

int IMGroupMemberQuitResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberQuitResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberQuitResp*>(&from));
}

void IMGroupMemberQuitResp::MergeFrom(const IMGroupMemberQuitResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberQuitResp::CopyFrom(const IMGroupMemberQuitResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberQuitResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void IMGroupMemberQuitResp::Swap(IMGroupMemberQuitResp* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(name_, other->name_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberQuitResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberQuitResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberDismissReq::kCreatorIdFieldNumber;
const int IMGroupMemberDismissReq::kGroupIdFieldNumber;
const int IMGroupMemberDismissReq::kReasonFieldNumber;
const int IMGroupMemberDismissReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberDismissReq::IMGroupMemberDismissReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberDismissReq)
}

void IMGroupMemberDismissReq::InitAsDefaultInstance() {
}

IMGroupMemberDismissReq::IMGroupMemberDismissReq(const IMGroupMemberDismissReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberDismissReq)
}

void IMGroupMemberDismissReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberDismissReq::~IMGroupMemberDismissReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberDismissReq)
  SharedDtor();
}

void IMGroupMemberDismissReq::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberDismissReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberDismissReq& IMGroupMemberDismissReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberDismissReq* IMGroupMemberDismissReq::default_instance_ = NULL;

IMGroupMemberDismissReq* IMGroupMemberDismissReq::New() const {
  return new IMGroupMemberDismissReq;
}

void IMGroupMemberDismissReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberDismissReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(creator_id_, group_id_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberDismissReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberDismissReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberDismissReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberDismissReq)
  return false;
#undef DO_
}

void IMGroupMemberDismissReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberDismissReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberDismissReq)
}

int IMGroupMemberDismissReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberDismissReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberDismissReq*>(&from));
}

void IMGroupMemberDismissReq::MergeFrom(const IMGroupMemberDismissReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberDismissReq::CopyFrom(const IMGroupMemberDismissReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberDismissReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMGroupMemberDismissReq::Swap(IMGroupMemberDismissReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberDismissReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberDismissReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberDismissResp::kCreatorIdFieldNumber;
const int IMGroupMemberDismissResp::kGroupIdFieldNumber;
const int IMGroupMemberDismissResp::kMemberListFieldNumber;
const int IMGroupMemberDismissResp::kResultCodeFieldNumber;
const int IMGroupMemberDismissResp::kReasonFieldNumber;
const int IMGroupMemberDismissResp::kGroupNameFieldNumber;
const int IMGroupMemberDismissResp::kUserTokenInfoFieldNumber;
const int IMGroupMemberDismissResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberDismissResp::IMGroupMemberDismissResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberDismissResp)
}

void IMGroupMemberDismissResp::InitAsDefaultInstance() {
}

IMGroupMemberDismissResp::IMGroupMemberDismissResp(const IMGroupMemberDismissResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberDismissResp)
}

void IMGroupMemberDismissResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberDismissResp::~IMGroupMemberDismissResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberDismissResp)
  SharedDtor();
}

void IMGroupMemberDismissResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberDismissResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberDismissResp& IMGroupMemberDismissResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberDismissResp* IMGroupMemberDismissResp::default_instance_ = NULL;

IMGroupMemberDismissResp* IMGroupMemberDismissResp::New() const {
  return new IMGroupMemberDismissResp;
}

void IMGroupMemberDismissResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberDismissResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 187) {
    ZR_(creator_id_, group_id_);
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  user_token_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberDismissResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberDismissResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 3;
      case 3: {
        if (tag == 24) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_member_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_list;
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_name;
        break;
      }

      // optional string group_name = 6;
      case 6: {
        if (tag == 50) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_token_info;
        break;
      }

      // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 7;
      case 7: {
        if (tag == 58) {
         parse_user_token_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_token_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_token_info;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberDismissResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberDismissResp)
  return false;
#undef DO_
}

void IMGroupMemberDismissResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberDismissResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated uint32 member_list = 3;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->member_list(i), output);
  }

  // required uint32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_code(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  // optional string group_name = 6;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_name(), output);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 7;
  for (int i = 0; i < this->user_token_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->user_token_info(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberDismissResp)
}

int IMGroupMemberDismissResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string group_name = 6;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 7;
  total_size += 1 * this->user_token_info_size();
  for (int i = 0; i < this->user_token_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_token_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberDismissResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberDismissResp*>(&from));
}

void IMGroupMemberDismissResp::MergeFrom(const IMGroupMemberDismissResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  user_token_info_.MergeFrom(from.user_token_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberDismissResp::CopyFrom(const IMGroupMemberDismissResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberDismissResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_token_info())) return false;
  return true;
}

void IMGroupMemberDismissResp::Swap(IMGroupMemberDismissResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(group_name_, other->group_name_);
    user_token_info_.Swap(&other->user_token_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberDismissResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberDismissResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoModifyReq::kCreatorIdFieldNumber;
const int IMGroupInfoModifyReq::kGroupIdFieldNumber;
const int IMGroupInfoModifyReq::kGroupTypeFieldNumber;
const int IMGroupInfoModifyReq::kGroupNameFieldNumber;
const int IMGroupInfoModifyReq::kGroupPortraitFieldNumber;
const int IMGroupInfoModifyReq::kGroupDescrpFieldNumber;
const int IMGroupInfoModifyReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoModifyReq::IMGroupInfoModifyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoModifyReq)
}

void IMGroupInfoModifyReq::InitAsDefaultInstance() {
}

IMGroupInfoModifyReq::IMGroupInfoModifyReq(const IMGroupInfoModifyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoModifyReq)
}

void IMGroupInfoModifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoModifyReq::~IMGroupInfoModifyReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoModifyReq)
  SharedDtor();
}

void IMGroupInfoModifyReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoModifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoModifyReq& IMGroupInfoModifyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoModifyReq* IMGroupInfoModifyReq::default_instance_ = NULL;

IMGroupInfoModifyReq* IMGroupInfoModifyReq::New() const {
  return new IMGroupInfoModifyReq;
}

void IMGroupInfoModifyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoModifyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(creator_id_, group_id_);
    group_type_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_portrait()) {
      if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_portrait_->clear();
      }
    }
    if (has_group_descrp()) {
      if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_descrp_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoModifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoModifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required uint32 group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_portrait;
        break;
      }

      // required string group_portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_group_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_descrp;
        break;
      }

      // optional string group_descrp = 6;
      case 6: {
        if (tag == 50) {
         parse_group_descrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_descrp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoModifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoModifyReq)
  return false;
#undef DO_
}

void IMGroupInfoModifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoModifyReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_type(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // required string group_portrait = 5;
  if (has_group_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_portrait(), output);
  }

  // optional string group_descrp = 6;
  if (has_group_descrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_descrp(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoModifyReq)
}

int IMGroupInfoModifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_type());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_portrait = 5;
    if (has_group_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_portrait());
    }

    // optional string group_descrp = 6;
    if (has_group_descrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_descrp());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoModifyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoModifyReq*>(&from));
}

void IMGroupInfoModifyReq::MergeFrom(const IMGroupInfoModifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_portrait()) {
      set_group_portrait(from.group_portrait());
    }
    if (from.has_group_descrp()) {
      set_group_descrp(from.group_descrp());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoModifyReq::CopyFrom(const IMGroupInfoModifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoModifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupInfoModifyReq::Swap(IMGroupInfoModifyReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_portrait_, other->group_portrait_);
    std::swap(group_descrp_, other->group_descrp_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoModifyReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoModifyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupInfoModifyResp::kCreatorIdFieldNumber;
const int IMGroupInfoModifyResp::kGroupIdFieldNumber;
const int IMGroupInfoModifyResp::kGroupTypeFieldNumber;
const int IMGroupInfoModifyResp::kGroupNameFieldNumber;
const int IMGroupInfoModifyResp::kGroupPortraitFieldNumber;
const int IMGroupInfoModifyResp::kMemberListFieldNumber;
const int IMGroupInfoModifyResp::kResultCodeFieldNumber;
const int IMGroupInfoModifyResp::kReasonFieldNumber;
const int IMGroupInfoModifyResp::kGroupDescrpFieldNumber;
const int IMGroupInfoModifyResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupInfoModifyResp::IMGroupInfoModifyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupInfoModifyResp)
}

void IMGroupInfoModifyResp::InitAsDefaultInstance() {
}

IMGroupInfoModifyResp::IMGroupInfoModifyResp(const IMGroupInfoModifyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoModifyResp)
}

void IMGroupInfoModifyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  group_type_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupInfoModifyResp::~IMGroupInfoModifyResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoModifyResp)
  SharedDtor();
}

void IMGroupInfoModifyResp::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupInfoModifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupInfoModifyResp& IMGroupInfoModifyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupInfoModifyResp* IMGroupInfoModifyResp::default_instance_ = NULL;

IMGroupInfoModifyResp* IMGroupInfoModifyResp::New() const {
  return new IMGroupInfoModifyResp;
}

void IMGroupInfoModifyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupInfoModifyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(creator_id_, group_id_);
    ZR_(group_type_, result_code_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_portrait()) {
      if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_portrait_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_group_descrp()) {
      if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_descrp_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupInfoModifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupInfoModifyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_type;
        break;
      }

      // required uint32 group_type = 3;
      case 3: {
        if (tag == 24) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_portrait;
        break;
      }

      // required string group_portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_group_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 6;
      case 6: {
        if (tag == 48) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_member_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        if (input->ExpectTag(56)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 7;
      case 7: {
        if (tag == 56) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_group_descrp;
        break;
      }

      // optional string group_descrp = 9;
      case 9: {
        if (tag == 74) {
         parse_group_descrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_descrp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupInfoModifyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupInfoModifyResp)
  return false;
#undef DO_
}

void IMGroupInfoModifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupInfoModifyResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 group_type = 3;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_type(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // required string group_portrait = 5;
  if (has_group_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_portrait(), output);
  }

  // repeated uint32 member_list = 6;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->member_list(i), output);
  }

  // required uint32 result_code = 7;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->result_code(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  // optional string group_descrp = 9;
  if (has_group_descrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->group_descrp(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupInfoModifyResp)
}

int IMGroupInfoModifyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 group_type = 3;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_type());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_portrait = 5;
    if (has_group_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_portrait());
    }

    // required uint32 result_code = 7;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string group_descrp = 9;
    if (has_group_descrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_descrp());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupInfoModifyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupInfoModifyResp*>(&from));
}

void IMGroupInfoModifyResp::MergeFrom(const IMGroupInfoModifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_portrait()) {
      set_group_portrait(from.group_portrait());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_descrp()) {
      set_group_descrp(from.group_descrp());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupInfoModifyResp::CopyFrom(const IMGroupInfoModifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoModifyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void IMGroupInfoModifyResp::Swap(IMGroupInfoModifyResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_portrait_, other->group_portrait_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(group_descrp_, other->group_descrp_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupInfoModifyResp::GetTypeName() const {
  return "IM.Group.IMGroupInfoModifyResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupForbiddenReq::kCreatorIdFieldNumber;
const int IMGroupForbiddenReq::kGroupIdFieldNumber;
const int IMGroupForbiddenReq::kStateFieldNumber;
const int IMGroupForbiddenReq::kCreatorNameFieldNumber;
const int IMGroupForbiddenReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupForbiddenReq::IMGroupForbiddenReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupForbiddenReq)
}

void IMGroupForbiddenReq::InitAsDefaultInstance() {
}

IMGroupForbiddenReq::IMGroupForbiddenReq(const IMGroupForbiddenReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupForbiddenReq)
}

void IMGroupForbiddenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  state_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupForbiddenReq::~IMGroupForbiddenReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupForbiddenReq)
  SharedDtor();
}

void IMGroupForbiddenReq::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupForbiddenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupForbiddenReq& IMGroupForbiddenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupForbiddenReq* IMGroupForbiddenReq::default_instance_ = NULL;

IMGroupForbiddenReq* IMGroupForbiddenReq::New() const {
  return new IMGroupForbiddenReq;
}

void IMGroupForbiddenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupForbiddenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(creator_id_, group_id_);
    state_ = 0u;
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupForbiddenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupForbiddenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creator_name;
        break;
      }

      // optional string creator_name = 4;
      case 4: {
        if (tag == 34) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupForbiddenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupForbiddenReq)
  return false;
#undef DO_
}

void IMGroupForbiddenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupForbiddenReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // optional string creator_name = 4;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupForbiddenReq)
}

int IMGroupForbiddenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string creator_name = 4;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupForbiddenReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupForbiddenReq*>(&from));
}

void IMGroupForbiddenReq::MergeFrom(const IMGroupForbiddenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupForbiddenReq::CopyFrom(const IMGroupForbiddenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupForbiddenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupForbiddenReq::Swap(IMGroupForbiddenReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(state_, other->state_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupForbiddenReq::GetTypeName() const {
  return "IM.Group.IMGroupForbiddenReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupForbiddenResp::kCreatorIdFieldNumber;
const int IMGroupForbiddenResp::kGroupIdFieldNumber;
const int IMGroupForbiddenResp::kStateFieldNumber;
const int IMGroupForbiddenResp::kMemberListFieldNumber;
const int IMGroupForbiddenResp::kResultCodeFieldNumber;
const int IMGroupForbiddenResp::kReasonFieldNumber;
const int IMGroupForbiddenResp::kCreatorNameFieldNumber;
const int IMGroupForbiddenResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupForbiddenResp::IMGroupForbiddenResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupForbiddenResp)
}

void IMGroupForbiddenResp::InitAsDefaultInstance() {
}

IMGroupForbiddenResp::IMGroupForbiddenResp(const IMGroupForbiddenResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupForbiddenResp)
}

void IMGroupForbiddenResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  state_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupForbiddenResp::~IMGroupForbiddenResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupForbiddenResp)
  SharedDtor();
}

void IMGroupForbiddenResp::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupForbiddenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupForbiddenResp& IMGroupForbiddenResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupForbiddenResp* IMGroupForbiddenResp::default_instance_ = NULL;

IMGroupForbiddenResp* IMGroupForbiddenResp::New() const {
  return new IMGroupForbiddenResp;
}

void IMGroupForbiddenResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupForbiddenResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(creator_id_, group_id_);
    ZR_(state_, result_code_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupForbiddenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupForbiddenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 4;
      case 4: {
        if (tag == 32) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_member_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_list;
        if (input->ExpectTag(40)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 5;
      case 5: {
        if (tag == 40) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (tag == 50) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_creator_name;
        break;
      }

      // optional string creator_name = 7;
      case 7: {
        if (tag == 58) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupForbiddenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupForbiddenResp)
  return false;
#undef DO_
}

void IMGroupForbiddenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupForbiddenResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // repeated uint32 member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->member_list(i), output);
  }

  // required uint32 result_code = 5;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result_code(), output);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reason(), output);
  }

  // optional string creator_name = 7;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->creator_name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupForbiddenResp)
}

int IMGroupForbiddenResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 result_code = 5;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional string creator_name = 7;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupForbiddenResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupForbiddenResp*>(&from));
}

void IMGroupForbiddenResp::MergeFrom(const IMGroupForbiddenResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupForbiddenResp::CopyFrom(const IMGroupForbiddenResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupForbiddenResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void IMGroupForbiddenResp::Swap(IMGroupForbiddenResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(state_, other->state_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupForbiddenResp::GetTypeName() const {
  return "IM.Group.IMGroupForbiddenResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetMemberIdentityReq::kCreatorIdFieldNumber;
const int IMGroupSetMemberIdentityReq::kGroupIdFieldNumber;
const int IMGroupSetMemberIdentityReq::kMemberIdFieldNumber;
const int IMGroupSetMemberIdentityReq::kGroupNameFieldNumber;
const int IMGroupSetMemberIdentityReq::kDegreeFieldNumber;
const int IMGroupSetMemberIdentityReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupSetMemberIdentityReq::IMGroupSetMemberIdentityReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetMemberIdentityReq)
}

void IMGroupSetMemberIdentityReq::InitAsDefaultInstance() {
}

IMGroupSetMemberIdentityReq::IMGroupSetMemberIdentityReq(const IMGroupSetMemberIdentityReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetMemberIdentityReq)
}

void IMGroupSetMemberIdentityReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  member_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetMemberIdentityReq::~IMGroupSetMemberIdentityReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetMemberIdentityReq)
  SharedDtor();
}

void IMGroupSetMemberIdentityReq::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetMemberIdentityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetMemberIdentityReq& IMGroupSetMemberIdentityReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetMemberIdentityReq* IMGroupSetMemberIdentityReq::default_instance_ = NULL;

IMGroupSetMemberIdentityReq* IMGroupSetMemberIdentityReq::New() const {
  return new IMGroupSetMemberIdentityReq;
}

void IMGroupSetMemberIdentityReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetMemberIdentityReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(creator_id_, group_id_);
    ZR_(member_id_, degree_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetMemberIdentityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetMemberIdentityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // required string group_name = 4;
      case 4: {
        if (tag == 34) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_degree;
        break;
      }

      // required uint32 degree = 5;
      case 5: {
        if (tag == 40) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetMemberIdentityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetMemberIdentityReq)
  return false;
#undef DO_
}

void IMGroupSetMemberIdentityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetMemberIdentityReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 member_id = 3;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_id(), output);
  }

  // required string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_name(), output);
  }

  // required uint32 degree = 5;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->degree(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetMemberIdentityReq)
}

int IMGroupSetMemberIdentityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 member_id = 3;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required uint32 degree = 5;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetMemberIdentityReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetMemberIdentityReq*>(&from));
}

void IMGroupSetMemberIdentityReq::MergeFrom(const IMGroupSetMemberIdentityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetMemberIdentityReq::CopyFrom(const IMGroupSetMemberIdentityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetMemberIdentityReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupSetMemberIdentityReq::Swap(IMGroupSetMemberIdentityReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(degree_, other->degree_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetMemberIdentityReq::GetTypeName() const {
  return "IM.Group.IMGroupSetMemberIdentityReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetMemberIdentityResp::kCreatorIdFieldNumber;
const int IMGroupSetMemberIdentityResp::kGroupIdFieldNumber;
const int IMGroupSetMemberIdentityResp::kGroupNameFieldNumber;
const int IMGroupSetMemberIdentityResp::kMemberIdFieldNumber;
const int IMGroupSetMemberIdentityResp::kMemberNameFieldNumber;
const int IMGroupSetMemberIdentityResp::kDegreeFieldNumber;
const int IMGroupSetMemberIdentityResp::kMemberListFieldNumber;
const int IMGroupSetMemberIdentityResp::kResultCodeFieldNumber;
const int IMGroupSetMemberIdentityResp::kReasonFieldNumber;
const int IMGroupSetMemberIdentityResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupSetMemberIdentityResp::IMGroupSetMemberIdentityResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetMemberIdentityResp)
}

void IMGroupSetMemberIdentityResp::InitAsDefaultInstance() {
}

IMGroupSetMemberIdentityResp::IMGroupSetMemberIdentityResp(const IMGroupSetMemberIdentityResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetMemberIdentityResp)
}

void IMGroupSetMemberIdentityResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_id_ = 0u;
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetMemberIdentityResp::~IMGroupSetMemberIdentityResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetMemberIdentityResp)
  SharedDtor();
}

void IMGroupSetMemberIdentityResp::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetMemberIdentityResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetMemberIdentityResp& IMGroupSetMemberIdentityResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetMemberIdentityResp* IMGroupSetMemberIdentityResp::default_instance_ = NULL;

IMGroupSetMemberIdentityResp* IMGroupSetMemberIdentityResp::New() const {
  return new IMGroupSetMemberIdentityResp;
}

void IMGroupSetMemberIdentityResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetMemberIdentityResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(creator_id_, group_id_);
    ZR_(member_id_, degree_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        member_name_->clear();
      }
    }
    result_code_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetMemberIdentityResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetMemberIdentityResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 4;
      case 4: {
        if (tag == 32) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_member_name;
        break;
      }

      // required string member_name = 5;
      case 5: {
        if (tag == 42) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_degree;
        break;
      }

      // required uint32 degree = 6;
      case 6: {
        if (tag == 48) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 7;
      case 7: {
        if (tag == 56) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_member_list())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        if (input->ExpectTag(64)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 8;
      case 8: {
        if (tag == 64) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_reason;
        break;
      }

      // optional string reason = 9;
      case 9: {
        if (tag == 74) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetMemberIdentityResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetMemberIdentityResp)
  return false;
#undef DO_
}

void IMGroupSetMemberIdentityResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetMemberIdentityResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required uint32 member_id = 4;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_id(), output);
  }

  // required string member_name = 5;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->member_name(), output);
  }

  // required uint32 degree = 6;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->degree(), output);
  }

  // repeated uint32 member_list = 7;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->member_list(i), output);
  }

  // required uint32 result_code = 8;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result_code(), output);
  }

  // optional string reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetMemberIdentityResp)
}

int IMGroupSetMemberIdentityResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required uint32 member_id = 4;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required string member_name = 5;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }

    // required uint32 degree = 6;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // required uint32 result_code = 8;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetMemberIdentityResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetMemberIdentityResp*>(&from));
}

void IMGroupSetMemberIdentityResp::MergeFrom(const IMGroupSetMemberIdentityResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetMemberIdentityResp::CopyFrom(const IMGroupSetMemberIdentityResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetMemberIdentityResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  return true;
}

void IMGroupSetMemberIdentityResp::Swap(IMGroupSetMemberIdentityResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(member_id_, other->member_id_);
    std::swap(member_name_, other->member_name_);
    std::swap(degree_, other->degree_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetMemberIdentityResp::GetTypeName() const {
  return "IM.Group.IMGroupSetMemberIdentityResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInfoUpdateReq::kMemberIdFieldNumber;
const int IMGroupMemberInfoUpdateReq::kGroupIdFieldNumber;
const int IMGroupMemberInfoUpdateReq::kNameFieldNumber;
const int IMGroupMemberInfoUpdateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInfoUpdateReq::IMGroupMemberInfoUpdateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInfoUpdateReq)
}

void IMGroupMemberInfoUpdateReq::InitAsDefaultInstance() {
}

IMGroupMemberInfoUpdateReq::IMGroupMemberInfoUpdateReq(const IMGroupMemberInfoUpdateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInfoUpdateReq)
}

void IMGroupMemberInfoUpdateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  group_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInfoUpdateReq::~IMGroupMemberInfoUpdateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInfoUpdateReq)
  SharedDtor();
}

void IMGroupMemberInfoUpdateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInfoUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInfoUpdateReq& IMGroupMemberInfoUpdateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInfoUpdateReq* IMGroupMemberInfoUpdateReq::default_instance_ = NULL;

IMGroupMemberInfoUpdateReq* IMGroupMemberInfoUpdateReq::New() const {
  return new IMGroupMemberInfoUpdateReq;
}

void IMGroupMemberInfoUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInfoUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(member_id_, group_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInfoUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInfoUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInfoUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInfoUpdateReq)
  return false;
#undef DO_
}

void IMGroupMemberInfoUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInfoUpdateReq)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInfoUpdateReq)
}

int IMGroupMemberInfoUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInfoUpdateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInfoUpdateReq*>(&from));
}

void IMGroupMemberInfoUpdateReq::MergeFrom(const IMGroupMemberInfoUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInfoUpdateReq::CopyFrom(const IMGroupMemberInfoUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInfoUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupMemberInfoUpdateReq::Swap(IMGroupMemberInfoUpdateReq* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(name_, other->name_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInfoUpdateReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberInfoUpdateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInfoUpdateResp::kMemberIdFieldNumber;
const int IMGroupMemberInfoUpdateResp::kCreatorIdFieldNumber;
const int IMGroupMemberInfoUpdateResp::kGroupIdFieldNumber;
const int IMGroupMemberInfoUpdateResp::kNameFieldNumber;
const int IMGroupMemberInfoUpdateResp::kMemberListFieldNumber;
const int IMGroupMemberInfoUpdateResp::kResultCodeFieldNumber;
const int IMGroupMemberInfoUpdateResp::kReasonFieldNumber;
const int IMGroupMemberInfoUpdateResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInfoUpdateResp::IMGroupMemberInfoUpdateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInfoUpdateResp)
}

void IMGroupMemberInfoUpdateResp::InitAsDefaultInstance() {
}

IMGroupMemberInfoUpdateResp::IMGroupMemberInfoUpdateResp(const IMGroupMemberInfoUpdateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInfoUpdateResp)
}

void IMGroupMemberInfoUpdateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  creator_id_ = 0u;
  group_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInfoUpdateResp::~IMGroupMemberInfoUpdateResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInfoUpdateResp)
  SharedDtor();
}

void IMGroupMemberInfoUpdateResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInfoUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInfoUpdateResp& IMGroupMemberInfoUpdateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInfoUpdateResp* IMGroupMemberInfoUpdateResp::default_instance_ = NULL;

IMGroupMemberInfoUpdateResp* IMGroupMemberInfoUpdateResp::New() const {
  return new IMGroupMemberInfoUpdateResp;
}

void IMGroupMemberInfoUpdateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInfoUpdateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(member_id_, creator_id_);
    ZR_(group_id_, result_code_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInfoUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInfoUpdateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectTag(48)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 6;
      case 6: {
        if (tag == 48) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // optional string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInfoUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInfoUpdateResp)
  return false;
#undef DO_
}

void IMGroupMemberInfoUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInfoUpdateResp)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required uint32 creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->creator_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  // required uint32 result_code = 6;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result_code(), output);
  }

  // optional string reason = 7;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInfoUpdateResp)
}

int IMGroupMemberInfoUpdateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 result_code = 6;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInfoUpdateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInfoUpdateResp*>(&from));
}

void IMGroupMemberInfoUpdateResp::MergeFrom(const IMGroupMemberInfoUpdateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInfoUpdateResp::CopyFrom(const IMGroupMemberInfoUpdateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInfoUpdateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void IMGroupMemberInfoUpdateResp::Swap(IMGroupMemberInfoUpdateResp* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(name_, other->name_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInfoUpdateResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberInfoUpdateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberForbiddenReq::kCreatorIdFieldNumber;
const int IMGroupMemberForbiddenReq::kMemberIdFieldNumber;
const int IMGroupMemberForbiddenReq::kGroupIdFieldNumber;
const int IMGroupMemberForbiddenReq::kStateFieldNumber;
const int IMGroupMemberForbiddenReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberForbiddenReq::IMGroupMemberForbiddenReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberForbiddenReq)
}

void IMGroupMemberForbiddenReq::InitAsDefaultInstance() {
}

IMGroupMemberForbiddenReq::IMGroupMemberForbiddenReq(const IMGroupMemberForbiddenReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberForbiddenReq)
}

void IMGroupMemberForbiddenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  member_id_ = 0u;
  group_id_ = 0u;
  state_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberForbiddenReq::~IMGroupMemberForbiddenReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberForbiddenReq)
  SharedDtor();
}

void IMGroupMemberForbiddenReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberForbiddenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberForbiddenReq& IMGroupMemberForbiddenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberForbiddenReq* IMGroupMemberForbiddenReq::default_instance_ = NULL;

IMGroupMemberForbiddenReq* IMGroupMemberForbiddenReq::New() const {
  return new IMGroupMemberForbiddenReq;
}

void IMGroupMemberForbiddenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberForbiddenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(creator_id_, state_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberForbiddenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberForbiddenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required uint32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberForbiddenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberForbiddenReq)
  return false;
#undef DO_
}

void IMGroupMemberForbiddenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberForbiddenReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_id(), output);
  }

  // required uint32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  // required uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberForbiddenReq)
}

int IMGroupMemberForbiddenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberForbiddenReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberForbiddenReq*>(&from));
}

void IMGroupMemberForbiddenReq::MergeFrom(const IMGroupMemberForbiddenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberForbiddenReq::CopyFrom(const IMGroupMemberForbiddenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberForbiddenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupMemberForbiddenReq::Swap(IMGroupMemberForbiddenReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(state_, other->state_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberForbiddenReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberForbiddenReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberForbiddenResp::kMemberIdFieldNumber;
const int IMGroupMemberForbiddenResp::kMemberNameFieldNumber;
const int IMGroupMemberForbiddenResp::kCreatorIdFieldNumber;
const int IMGroupMemberForbiddenResp::kGroupIdFieldNumber;
const int IMGroupMemberForbiddenResp::kStateFieldNumber;
const int IMGroupMemberForbiddenResp::kMemberListFieldNumber;
const int IMGroupMemberForbiddenResp::kResultCodeFieldNumber;
const int IMGroupMemberForbiddenResp::kReasonFieldNumber;
const int IMGroupMemberForbiddenResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberForbiddenResp::IMGroupMemberForbiddenResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberForbiddenResp)
}

void IMGroupMemberForbiddenResp::InitAsDefaultInstance() {
}

IMGroupMemberForbiddenResp::IMGroupMemberForbiddenResp(const IMGroupMemberForbiddenResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberForbiddenResp)
}

void IMGroupMemberForbiddenResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = 0u;
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_ = 0u;
  group_id_ = 0u;
  state_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberForbiddenResp::~IMGroupMemberForbiddenResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberForbiddenResp)
  SharedDtor();
}

void IMGroupMemberForbiddenResp::SharedDtor() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberForbiddenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberForbiddenResp& IMGroupMemberForbiddenResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberForbiddenResp* IMGroupMemberForbiddenResp::default_instance_ = NULL;

IMGroupMemberForbiddenResp* IMGroupMemberForbiddenResp::New() const {
  return new IMGroupMemberForbiddenResp;
}

void IMGroupMemberForbiddenResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberForbiddenResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(member_id_, state_);
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        member_name_->clear();
      }
    }
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberForbiddenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberForbiddenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member_name;
        break;
      }

      // required string member_name = 2;
      case 2: {
        if (tag == 18) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 6;
      case 6: {
        if (tag == 48) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_member_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_list;
        if (input->ExpectTag(56)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 7;
      case 7: {
        if (tag == 56) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberForbiddenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberForbiddenResp)
  return false;
#undef DO_
}

void IMGroupMemberForbiddenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberForbiddenResp)
  // required uint32 member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // required string member_name = 2;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->member_name(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // required uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  // repeated uint32 member_list = 6;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->member_list(i), output);
  }

  // required uint32 result_code = 7;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->result_code(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberForbiddenResp)
}

int IMGroupMemberForbiddenResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required string member_name = 2;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 result_code = 7;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 member_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberForbiddenResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberForbiddenResp*>(&from));
}

void IMGroupMemberForbiddenResp::MergeFrom(const IMGroupMemberForbiddenResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberForbiddenResp::CopyFrom(const IMGroupMemberForbiddenResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberForbiddenResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void IMGroupMemberForbiddenResp::Swap(IMGroupMemberForbiddenResp* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(member_name_, other->member_name_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(state_, other->state_);
    member_list_.Swap(&other->member_list_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberForbiddenResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberForbiddenResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupBaseInfoAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupBaseInfoAlterNotify::kGroupIdFieldNumber;
const int IMGroupBaseInfoAlterNotify::kGroupNameFieldNumber;
const int IMGroupBaseInfoAlterNotify::kGroupDescrpFieldNumber;
const int IMGroupBaseInfoAlterNotify::kGroupPortraitFieldNumber;
const int IMGroupBaseInfoAlterNotify::kForbiddenFieldNumber;
const int IMGroupBaseInfoAlterNotify::kCreatorIdFieldNumber;
const int IMGroupBaseInfoAlterNotify::kMemberListFieldNumber;
const int IMGroupBaseInfoAlterNotify::kUserIdFieldNumber;
const int IMGroupBaseInfoAlterNotify::kUserNameFieldNumber;
const int IMGroupBaseInfoAlterNotify::kCreatorNameFieldNumber;
const int IMGroupBaseInfoAlterNotify::kGroupTypeFieldNumber;
#endif  // !_MSC_VER

IMGroupBaseInfoAlterNotify::IMGroupBaseInfoAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupBaseInfoAlterNotify)
}

void IMGroupBaseInfoAlterNotify::InitAsDefaultInstance() {
}

IMGroupBaseInfoAlterNotify::IMGroupBaseInfoAlterNotify(const IMGroupBaseInfoAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupBaseInfoAlterNotify)
}

void IMGroupBaseInfoAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forbidden_ = 0u;
  creator_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupBaseInfoAlterNotify::~IMGroupBaseInfoAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupBaseInfoAlterNotify)
  SharedDtor();
}

void IMGroupBaseInfoAlterNotify::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupBaseInfoAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupBaseInfoAlterNotify& IMGroupBaseInfoAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupBaseInfoAlterNotify* IMGroupBaseInfoAlterNotify::default_instance_ = NULL;

IMGroupBaseInfoAlterNotify* IMGroupBaseInfoAlterNotify::New() const {
  return new IMGroupBaseInfoAlterNotify;
}

void IMGroupBaseInfoAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupBaseInfoAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(notify_type_, group_id_);
    ZR_(forbidden_, creator_id_);
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_group_descrp()) {
      if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_descrp_->clear();
      }
    }
    if (has_group_portrait()) {
      if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_portrait_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3072) {
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    group_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  user_id_.Clear();
  user_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupBaseInfoAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupBaseInfoAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // required string group_name = 3;
      case 3: {
        if (tag == 26) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_descrp;
        break;
      }

      // required string group_descrp = 4;
      case 4: {
        if (tag == 34) {
         parse_group_descrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_descrp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_portrait;
        break;
      }

      // required string group_portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_group_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forbidden;
        break;
      }

      // required uint32 forbidden = 6;
      case 6: {
        if (tag == 48) {
         parse_forbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidden_)));
          set_has_forbidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 7;
      case 7: {
        if (tag == 56) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        if (input->ExpectTag(72)) goto parse_user_id;
        break;
      }

      // repeated uint32 user_id = 9;
      case 9: {
        if (tag == 72) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_user_id())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_id;
        if (input->ExpectTag(82)) goto parse_user_name;
        break;
      }

      // repeated string user_name = 10;
      case 10: {
        if (tag == 82) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_user_name;
        if (input->ExpectTag(90)) goto parse_creator_name;
        break;
      }

      // optional string creator_name = 11;
      case 11: {
        if (tag == 90) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_group_type;
        break;
      }

      // optional uint32 group_type = 12;
      case 12: {
        if (tag == 96) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupBaseInfoAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupBaseInfoAlterNotify)
  return false;
#undef DO_
}

void IMGroupBaseInfoAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupBaseInfoAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // required string group_descrp = 4;
  if (has_group_descrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_descrp(), output);
  }

  // required string group_portrait = 5;
  if (has_group_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_portrait(), output);
  }

  // required uint32 forbidden = 6;
  if (has_forbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forbidden(), output);
  }

  // required uint32 creator_id = 7;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->creator_id(), output);
  }

  // repeated uint32 member_list = 8;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->member_list(i), output);
  }

  // repeated uint32 user_id = 9;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->user_id(i), output);
  }

  // repeated string user_name = 10;
  for (int i = 0; i < this->user_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->user_name(i), output);
  }

  // optional string creator_name = 11;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->creator_name(), output);
  }

  // optional uint32 group_type = 12;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupBaseInfoAlterNotify)
}

int IMGroupBaseInfoAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_descrp = 4;
    if (has_group_descrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_descrp());
    }

    // required string group_portrait = 5;
    if (has_group_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_portrait());
    }

    // required uint32 forbidden = 6;
    if (has_forbidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidden());
    }

    // required uint32 creator_id = 7;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string creator_name = 11;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional uint32 group_type = 12;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_type());
    }

  }
  // repeated uint32 member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  // repeated uint32 user_id = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  // repeated string user_name = 10;
  total_size += 1 * this->user_name_size();
  for (int i = 0; i < this->user_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupBaseInfoAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupBaseInfoAlterNotify*>(&from));
}

void IMGroupBaseInfoAlterNotify::MergeFrom(const IMGroupBaseInfoAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  user_id_.MergeFrom(from.user_id_);
  user_name_.MergeFrom(from.user_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_descrp()) {
      set_group_descrp(from.group_descrp());
    }
    if (from.has_group_portrait()) {
      set_group_portrait(from.group_portrait());
    }
    if (from.has_forbidden()) {
      set_forbidden(from.forbidden());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupBaseInfoAlterNotify::CopyFrom(const IMGroupBaseInfoAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupBaseInfoAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupBaseInfoAlterNotify::Swap(IMGroupBaseInfoAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_descrp_, other->group_descrp_);
    std::swap(group_portrait_, other->group_portrait_);
    std::swap(forbidden_, other->forbidden_);
    std::swap(creator_id_, other->creator_id_);
    member_list_.Swap(&other->member_list_);
    user_id_.Swap(&other->user_id_);
    user_name_.Swap(&other->user_name_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(group_type_, other->group_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupBaseInfoAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupBaseInfoAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberListAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupMemberListAlterNotify::kUserIdFieldNumber;
const int IMGroupMemberListAlterNotify::kUserNameFieldNumber;
const int IMGroupMemberListAlterNotify::kMemberListFieldNumber;
const int IMGroupMemberListAlterNotify::kCreatorIdFieldNumber;
const int IMGroupMemberListAlterNotify::kGroupIdFieldNumber;
const int IMGroupMemberListAlterNotify::kGroupNameFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberListAlterNotify::IMGroupMemberListAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberListAlterNotify)
}

void IMGroupMemberListAlterNotify::InitAsDefaultInstance() {
}

IMGroupMemberListAlterNotify::IMGroupMemberListAlterNotify(const IMGroupMemberListAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberListAlterNotify)
}

void IMGroupMemberListAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  creator_id_ = 0u;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberListAlterNotify::~IMGroupMemberListAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberListAlterNotify)
  SharedDtor();
}

void IMGroupMemberListAlterNotify::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberListAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberListAlterNotify& IMGroupMemberListAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberListAlterNotify* IMGroupMemberListAlterNotify::default_instance_ = NULL;

IMGroupMemberListAlterNotify* IMGroupMemberListAlterNotify::New() const {
  return new IMGroupMemberListAlterNotify;
}

void IMGroupMemberListAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberListAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 113) {
    ZR_(notify_type_, creator_id_);
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_id_.Clear();
  user_name_.Clear();
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberListAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberListAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // repeated uint32 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // repeated string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        if (input->ExpectTag(32)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 4;
      case 4: {
        if (tag == 32) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_member_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_list;
        if (input->ExpectTag(40)) goto parse_creator_id;
        break;
      }

      // optional uint32 creator_id = 5;
      case 5: {
        if (tag == 40) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 6;
      case 6: {
        if (tag == 48) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_name;
        break;
      }

      // optional string group_name = 7;
      case 7: {
        if (tag == 58) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberListAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberListAlterNotify)
  return false;
#undef DO_
}

void IMGroupMemberListAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberListAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // repeated uint32 user_id = 2;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id(i), output);
  }

  // repeated string user_name = 3;
  for (int i = 0; i < this->user_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(i), output);
  }

  // repeated uint32 member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->member_list(i), output);
  }

  // optional uint32 creator_id = 5;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->creator_id(), output);
  }

  // optional uint32 group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_id(), output);
  }

  // optional string group_name = 7;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberListAlterNotify)
}

int IMGroupMemberListAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // optional uint32 creator_id = 5;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // optional uint32 group_id = 6;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional string group_name = 7;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  // repeated uint32 user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  // repeated string user_name = 3;
  total_size += 1 * this->user_name_size();
  for (int i = 0; i < this->user_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name(i));
  }

  // repeated uint32 member_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberListAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberListAlterNotify*>(&from));
}

void IMGroupMemberListAlterNotify::MergeFrom(const IMGroupMemberListAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  user_name_.MergeFrom(from.user_name_);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberListAlterNotify::CopyFrom(const IMGroupMemberListAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberListAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMGroupMemberListAlterNotify::Swap(IMGroupMemberListAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    user_id_.Swap(&other->user_id_);
    user_name_.Swap(&other->user_name_);
    member_list_.Swap(&other->member_list_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberListAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupMemberListAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMMemberBaseInfoAlterNotify::kNotifyTypeFieldNumber;
const int IMMemberBaseInfoAlterNotify::kGroupIdFieldNumber;
const int IMMemberBaseInfoAlterNotify::kCreatorIdFieldNumber;
const int IMMemberBaseInfoAlterNotify::kUserIdFieldNumber;
const int IMMemberBaseInfoAlterNotify::kNameFieldNumber;
const int IMMemberBaseInfoAlterNotify::kDegreeFieldNumber;
const int IMMemberBaseInfoAlterNotify::kForbiddenFieldNumber;
const int IMMemberBaseInfoAlterNotify::kMemberListFieldNumber;
#endif  // !_MSC_VER

IMMemberBaseInfoAlterNotify::IMMemberBaseInfoAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMMemberBaseInfoAlterNotify)
}

void IMMemberBaseInfoAlterNotify::InitAsDefaultInstance() {
}

IMMemberBaseInfoAlterNotify::IMMemberBaseInfoAlterNotify(const IMMemberBaseInfoAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMMemberBaseInfoAlterNotify)
}

void IMMemberBaseInfoAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0u;
  forbidden_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMemberBaseInfoAlterNotify::~IMMemberBaseInfoAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMMemberBaseInfoAlterNotify)
  SharedDtor();
}

void IMMemberBaseInfoAlterNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMemberBaseInfoAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMemberBaseInfoAlterNotify& IMMemberBaseInfoAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMMemberBaseInfoAlterNotify* IMMemberBaseInfoAlterNotify::default_instance_ = NULL;

IMMemberBaseInfoAlterNotify* IMMemberBaseInfoAlterNotify::New() const {
  return new IMMemberBaseInfoAlterNotify;
}

void IMMemberBaseInfoAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMMemberBaseInfoAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(notify_type_, user_id_);
    ZR_(degree_, forbidden_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMMemberBaseInfoAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMMemberBaseInfoAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_degree;
        break;
      }

      // required uint32 degree = 6;
      case 6: {
        if (tag == 48) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_forbidden;
        break;
      }

      // required uint32 forbidden = 7;
      case 7: {
        if (tag == 56) {
         parse_forbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidden_)));
          set_has_forbidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMMemberBaseInfoAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMMemberBaseInfoAlterNotify)
  return false;
#undef DO_
}

void IMMemberBaseInfoAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMMemberBaseInfoAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required uint32 degree = 6;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->degree(), output);
  }

  // required uint32 forbidden = 7;
  if (has_forbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->forbidden(), output);
  }

  // repeated uint32 member_list = 8;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->member_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMMemberBaseInfoAlterNotify)
}

int IMMemberBaseInfoAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 degree = 6;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // required uint32 forbidden = 7;
    if (has_forbidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidden());
    }

  }
  // repeated uint32 member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMemberBaseInfoAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMemberBaseInfoAlterNotify*>(&from));
}

void IMMemberBaseInfoAlterNotify::MergeFrom(const IMMemberBaseInfoAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_forbidden()) {
      set_forbidden(from.forbidden());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMMemberBaseInfoAlterNotify::CopyFrom(const IMMemberBaseInfoAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMemberBaseInfoAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMMemberBaseInfoAlterNotify::Swap(IMMemberBaseInfoAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(degree_, other->degree_);
    std::swap(forbidden_, other->forbidden_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMMemberBaseInfoAlterNotify::GetTypeName() const {
  return "IM.Group.IMMemberBaseInfoAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberIdentityAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kGroupIdFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kCreatorIdFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kUserIdFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kUserNameFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kDegreeFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kMemberListFieldNumber;
const int IMGroupMemberIdentityAlterNotify::kGroupNameFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberIdentityAlterNotify::IMGroupMemberIdentityAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberIdentityAlterNotify)
}

void IMGroupMemberIdentityAlterNotify::InitAsDefaultInstance() {
}

IMGroupMemberIdentityAlterNotify::IMGroupMemberIdentityAlterNotify(const IMGroupMemberIdentityAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberIdentityAlterNotify)
}

void IMGroupMemberIdentityAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  user_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  degree_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberIdentityAlterNotify::~IMGroupMemberIdentityAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberIdentityAlterNotify)
  SharedDtor();
}

void IMGroupMemberIdentityAlterNotify::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberIdentityAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberIdentityAlterNotify& IMGroupMemberIdentityAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberIdentityAlterNotify* IMGroupMemberIdentityAlterNotify::default_instance_ = NULL;

IMGroupMemberIdentityAlterNotify* IMGroupMemberIdentityAlterNotify::New() const {
  return new IMGroupMemberIdentityAlterNotify;
}

void IMGroupMemberIdentityAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberIdentityAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(notify_type_, user_id_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    degree_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberIdentityAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberIdentityAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_name;
        break;
      }

      // required string user_name = 5;
      case 5: {
        if (tag == 42) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_degree;
        break;
      }

      // required uint32 degree = 6;
      case 6: {
        if (tag == 48) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 7;
      case 7: {
        if (tag == 56) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_member_list())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_list;
        if (input->ExpectTag(66)) goto parse_group_name;
        break;
      }

      // optional string group_name = 8;
      case 8: {
        if (tag == 66) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberIdentityAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberIdentityAlterNotify)
  return false;
#undef DO_
}

void IMGroupMemberIdentityAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberIdentityAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required uint32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(), output);
  }

  // required string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_name(), output);
  }

  // required uint32 degree = 6;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->degree(), output);
  }

  // repeated uint32 member_list = 7;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->member_list(i), output);
  }

  // optional string group_name = 8;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->group_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberIdentityAlterNotify)
}

int IMGroupMemberIdentityAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string user_name = 5;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 degree = 6;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // optional string group_name = 8;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  // repeated uint32 member_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberIdentityAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberIdentityAlterNotify*>(&from));
}

void IMGroupMemberIdentityAlterNotify::MergeFrom(const IMGroupMemberIdentityAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberIdentityAlterNotify::CopyFrom(const IMGroupMemberIdentityAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberIdentityAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMGroupMemberIdentityAlterNotify::Swap(IMGroupMemberIdentityAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(degree_, other->degree_);
    member_list_.Swap(&other->member_list_);
    std::swap(group_name_, other->group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberIdentityAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupMemberIdentityAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupSetAnnounceAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kGroupIdFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kCreatorIdFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kCreatorNameFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kAnnounceFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kUpdateTimeFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kGroupNameFieldNumber;
const int IMGroupSetAnnounceAlterNotify::kMemberListFieldNumber;
#endif  // !_MSC_VER

IMGroupSetAnnounceAlterNotify::IMGroupSetAnnounceAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupSetAnnounceAlterNotify)
}

void IMGroupSetAnnounceAlterNotify::InitAsDefaultInstance() {
}

IMGroupSetAnnounceAlterNotify::IMGroupSetAnnounceAlterNotify(const IMGroupSetAnnounceAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupSetAnnounceAlterNotify)
}

void IMGroupSetAnnounceAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupSetAnnounceAlterNotify::~IMGroupSetAnnounceAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupSetAnnounceAlterNotify)
  SharedDtor();
}

void IMGroupSetAnnounceAlterNotify::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupSetAnnounceAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupSetAnnounceAlterNotify& IMGroupSetAnnounceAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupSetAnnounceAlterNotify* IMGroupSetAnnounceAlterNotify::default_instance_ = NULL;

IMGroupSetAnnounceAlterNotify* IMGroupSetAnnounceAlterNotify::New() const {
  return new IMGroupSetAnnounceAlterNotify;
}

void IMGroupSetAnnounceAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupSetAnnounceAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(notify_type_, group_id_);
    ZR_(creator_id_, update_time_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        announce_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupSetAnnounceAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupSetAnnounceAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 4;
      case 4: {
        if (tag == 34) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_announce;
        break;
      }

      // required string announce = 5;
      case 5: {
        if (tag == 42) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 6;
      case 6: {
        if (tag == 48) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_name;
        break;
      }

      // optional string group_name = 7;
      case 7: {
        if (tag == 58) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupSetAnnounceAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupSetAnnounceAlterNotify)
  return false;
#undef DO_
}

void IMGroupSetAnnounceAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupSetAnnounceAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required string creator_name = 4;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator_name(), output);
  }

  // required string announce = 5;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->announce(), output);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }

  // optional string group_name = 7;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_name(), output);
  }

  // repeated uint32 member_list = 8;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->member_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupSetAnnounceAlterNotify)
}

int IMGroupSetAnnounceAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required string creator_name = 4;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required string announce = 5;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announce());
    }

    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // optional string group_name = 7;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  // repeated uint32 member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupSetAnnounceAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupSetAnnounceAlterNotify*>(&from));
}

void IMGroupSetAnnounceAlterNotify::MergeFrom(const IMGroupSetAnnounceAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupSetAnnounceAlterNotify::CopyFrom(const IMGroupSetAnnounceAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupSetAnnounceAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMGroupSetAnnounceAlterNotify::Swap(IMGroupSetAnnounceAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(announce_, other->announce_);
    std::swap(update_time_, other->update_time_);
    std::swap(group_name_, other->group_name_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupSetAnnounceAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupSetAnnounceAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupManagementModifyAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupManagementModifyAlterNotify::kGroupIdFieldNumber;
const int IMGroupManagementModifyAlterNotify::kCreatorIdFieldNumber;
const int IMGroupManagementModifyAlterNotify::kCreatorNameFieldNumber;
const int IMGroupManagementModifyAlterNotify::kGroupNameFieldNumber;
const int IMGroupManagementModifyAlterNotify::kNewManagerIdFieldNumber;
const int IMGroupManagementModifyAlterNotify::kNewManagerNameFieldNumber;
const int IMGroupManagementModifyAlterNotify::kMemberListFieldNumber;
#endif  // !_MSC_VER

IMGroupManagementModifyAlterNotify::IMGroupManagementModifyAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupManagementModifyAlterNotify)
}

void IMGroupManagementModifyAlterNotify::InitAsDefaultInstance() {
}

IMGroupManagementModifyAlterNotify::IMGroupManagementModifyAlterNotify(const IMGroupManagementModifyAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupManagementModifyAlterNotify)
}

void IMGroupManagementModifyAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_manager_id_ = 0u;
  new_manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupManagementModifyAlterNotify::~IMGroupManagementModifyAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupManagementModifyAlterNotify)
  SharedDtor();
}

void IMGroupManagementModifyAlterNotify::SharedDtor() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (new_manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_manager_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupManagementModifyAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupManagementModifyAlterNotify& IMGroupManagementModifyAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupManagementModifyAlterNotify* IMGroupManagementModifyAlterNotify::default_instance_ = NULL;

IMGroupManagementModifyAlterNotify* IMGroupManagementModifyAlterNotify::New() const {
  return new IMGroupManagementModifyAlterNotify;
}

void IMGroupManagementModifyAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupManagementModifyAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(notify_type_, group_id_);
    ZR_(creator_id_, new_manager_id_);
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        creator_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_new_manager_name()) {
      if (new_manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_manager_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupManagementModifyAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupManagementModifyAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 4;
      case 4: {
        if (tag == 34) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_group_name;
        break;
      }

      // required string group_name = 5;
      case 5: {
        if (tag == 42) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_new_manager_id;
        break;
      }

      // required uint32 new_manager_id = 6;
      case 6: {
        if (tag == 48) {
         parse_new_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_manager_id_)));
          set_has_new_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_manager_name;
        break;
      }

      // required string new_manager_name = 7;
      case 7: {
        if (tag == 58) {
         parse_new_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 8;
      case 8: {
        if (tag == 64) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_member_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupManagementModifyAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupManagementModifyAlterNotify)
  return false;
#undef DO_
}

void IMGroupManagementModifyAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupManagementModifyAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required string creator_name = 4;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator_name(), output);
  }

  // required string group_name = 5;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->group_name(), output);
  }

  // required uint32 new_manager_id = 6;
  if (has_new_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->new_manager_id(), output);
  }

  // required string new_manager_name = 7;
  if (has_new_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->new_manager_name(), output);
  }

  // repeated uint32 member_list = 8;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->member_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupManagementModifyAlterNotify)
}

int IMGroupManagementModifyAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required string creator_name = 4;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // required string group_name = 5;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required uint32 new_manager_id = 6;
    if (has_new_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_manager_id());
    }

    // required string new_manager_name = 7;
    if (has_new_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_manager_name());
    }

  }
  // repeated uint32 member_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupManagementModifyAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupManagementModifyAlterNotify*>(&from));
}

void IMGroupManagementModifyAlterNotify::MergeFrom(const IMGroupManagementModifyAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_new_manager_id()) {
      set_new_manager_id(from.new_manager_id());
    }
    if (from.has_new_manager_name()) {
      set_new_manager_name(from.new_manager_name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupManagementModifyAlterNotify::CopyFrom(const IMGroupManagementModifyAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupManagementModifyAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMGroupManagementModifyAlterNotify::Swap(IMGroupManagementModifyAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(group_name_, other->group_name_);
    std::swap(new_manager_id_, other->new_manager_id_);
    std::swap(new_manager_name_, other->new_manager_name_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupManagementModifyAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupManagementModifyAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupAtAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupAtAlterNotify::kGroupIdFieldNumber;
const int IMGroupAtAlterNotify::kFromUserIdFieldNumber;
const int IMGroupAtAlterNotify::kFromUserNameFieldNumber;
const int IMGroupAtAlterNotify::kGroupAtTypeFieldNumber;
const int IMGroupAtAlterNotify::kPeerIdFieldNumber;
const int IMGroupAtAlterNotify::kGroupNameFieldNumber;
const int IMGroupAtAlterNotify::kMsgIdFieldNumber;
#endif  // !_MSC_VER

IMGroupAtAlterNotify::IMGroupAtAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupAtAlterNotify)
}

void IMGroupAtAlterNotify::InitAsDefaultInstance() {
}

IMGroupAtAlterNotify::IMGroupAtAlterNotify(const IMGroupAtAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupAtAlterNotify)
}

void IMGroupAtAlterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  from_user_id_ = 0u;
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_at_type_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupAtAlterNotify::~IMGroupAtAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupAtAlterNotify)
  SharedDtor();
}

void IMGroupAtAlterNotify::SharedDtor() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupAtAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupAtAlterNotify& IMGroupAtAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupAtAlterNotify* IMGroupAtAlterNotify::default_instance_ = NULL;

IMGroupAtAlterNotify* IMGroupAtAlterNotify::New() const {
  return new IMGroupAtAlterNotify;
}

void IMGroupAtAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupAtAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(notify_type_, group_id_);
    ZR_(from_user_id_, group_at_type_);
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_user_name_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    msg_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  peer_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupAtAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupAtAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_user_id;
        break;
      }

      // required uint32 from_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_from_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from_user_name;
        break;
      }

      // required string from_user_name = 4;
      case 4: {
        if (tag == 34) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_at_type;
        break;
      }

      // required uint32 group_at_type = 5;
      case 5: {
        if (tag == 40) {
         parse_group_at_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_at_type_)));
          set_has_group_at_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_peer_id;
        break;
      }

      // repeated uint32 peer_id = 6;
      case 6: {
        if (tag == 48) {
         parse_peer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_peer_id())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_peer_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_peer_id;
        if (input->ExpectTag(58)) goto parse_group_name;
        break;
      }

      // optional string group_name = 7;
      case 7: {
        if (tag == 58) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msg_id;
        break;
      }

      // optional uint32 msg_id = 8;
      case 8: {
        if (tag == 64) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupAtAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupAtAlterNotify)
  return false;
#undef DO_
}

void IMGroupAtAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupAtAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 from_user_id = 3;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_user_id(), output);
  }

  // required string from_user_name = 4;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_user_name(), output);
  }

  // required uint32 group_at_type = 5;
  if (has_group_at_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_at_type(), output);
  }

  // repeated uint32 peer_id = 6;
  for (int i = 0; i < this->peer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->peer_id(i), output);
  }

  // optional string group_name = 7;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->group_name(), output);
  }

  // optional uint32 msg_id = 8;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msg_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupAtAlterNotify)
}

int IMGroupAtAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 from_user_id = 3;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required string from_user_name = 4;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // required uint32 group_at_type = 5;
    if (has_group_at_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_at_type());
    }

    // optional string group_name = 7;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 msg_id = 8;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

  }
  // repeated uint32 peer_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->peer_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->peer_id(i));
    }
    total_size += 1 * this->peer_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupAtAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupAtAlterNotify*>(&from));
}

void IMGroupAtAlterNotify::MergeFrom(const IMGroupAtAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  peer_id_.MergeFrom(from.peer_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_group_at_type()) {
      set_group_at_type(from.group_at_type());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupAtAlterNotify::CopyFrom(const IMGroupAtAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupAtAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGroupAtAlterNotify::Swap(IMGroupAtAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(group_at_type_, other->group_at_type_);
    peer_id_.Swap(&other->peer_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupAtAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupAtAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupRemoveAnnounceAlterNotify::kNotifyTypeFieldNumber;
const int IMGroupRemoveAnnounceAlterNotify::kGroupIdFieldNumber;
const int IMGroupRemoveAnnounceAlterNotify::kCreatorIdFieldNumber;
const int IMGroupRemoveAnnounceAlterNotify::kUpdateTimeFieldNumber;
const int IMGroupRemoveAnnounceAlterNotify::kMemberListFieldNumber;
#endif  // !_MSC_VER

IMGroupRemoveAnnounceAlterNotify::IMGroupRemoveAnnounceAlterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupRemoveAnnounceAlterNotify)
}

void IMGroupRemoveAnnounceAlterNotify::InitAsDefaultInstance() {
}

IMGroupRemoveAnnounceAlterNotify::IMGroupRemoveAnnounceAlterNotify(const IMGroupRemoveAnnounceAlterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupRemoveAnnounceAlterNotify)
}

void IMGroupRemoveAnnounceAlterNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_type_ = 0u;
  group_id_ = 0u;
  creator_id_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupRemoveAnnounceAlterNotify::~IMGroupRemoveAnnounceAlterNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupRemoveAnnounceAlterNotify)
  SharedDtor();
}

void IMGroupRemoveAnnounceAlterNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupRemoveAnnounceAlterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupRemoveAnnounceAlterNotify& IMGroupRemoveAnnounceAlterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupRemoveAnnounceAlterNotify* IMGroupRemoveAnnounceAlterNotify::default_instance_ = NULL;

IMGroupRemoveAnnounceAlterNotify* IMGroupRemoveAnnounceAlterNotify::New() const {
  return new IMGroupRemoveAnnounceAlterNotify;
}

void IMGroupRemoveAnnounceAlterNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupRemoveAnnounceAlterNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(notify_type_, update_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupRemoveAnnounceAlterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupRemoveAnnounceAlterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 notify_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creator_id;
        break;
      }

      // required uint32 creator_id = 3;
      case 3: {
        if (tag == 24) {
         parse_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        break;
      }

      // repeated uint32 member_list = 5;
      case 5: {
        if (tag == 40) {
         parse_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_member_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupRemoveAnnounceAlterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupRemoveAnnounceAlterNotify)
  return false;
#undef DO_
}

void IMGroupRemoveAnnounceAlterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupRemoveAnnounceAlterNotify)
  // required uint32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notify_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 creator_id = 3;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_id(), output);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  // repeated uint32 member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->member_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupRemoveAnnounceAlterNotify)
}

int IMGroupRemoveAnnounceAlterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notify_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 creator_id = 3;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  // repeated uint32 member_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_list(i));
    }
    total_size += 1 * this->member_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupRemoveAnnounceAlterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupRemoveAnnounceAlterNotify*>(&from));
}

void IMGroupRemoveAnnounceAlterNotify::MergeFrom(const IMGroupRemoveAnnounceAlterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupRemoveAnnounceAlterNotify::CopyFrom(const IMGroupRemoveAnnounceAlterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupRemoveAnnounceAlterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGroupRemoveAnnounceAlterNotify::Swap(IMGroupRemoveAnnounceAlterNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(update_time_, other->update_time_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupRemoveAnnounceAlterNotify::GetTypeName() const {
  return "IM.Group.IMGroupRemoveAnnounceAlterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInfoReq::kCreatorIdFieldNumber;
const int IMGroupMemberInfoReq::kGroupIdFieldNumber;
const int IMGroupMemberInfoReq::kMemberIdFieldNumber;
const int IMGroupMemberInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInfoReq::IMGroupMemberInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInfoReq)
}

void IMGroupMemberInfoReq::InitAsDefaultInstance() {
}

IMGroupMemberInfoReq::IMGroupMemberInfoReq(const IMGroupMemberInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInfoReq)
}

void IMGroupMemberInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  member_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInfoReq::~IMGroupMemberInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInfoReq)
  SharedDtor();
}

void IMGroupMemberInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInfoReq& IMGroupMemberInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInfoReq* IMGroupMemberInfoReq::default_instance_ = NULL;

IMGroupMemberInfoReq* IMGroupMemberInfoReq::New() const {
  return new IMGroupMemberInfoReq;
}

void IMGroupMemberInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(creator_id_, group_id_);
    member_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInfoReq)
  return false;
#undef DO_
}

void IMGroupMemberInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInfoReq)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 member_id = 3;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInfoReq)
}

int IMGroupMemberInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 member_id = 3;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInfoReq*>(&from));
}

void IMGroupMemberInfoReq::MergeFrom(const IMGroupMemberInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInfoReq::CopyFrom(const IMGroupMemberInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGroupMemberInfoReq::Swap(IMGroupMemberInfoReq* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInfoReq::GetTypeName() const {
  return "IM.Group.IMGroupMemberInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMGroupMemberInfoResp::kCreatorIdFieldNumber;
const int IMGroupMemberInfoResp::kGroupIdFieldNumber;
const int IMGroupMemberInfoResp::kMemberIdFieldNumber;
const int IMGroupMemberInfoResp::kMemberNameFieldNumber;
const int IMGroupMemberInfoResp::kMemberForbiddenFieldNumber;
const int IMGroupMemberInfoResp::kMemberDegreeFieldNumber;
const int IMGroupMemberInfoResp::kMemberTypeFieldNumber;
const int IMGroupMemberInfoResp::kMemberStatusFieldNumber;
const int IMGroupMemberInfoResp::kResultCodeFieldNumber;
const int IMGroupMemberInfoResp::kReasonFieldNumber;
const int IMGroupMemberInfoResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGroupMemberInfoResp::IMGroupMemberInfoResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Group.IMGroupMemberInfoResp)
}

void IMGroupMemberInfoResp::InitAsDefaultInstance() {
}

IMGroupMemberInfoResp::IMGroupMemberInfoResp(const IMGroupMemberInfoResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupMemberInfoResp)
}

void IMGroupMemberInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creator_id_ = 0u;
  group_id_ = 0u;
  member_id_ = 0u;
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_forbidden_ = 0u;
  member_degree_ = 0u;
  member_type_ = 0u;
  member_status_ = 0u;
  result_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGroupMemberInfoResp::~IMGroupMemberInfoResp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupMemberInfoResp)
  SharedDtor();
}

void IMGroupMemberInfoResp::SharedDtor() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMGroupMemberInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGroupMemberInfoResp& IMGroupMemberInfoResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eGroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eGroup_2eproto();
#endif
  return *default_instance_;
}

IMGroupMemberInfoResp* IMGroupMemberInfoResp::default_instance_ = NULL;

IMGroupMemberInfoResp* IMGroupMemberInfoResp::New() const {
  return new IMGroupMemberInfoResp;
}

void IMGroupMemberInfoResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGroupMemberInfoResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(creator_id_, group_id_);
    ZR_(member_id_, member_status_);
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        member_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    result_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMGroupMemberInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Group.IMGroupMemberInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 creator_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_id_)));
          set_has_creator_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_id;
        break;
      }

      // required uint32 member_id = 3;
      case 3: {
        if (tag == 24) {
         parse_member_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
          set_has_member_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member_name;
        break;
      }

      // required string member_name = 4;
      case 4: {
        if (tag == 34) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_forbidden;
        break;
      }

      // required uint32 member_forbidden = 5;
      case 5: {
        if (tag == 40) {
         parse_member_forbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_forbidden_)));
          set_has_member_forbidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_degree;
        break;
      }

      // required uint32 member_degree = 6;
      case 6: {
        if (tag == 48) {
         parse_member_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_degree_)));
          set_has_member_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_member_type;
        break;
      }

      // required uint32 member_type = 7;
      case 7: {
        if (tag == 56) {
         parse_member_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_type_)));
          set_has_member_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_status;
        break;
      }

      // required uint32 member_status = 8;
      case 8: {
        if (tag == 64) {
         parse_member_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_status_)));
          set_has_member_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 9;
      case 9: {
        if (tag == 72) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reason;
        break;
      }

      // optional string reason = 10;
      case 10: {
        if (tag == 82) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Group.IMGroupMemberInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Group.IMGroupMemberInfoResp)
  return false;
#undef DO_
}

void IMGroupMemberInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Group.IMGroupMemberInfoResp)
  // required uint32 creator_id = 1;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->creator_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 member_id = 3;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_id(), output);
  }

  // required string member_name = 4;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->member_name(), output);
  }

  // required uint32 member_forbidden = 5;
  if (has_member_forbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_forbidden(), output);
  }

  // required uint32 member_degree = 6;
  if (has_member_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->member_degree(), output);
  }

  // required uint32 member_type = 7;
  if (has_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->member_type(), output);
  }

  // required uint32 member_status = 8;
  if (has_member_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->member_status(), output);
  }

  // required uint32 result_code = 9;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->result_code(), output);
  }

  // optional string reason = 10;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reason(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Group.IMGroupMemberInfoResp)
}

int IMGroupMemberInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 creator_id = 1;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 member_id = 3;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_id());
    }

    // required string member_name = 4;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }

    // required uint32 member_forbidden = 5;
    if (has_member_forbidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_forbidden());
    }

    // required uint32 member_degree = 6;
    if (has_member_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_degree());
    }

    // required uint32 member_type = 7;
    if (has_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_type());
    }

    // required uint32 member_status = 8;
    if (has_member_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 result_code = 9;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string reason = 10;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupMemberInfoResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGroupMemberInfoResp*>(&from));
}

void IMGroupMemberInfoResp::MergeFrom(const IMGroupMemberInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_member_id()) {
      set_member_id(from.member_id());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_member_forbidden()) {
      set_member_forbidden(from.member_forbidden());
    }
    if (from.has_member_degree()) {
      set_member_degree(from.member_degree());
    }
    if (from.has_member_type()) {
      set_member_type(from.member_type());
    }
    if (from.has_member_status()) {
      set_member_status(from.member_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMGroupMemberInfoResp::CopyFrom(const IMGroupMemberInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupMemberInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void IMGroupMemberInfoResp::Swap(IMGroupMemberInfoResp* other) {
  if (other != this) {
    std::swap(creator_id_, other->creator_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(member_name_, other->member_name_);
    std::swap(member_forbidden_, other->member_forbidden_);
    std::swap(member_degree_, other->member_degree_);
    std::swap(member_type_, other->member_type_);
    std::swap(member_status_, other->member_status_);
    std::swap(result_code_, other->result_code_);
    std::swap(reason_, other->reason_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMGroupMemberInfoResp::GetTypeName() const {
  return "IM.Group.IMGroupMemberInfoResp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)
