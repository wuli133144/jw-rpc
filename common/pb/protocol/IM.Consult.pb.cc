// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Consult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Consult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Consult {

void protobuf_ShutdownFile_IM_2eConsult_2eproto() {
  delete IMConsultData::default_instance_;
  delete IMConsultDataAck::default_instance_;
  delete IMConsultGetTeacherInfoReq::default_instance_;
  delete IMConsultGetTeacherInfoResp::default_instance_;
  delete IMConsultGetStudentStateReq::default_instance_;
  delete IMConsultGetStudentStateResp::default_instance_;
  delete IMConsultCreatReq::default_instance_;
  delete IMConsultCreatResp::default_instance_;
  delete IMConsultCloseReq::default_instance_;
  delete IMConsultCloseResp::default_instance_;
  delete IMConsultCreateAnnounce::default_instance_;
  delete IMConsultCloseAnnounce::default_instance_;
  delete IMConsultStudentInQueueReq::default_instance_;
  delete IMConsultStudentInQueueResp::default_instance_;
  delete IMConsultTeacherOfflineInform::default_instance_;
  delete IMConsultStudentOutQueueReq::default_instance_;
  delete IMConsultStudentOutQueueResp::default_instance_;
  delete IMConsultTeacherModifyStateReq::default_instance_;
  delete IMConsultTeacherModifyStateResp::default_instance_;
  delete IMConsultGetTeacherStateReq::default_instance_;
  delete IMConsultGetTeacherStateResp::default_instance_;
  delete IMConsultTeacherModifyTopReq::default_instance_;
  delete IMConsultTeacherModifyTopResp::default_instance_;
  delete IMConsultStudentGetStateReq::default_instance_;
  delete IMConsultStudentGetStateResp::default_instance_;
  delete IMConsultGetStudentConsultTeacherListReq::default_instance_;
  delete IMConsultGetStudentConsultTeacherListResp::default_instance_;
  delete IMConsultDeliverReq::default_instance_;
  delete IMConsultDeliverResp::default_instance_;
  delete IMConsultDeliverAnnounce::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eConsult_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eConsult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMConsultData::default_instance_ = new IMConsultData();
  IMConsultDataAck::default_instance_ = new IMConsultDataAck();
  IMConsultGetTeacherInfoReq::default_instance_ = new IMConsultGetTeacherInfoReq();
  IMConsultGetTeacherInfoResp::default_instance_ = new IMConsultGetTeacherInfoResp();
  IMConsultGetStudentStateReq::default_instance_ = new IMConsultGetStudentStateReq();
  IMConsultGetStudentStateResp::default_instance_ = new IMConsultGetStudentStateResp();
  IMConsultCreatReq::default_instance_ = new IMConsultCreatReq();
  IMConsultCreatResp::default_instance_ = new IMConsultCreatResp();
  IMConsultCloseReq::default_instance_ = new IMConsultCloseReq();
  IMConsultCloseResp::default_instance_ = new IMConsultCloseResp();
  IMConsultCreateAnnounce::default_instance_ = new IMConsultCreateAnnounce();
  IMConsultCloseAnnounce::default_instance_ = new IMConsultCloseAnnounce();
  IMConsultStudentInQueueReq::default_instance_ = new IMConsultStudentInQueueReq();
  IMConsultStudentInQueueResp::default_instance_ = new IMConsultStudentInQueueResp();
  IMConsultTeacherOfflineInform::default_instance_ = new IMConsultTeacherOfflineInform();
  IMConsultStudentOutQueueReq::default_instance_ = new IMConsultStudentOutQueueReq();
  IMConsultStudentOutQueueResp::default_instance_ = new IMConsultStudentOutQueueResp();
  IMConsultTeacherModifyStateReq::default_instance_ = new IMConsultTeacherModifyStateReq();
  IMConsultTeacherModifyStateResp::default_instance_ = new IMConsultTeacherModifyStateResp();
  IMConsultGetTeacherStateReq::default_instance_ = new IMConsultGetTeacherStateReq();
  IMConsultGetTeacherStateResp::default_instance_ = new IMConsultGetTeacherStateResp();
  IMConsultTeacherModifyTopReq::default_instance_ = new IMConsultTeacherModifyTopReq();
  IMConsultTeacherModifyTopResp::default_instance_ = new IMConsultTeacherModifyTopResp();
  IMConsultStudentGetStateReq::default_instance_ = new IMConsultStudentGetStateReq();
  IMConsultStudentGetStateResp::default_instance_ = new IMConsultStudentGetStateResp();
  IMConsultGetStudentConsultTeacherListReq::default_instance_ = new IMConsultGetStudentConsultTeacherListReq();
  IMConsultGetStudentConsultTeacherListResp::default_instance_ = new IMConsultGetStudentConsultTeacherListResp();
  IMConsultDeliverReq::default_instance_ = new IMConsultDeliverReq();
  IMConsultDeliverResp::default_instance_ = new IMConsultDeliverResp();
  IMConsultDeliverAnnounce::default_instance_ = new IMConsultDeliverAnnounce();
  IMConsultData::default_instance_->InitAsDefaultInstance();
  IMConsultDataAck::default_instance_->InitAsDefaultInstance();
  IMConsultGetTeacherInfoReq::default_instance_->InitAsDefaultInstance();
  IMConsultGetTeacherInfoResp::default_instance_->InitAsDefaultInstance();
  IMConsultGetStudentStateReq::default_instance_->InitAsDefaultInstance();
  IMConsultGetStudentStateResp::default_instance_->InitAsDefaultInstance();
  IMConsultCreatReq::default_instance_->InitAsDefaultInstance();
  IMConsultCreatResp::default_instance_->InitAsDefaultInstance();
  IMConsultCloseReq::default_instance_->InitAsDefaultInstance();
  IMConsultCloseResp::default_instance_->InitAsDefaultInstance();
  IMConsultCreateAnnounce::default_instance_->InitAsDefaultInstance();
  IMConsultCloseAnnounce::default_instance_->InitAsDefaultInstance();
  IMConsultStudentInQueueReq::default_instance_->InitAsDefaultInstance();
  IMConsultStudentInQueueResp::default_instance_->InitAsDefaultInstance();
  IMConsultTeacherOfflineInform::default_instance_->InitAsDefaultInstance();
  IMConsultStudentOutQueueReq::default_instance_->InitAsDefaultInstance();
  IMConsultStudentOutQueueResp::default_instance_->InitAsDefaultInstance();
  IMConsultTeacherModifyStateReq::default_instance_->InitAsDefaultInstance();
  IMConsultTeacherModifyStateResp::default_instance_->InitAsDefaultInstance();
  IMConsultGetTeacherStateReq::default_instance_->InitAsDefaultInstance();
  IMConsultGetTeacherStateResp::default_instance_->InitAsDefaultInstance();
  IMConsultTeacherModifyTopReq::default_instance_->InitAsDefaultInstance();
  IMConsultTeacherModifyTopResp::default_instance_->InitAsDefaultInstance();
  IMConsultStudentGetStateReq::default_instance_->InitAsDefaultInstance();
  IMConsultStudentGetStateResp::default_instance_->InitAsDefaultInstance();
  IMConsultGetStudentConsultTeacherListReq::default_instance_->InitAsDefaultInstance();
  IMConsultGetStudentConsultTeacherListResp::default_instance_->InitAsDefaultInstance();
  IMConsultDeliverReq::default_instance_->InitAsDefaultInstance();
  IMConsultDeliverResp::default_instance_->InitAsDefaultInstance();
  IMConsultDeliverAnnounce::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eConsult_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eConsult_2eproto_once_);
void protobuf_AddDesc_IM_2eConsult_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eConsult_2eproto_once_,
                 &protobuf_AddDesc_IM_2eConsult_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eConsult_2eproto {
  StaticDescriptorInitializer_IM_2eConsult_2eproto() {
    protobuf_AddDesc_IM_2eConsult_2eproto();
  }
} static_descriptor_initializer_IM_2eConsult_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMConsultData::kFromIdFieldNumber;
const int IMConsultData::kToIdFieldNumber;
const int IMConsultData::kMsgIdFieldNumber;
const int IMConsultData::kOrderIdFieldNumber;
const int IMConsultData::kConsultIdFieldNumber;
const int IMConsultData::kCreateTimeFieldNumber;
const int IMConsultData::kMsgTypeFieldNumber;
const int IMConsultData::kMsgDataFieldNumber;
const int IMConsultData::kFromSourceFieldNumber;
const int IMConsultData::kFromNameFieldNumber;
const int IMConsultData::kFromPortraitFieldNumber;
const int IMConsultData::kFromIdentityFieldNumber;
const int IMConsultData::kToIdentityFieldNumber;
const int IMConsultData::kResultFieldNumber;
const int IMConsultData::kConsultStatusFieldNumber;
const int IMConsultData::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultData::IMConsultData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultData)
}

void IMConsultData::InitAsDefaultInstance() {
}

IMConsultData::IMConsultData(const IMConsultData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultData)
}

void IMConsultData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_id_ = 0u;
  to_id_ = 0u;
  msg_id_ = 0u;
  order_id_ = 0u;
  consult_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 0u;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_source_ = 0u;
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_identity_ = 0u;
  to_identity_ = 0u;
  result_ = 0u;
  consult_status_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultData::~IMConsultData() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultData)
  SharedDtor();
}

void IMConsultData::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_name_;
  }
  if (from_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultData& IMConsultData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultData* IMConsultData::default_instance_ = NULL;

IMConsultData* IMConsultData::New() const {
  return new IMConsultData;
}

void IMConsultData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(from_id_, create_time_);
    msg_type_ = 0u;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(from_identity_, consult_status_);
    from_source_ = 0u;
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_name_->clear();
      }
    }
    if (has_from_portrait()) {
      if (from_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_portrait_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required uint32 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 6;
      case 6: {
        if (tag == 48) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_msg_type;
        break;
      }

      // required uint32 msg_type = 7;
      case 7: {
        if (tag == 56) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_from_source;
        break;
      }

      // required uint32 from_source = 9;
      case 9: {
        if (tag == 72) {
         parse_from_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_source_)));
          set_has_from_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_from_name;
        break;
      }

      // required string from_name = 10;
      case 10: {
        if (tag == 82) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_from_portrait;
        break;
      }

      // required string from_portrait = 11;
      case 11: {
        if (tag == 90) {
         parse_from_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_from_identity;
        break;
      }

      // required uint32 from_identity = 12;
      case 12: {
        if (tag == 96) {
         parse_from_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_identity_)));
          set_has_from_identity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_to_identity;
        break;
      }

      // required uint32 to_identity = 13;
      case 13: {
        if (tag == 104) {
         parse_to_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_identity_)));
          set_has_to_identity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_result;
        break;
      }

      // required uint32 result = 14;
      case 14: {
        if (tag == 112) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_consult_status;
        break;
      }

      // optional uint32 consult_status = 15;
      case 15: {
        if (tag == 120) {
         parse_consult_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_status_)));
          set_has_consult_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultData)
  return false;
#undef DO_
}

void IMConsultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultData)
  // required uint32 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_id(), output);
  }

  // required uint32 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 consult_id = 5;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_id(), output);
  }

  // required uint32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_time(), output);
  }

  // required uint32 msg_type = 7;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msg_type(), output);
  }

  // required bytes msg_data = 8;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->msg_data(), output);
  }

  // required uint32 from_source = 9;
  if (has_from_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->from_source(), output);
  }

  // required string from_name = 10;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->from_name(), output);
  }

  // required string from_portrait = 11;
  if (has_from_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->from_portrait(), output);
  }

  // required uint32 from_identity = 12;
  if (has_from_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->from_identity(), output);
  }

  // required uint32 to_identity = 13;
  if (has_to_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->to_identity(), output);
  }

  // required uint32 result = 14;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->result(), output);
  }

  // optional uint32 consult_status = 15;
  if (has_consult_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->consult_status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultData)
}

int IMConsultData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 to_id = 2;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 consult_id = 5;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 msg_type = 7;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // required bytes msg_data = 8;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 from_source = 9;
    if (has_from_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_source());
    }

    // required string from_name = 10;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // required string from_portrait = 11;
    if (has_from_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_portrait());
    }

    // required uint32 from_identity = 12;
    if (has_from_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_identity());
    }

    // required uint32 to_identity = 13;
    if (has_to_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_identity());
    }

    // required uint32 result = 14;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 consult_status = 15;
    if (has_consult_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultData*>(&from));
}

void IMConsultData::MergeFrom(const IMConsultData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_from_source()) {
      set_from_source(from.from_source());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_from_portrait()) {
      set_from_portrait(from.from_portrait());
    }
    if (from.has_from_identity()) {
      set_from_identity(from.from_identity());
    }
    if (from.has_to_identity()) {
      set_to_identity(from.to_identity());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_consult_status()) {
      set_consult_status(from.consult_status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultData::CopyFrom(const IMConsultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void IMConsultData::Swap(IMConsultData* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(from_source_, other->from_source_);
    std::swap(from_name_, other->from_name_);
    std::swap(from_portrait_, other->from_portrait_);
    std::swap(from_identity_, other->from_identity_);
    std::swap(to_identity_, other->to_identity_);
    std::swap(result_, other->result_);
    std::swap(consult_status_, other->consult_status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultData::GetTypeName() const {
  return "IM.Consult.IMConsultData";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultDataAck::kFromIdFieldNumber;
const int IMConsultDataAck::kToIdFieldNumber;
const int IMConsultDataAck::kMsgIdFieldNumber;
const int IMConsultDataAck::kOrderIdFieldNumber;
const int IMConsultDataAck::kConsultIdFieldNumber;
const int IMConsultDataAck::kConsultStatusFieldNumber;
const int IMConsultDataAck::kCreateTimeFieldNumber;
const int IMConsultDataAck::kResultFieldNumber;
const int IMConsultDataAck::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultDataAck::IMConsultDataAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultDataAck)
}

void IMConsultDataAck::InitAsDefaultInstance() {
}

IMConsultDataAck::IMConsultDataAck(const IMConsultDataAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultDataAck)
}

void IMConsultDataAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_id_ = 0u;
  to_id_ = 0u;
  msg_id_ = 0u;
  order_id_ = 0u;
  consult_id_ = 0u;
  consult_status_ = 0u;
  create_time_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultDataAck::~IMConsultDataAck() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultDataAck)
  SharedDtor();
}

void IMConsultDataAck::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultDataAck& IMConsultDataAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultDataAck* IMConsultDataAck::default_instance_ = NULL;

IMConsultDataAck* IMConsultDataAck::New() const {
  return new IMConsultDataAck;
}

void IMConsultDataAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultDataAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(from_id_, result_);
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultDataAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required uint32 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_consult_status;
        break;
      }

      // required uint32 consult_status = 6;
      case 6: {
        if (tag == 48) {
         parse_consult_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_status_)));
          set_has_consult_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 7;
      case 7: {
        if (tag == 56) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // required uint32 result = 8;
      case 8: {
        if (tag == 64) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultDataAck)
  return false;
#undef DO_
}

void IMConsultDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultDataAck)
  // required uint32 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_id(), output);
  }

  // required uint32 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 consult_id = 5;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_id(), output);
  }

  // required uint32 consult_status = 6;
  if (has_consult_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consult_status(), output);
  }

  // required uint32 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->create_time(), output);
  }

  // required uint32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultDataAck)
}

int IMConsultDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 to_id = 2;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 consult_id = 5;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 consult_status = 6;
    if (has_consult_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_status());
    }

    // required uint32 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultDataAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultDataAck*>(&from));
}

void IMConsultDataAck::MergeFrom(const IMConsultDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_consult_status()) {
      set_consult_status(from.consult_status());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultDataAck::CopyFrom(const IMConsultDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultDataAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void IMConsultDataAck::Swap(IMConsultDataAck* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(consult_status_, other->consult_status_);
    std::swap(create_time_, other->create_time_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultDataAck::GetTypeName() const {
  return "IM.Consult.IMConsultDataAck";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetTeacherInfoReq::kStudentIdFieldNumber;
const int IMConsultGetTeacherInfoReq::kOrderIdFieldNumber;
const int IMConsultGetTeacherInfoReq::kManagerIdFieldNumber;
const int IMConsultGetTeacherInfoReq::kDutyIdListFieldNumber;
const int IMConsultGetTeacherInfoReq::kSenderDutyIdFieldNumber;
const int IMConsultGetTeacherInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetTeacherInfoReq::IMConsultGetTeacherInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetTeacherInfoReq)
}

void IMConsultGetTeacherInfoReq::InitAsDefaultInstance() {
}

IMConsultGetTeacherInfoReq::IMConsultGetTeacherInfoReq(const IMConsultGetTeacherInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetTeacherInfoReq)
}

void IMConsultGetTeacherInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  manager_id_ = 0u;
  sender_duty_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetTeacherInfoReq::~IMConsultGetTeacherInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetTeacherInfoReq)
  SharedDtor();
}

void IMConsultGetTeacherInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetTeacherInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetTeacherInfoReq& IMConsultGetTeacherInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetTeacherInfoReq* IMConsultGetTeacherInfoReq::default_instance_ = NULL;

IMConsultGetTeacherInfoReq* IMConsultGetTeacherInfoReq::New() const {
  return new IMConsultGetTeacherInfoReq;
}

void IMConsultGetTeacherInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetTeacherInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(student_id_, order_id_);
    ZR_(manager_id_, sender_duty_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  duty_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetTeacherInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetTeacherInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_manager_id;
        break;
      }

      // required uint32 manager_id = 3;
      case 3: {
        if (tag == 24) {
         parse_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manager_id_)));
          set_has_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duty_id_list;
        break;
      }

      // repeated uint32 duty_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_duty_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_duty_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_duty_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duty_id_list;
        if (input->ExpectTag(40)) goto parse_sender_duty_id;
        break;
      }

      // optional uint32 sender_duty_id = 5;
      case 5: {
        if (tag == 40) {
         parse_sender_duty_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_duty_id_)));
          set_has_sender_duty_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetTeacherInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetTeacherInfoReq)
  return false;
#undef DO_
}

void IMConsultGetTeacherInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetTeacherInfoReq)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // required uint32 manager_id = 3;
  if (has_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manager_id(), output);
  }

  // repeated uint32 duty_id_list = 4;
  for (int i = 0; i < this->duty_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->duty_id_list(i), output);
  }

  // optional uint32 sender_duty_id = 5;
  if (has_sender_duty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sender_duty_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetTeacherInfoReq)
}

int IMConsultGetTeacherInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 manager_id = 3;
    if (has_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manager_id());
    }

    // optional uint32 sender_duty_id = 5;
    if (has_sender_duty_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_duty_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 duty_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->duty_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->duty_id_list(i));
    }
    total_size += 1 * this->duty_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetTeacherInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetTeacherInfoReq*>(&from));
}

void IMConsultGetTeacherInfoReq::MergeFrom(const IMConsultGetTeacherInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  duty_id_list_.MergeFrom(from.duty_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_manager_id()) {
      set_manager_id(from.manager_id());
    }
    if (from.has_sender_duty_id()) {
      set_sender_duty_id(from.sender_duty_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetTeacherInfoReq::CopyFrom(const IMConsultGetTeacherInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetTeacherInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMConsultGetTeacherInfoReq::Swap(IMConsultGetTeacherInfoReq* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(manager_id_, other->manager_id_);
    duty_id_list_.Swap(&other->duty_id_list_);
    std::swap(sender_duty_id_, other->sender_duty_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetTeacherInfoReq::GetTypeName() const {
  return "IM.Consult.IMConsultGetTeacherInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetTeacherInfoResp::kStudentIdFieldNumber;
const int IMConsultGetTeacherInfoResp::kOrderIdFieldNumber;
const int IMConsultGetTeacherInfoResp::kResultFieldNumber;
const int IMConsultGetTeacherInfoResp::kManagerStatFieldNumber;
const int IMConsultGetTeacherInfoResp::kDutyStatListFieldNumber;
const int IMConsultGetTeacherInfoResp::kStudentStatFieldNumber;
const int IMConsultGetTeacherInfoResp::kSenderDutyIdFieldNumber;
const int IMConsultGetTeacherInfoResp::kScriptFieldNumber;
const int IMConsultGetTeacherInfoResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetTeacherInfoResp::IMConsultGetTeacherInfoResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetTeacherInfoResp)
}

void IMConsultGetTeacherInfoResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  manager_stat_ = const_cast< ::IM::BaseDefine::ManagerStat*>(
      ::IM::BaseDefine::ManagerStat::internal_default_instance());
#else
  manager_stat_ = const_cast< ::IM::BaseDefine::ManagerStat*>(&::IM::BaseDefine::ManagerStat::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  student_stat_ = const_cast< ::IM::BaseDefine::StudentStat*>(
      ::IM::BaseDefine::StudentStat::internal_default_instance());
#else
  student_stat_ = const_cast< ::IM::BaseDefine::StudentStat*>(&::IM::BaseDefine::StudentStat::default_instance());
#endif
}

IMConsultGetTeacherInfoResp::IMConsultGetTeacherInfoResp(const IMConsultGetTeacherInfoResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetTeacherInfoResp)
}

void IMConsultGetTeacherInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  result_ = 0u;
  manager_stat_ = NULL;
  student_stat_ = NULL;
  sender_duty_id_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetTeacherInfoResp::~IMConsultGetTeacherInfoResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetTeacherInfoResp)
  SharedDtor();
}

void IMConsultGetTeacherInfoResp::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete manager_stat_;
    delete student_stat_;
  }
}

void IMConsultGetTeacherInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetTeacherInfoResp& IMConsultGetTeacherInfoResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetTeacherInfoResp* IMConsultGetTeacherInfoResp::default_instance_ = NULL;

IMConsultGetTeacherInfoResp* IMConsultGetTeacherInfoResp::New() const {
  return new IMConsultGetTeacherInfoResp;
}

void IMConsultGetTeacherInfoResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetTeacherInfoResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(student_id_, order_id_);
    ZR_(result_, sender_duty_id_);
    if (has_manager_stat()) {
      if (manager_stat_ != NULL) manager_stat_->::IM::BaseDefine::ManagerStat::Clear();
    }
    if (has_student_stat()) {
      if (student_stat_ != NULL) student_stat_->::IM::BaseDefine::StudentStat::Clear();
    }
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  duty_stat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetTeacherInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetTeacherInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_manager_stat;
        break;
      }

      // required .IM.BaseDefine.ManagerStat manager_stat = 4;
      case 4: {
        if (tag == 34) {
         parse_manager_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manager_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_duty_stat_list;
        break;
      }

      // repeated .IM.BaseDefine.DutyStat duty_stat_list = 5;
      case 5: {
        if (tag == 42) {
         parse_duty_stat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duty_stat_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_duty_stat_list;
        if (input->ExpectTag(50)) goto parse_student_stat;
        break;
      }

      // optional .IM.BaseDefine.StudentStat student_stat = 6;
      case 6: {
        if (tag == 50) {
         parse_student_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_student_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sender_duty_id;
        break;
      }

      // optional uint32 sender_duty_id = 7;
      case 7: {
        if (tag == 56) {
         parse_sender_duty_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_duty_id_)));
          set_has_sender_duty_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_script;
        break;
      }

      // optional bytes script = 8;
      case 8: {
        if (tag == 66) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetTeacherInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetTeacherInfoResp)
  return false;
#undef DO_
}

void IMConsultGetTeacherInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetTeacherInfoResp)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // required .IM.BaseDefine.ManagerStat manager_stat = 4;
  if (has_manager_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->manager_stat(), output);
  }

  // repeated .IM.BaseDefine.DutyStat duty_stat_list = 5;
  for (int i = 0; i < this->duty_stat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->duty_stat_list(i), output);
  }

  // optional .IM.BaseDefine.StudentStat student_stat = 6;
  if (has_student_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->student_stat(), output);
  }

  // optional uint32 sender_duty_id = 7;
  if (has_sender_duty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sender_duty_id(), output);
  }

  // optional bytes script = 8;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->script(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetTeacherInfoResp)
}

int IMConsultGetTeacherInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required .IM.BaseDefine.ManagerStat manager_stat = 4;
    if (has_manager_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manager_stat());
    }

    // optional .IM.BaseDefine.StudentStat student_stat = 6;
    if (has_student_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->student_stat());
    }

    // optional uint32 sender_duty_id = 7;
    if (has_sender_duty_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_duty_id());
    }

    // optional bytes script = 8;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.DutyStat duty_stat_list = 5;
  total_size += 1 * this->duty_stat_list_size();
  for (int i = 0; i < this->duty_stat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duty_stat_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetTeacherInfoResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetTeacherInfoResp*>(&from));
}

void IMConsultGetTeacherInfoResp::MergeFrom(const IMConsultGetTeacherInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  duty_stat_list_.MergeFrom(from.duty_stat_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_manager_stat()) {
      mutable_manager_stat()->::IM::BaseDefine::ManagerStat::MergeFrom(from.manager_stat());
    }
    if (from.has_student_stat()) {
      mutable_student_stat()->::IM::BaseDefine::StudentStat::MergeFrom(from.student_stat());
    }
    if (from.has_sender_duty_id()) {
      set_sender_duty_id(from.sender_duty_id());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetTeacherInfoResp::CopyFrom(const IMConsultGetTeacherInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetTeacherInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_manager_stat()) {
    if (!this->manager_stat().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->duty_stat_list())) return false;
  if (has_student_stat()) {
    if (!this->student_stat().IsInitialized()) return false;
  }
  return true;
}

void IMConsultGetTeacherInfoResp::Swap(IMConsultGetTeacherInfoResp* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(result_, other->result_);
    std::swap(manager_stat_, other->manager_stat_);
    duty_stat_list_.Swap(&other->duty_stat_list_);
    std::swap(student_stat_, other->student_stat_);
    std::swap(sender_duty_id_, other->sender_duty_id_);
    std::swap(script_, other->script_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetTeacherInfoResp::GetTypeName() const {
  return "IM.Consult.IMConsultGetTeacherInfoResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetStudentStateReq::kRequestIdFieldNumber;
const int IMConsultGetStudentStateReq::kStudentIdFieldNumber;
const int IMConsultGetStudentStateReq::kOrderIdListFieldNumber;
const int IMConsultGetStudentStateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetStudentStateReq::IMConsultGetStudentStateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetStudentStateReq)
}

void IMConsultGetStudentStateReq::InitAsDefaultInstance() {
}

IMConsultGetStudentStateReq::IMConsultGetStudentStateReq(const IMConsultGetStudentStateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetStudentStateReq)
}

void IMConsultGetStudentStateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetStudentStateReq::~IMConsultGetStudentStateReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetStudentStateReq)
  SharedDtor();
}

void IMConsultGetStudentStateReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetStudentStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetStudentStateReq& IMConsultGetStudentStateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetStudentStateReq* IMConsultGetStudentStateReq::default_instance_ = NULL;

IMConsultGetStudentStateReq* IMConsultGetStudentStateReq::New() const {
  return new IMConsultGetStudentStateReq;
}

void IMConsultGetStudentStateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetStudentStateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(request_id_, student_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  order_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetStudentStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetStudentStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id_list;
        break;
      }

      // repeated uint32 order_id_list = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_order_id_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetStudentStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetStudentStateReq)
  return false;
#undef DO_
}

void IMConsultGetStudentStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetStudentStateReq)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // repeated uint32 order_id_list = 3;
  for (int i = 0; i < this->order_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->order_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetStudentStateReq)
}

int IMConsultGetStudentStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 order_id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->order_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->order_id_list(i));
    }
    total_size += 1 * this->order_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetStudentStateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetStudentStateReq*>(&from));
}

void IMConsultGetStudentStateReq::MergeFrom(const IMConsultGetStudentStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_id_list_.MergeFrom(from.order_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetStudentStateReq::CopyFrom(const IMConsultGetStudentStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetStudentStateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMConsultGetStudentStateReq::Swap(IMConsultGetStudentStateReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    order_id_list_.Swap(&other->order_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetStudentStateReq::GetTypeName() const {
  return "IM.Consult.IMConsultGetStudentStateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetStudentStateResp::kRequestIdFieldNumber;
const int IMConsultGetStudentStateResp::kStudentIdFieldNumber;
const int IMConsultGetStudentStateResp::kOrderIdListFieldNumber;
const int IMConsultGetStudentStateResp::kStudentStateFieldNumber;
const int IMConsultGetStudentStateResp::kConsultTeacherIdFieldNumber;
const int IMConsultGetStudentStateResp::kResultFieldNumber;
const int IMConsultGetStudentStateResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetStudentStateResp::IMConsultGetStudentStateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetStudentStateResp)
}

void IMConsultGetStudentStateResp::InitAsDefaultInstance() {
}

IMConsultGetStudentStateResp::IMConsultGetStudentStateResp(const IMConsultGetStudentStateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetStudentStateResp)
}

void IMConsultGetStudentStateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  student_state_ = 0u;
  consult_teacher_id_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetStudentStateResp::~IMConsultGetStudentStateResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetStudentStateResp)
  SharedDtor();
}

void IMConsultGetStudentStateResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetStudentStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetStudentStateResp& IMConsultGetStudentStateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetStudentStateResp* IMConsultGetStudentStateResp::default_instance_ = NULL;

IMConsultGetStudentStateResp* IMConsultGetStudentStateResp::New() const {
  return new IMConsultGetStudentStateResp;
}

void IMConsultGetStudentStateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetStudentStateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(request_id_, student_id_);
    ZR_(student_state_, consult_teacher_id_);
    result_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  order_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetStudentStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetStudentStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id_list;
        break;
      }

      // repeated uint32 order_id_list = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_order_id_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id_list;
        if (input->ExpectTag(32)) goto parse_student_state;
        break;
      }

      // required uint32 student_state = 4;
      case 4: {
        if (tag == 32) {
         parse_student_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_state_)));
          set_has_student_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_teacher_id;
        break;
      }

      // required uint32 consult_teacher_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_teacher_id_)));
          set_has_consult_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // required uint32 result = 6;
      case 6: {
        if (tag == 48) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetStudentStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetStudentStateResp)
  return false;
#undef DO_
}

void IMConsultGetStudentStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetStudentStateResp)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // repeated uint32 order_id_list = 3;
  for (int i = 0; i < this->order_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->order_id_list(i), output);
  }

  // required uint32 student_state = 4;
  if (has_student_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->student_state(), output);
  }

  // required uint32 consult_teacher_id = 5;
  if (has_consult_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_teacher_id(), output);
  }

  // required uint32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetStudentStateResp)
}

int IMConsultGetStudentStateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 student_state = 4;
    if (has_student_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_state());
    }

    // required uint32 consult_teacher_id = 5;
    if (has_consult_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_teacher_id());
    }

    // required uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 order_id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->order_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->order_id_list(i));
    }
    total_size += 1 * this->order_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetStudentStateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetStudentStateResp*>(&from));
}

void IMConsultGetStudentStateResp::MergeFrom(const IMConsultGetStudentStateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_id_list_.MergeFrom(from.order_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_student_state()) {
      set_student_state(from.student_state());
    }
    if (from.has_consult_teacher_id()) {
      set_consult_teacher_id(from.consult_teacher_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetStudentStateResp::CopyFrom(const IMConsultGetStudentStateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetStudentStateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void IMConsultGetStudentStateResp::Swap(IMConsultGetStudentStateResp* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    order_id_list_.Swap(&other->order_id_list_);
    std::swap(student_state_, other->student_state_);
    std::swap(consult_teacher_id_, other->consult_teacher_id_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetStudentStateResp::GetTypeName() const {
  return "IM.Consult.IMConsultGetStudentStateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCreatReq::kStudentIdFieldNumber;
const int IMConsultCreatReq::kTeacherIdFieldNumber;
const int IMConsultCreatReq::kOrderIdFieldNumber;
const int IMConsultCreatReq::kCreateTypeFieldNumber;
const int IMConsultCreatReq::kQueueTsFieldNumber;
const int IMConsultCreatReq::kManagerNameFieldNumber;
const int IMConsultCreatReq::kManagerPortraitFieldNumber;
const int IMConsultCreatReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCreatReq::IMConsultCreatReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCreatReq)
}

void IMConsultCreatReq::InitAsDefaultInstance() {
}

IMConsultCreatReq::IMConsultCreatReq(const IMConsultCreatReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCreatReq)
}

void IMConsultCreatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  create_type_ = 0u;
  queue_ts_ = 0u;
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCreatReq::~IMConsultCreatReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCreatReq)
  SharedDtor();
}

void IMConsultCreatReq::SharedDtor() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCreatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCreatReq& IMConsultCreatReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCreatReq* IMConsultCreatReq::default_instance_ = NULL;

IMConsultCreatReq* IMConsultCreatReq::New() const {
  return new IMConsultCreatReq;
}

void IMConsultCreatReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCreatReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(student_id_, create_type_);
    queue_ts_ = 0u;
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCreatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCreatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_type;
        break;
      }

      // required uint32 create_type = 4;
      case 4: {
        if (tag == 32) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_queue_ts;
        break;
      }

      // required uint32 queue_ts = 5;
      case 5: {
        if (tag == 40) {
         parse_queue_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_ts_)));
          set_has_queue_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 6;
      case 6: {
        if (tag == 50) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 7;
      case 7: {
        if (tag == 58) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCreatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCreatReq)
  return false;
#undef DO_
}

void IMConsultCreatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCreatReq)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 teacher_id = 2;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teacher_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 create_type = 4;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_type(), output);
  }

  // required uint32 queue_ts = 5;
  if (has_queue_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->queue_ts(), output);
  }

  // optional string manager_name = 6;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->manager_name(), output);
  }

  // optional string manager_portrait = 7;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manager_portrait(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCreatReq)
}

int IMConsultCreatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 2;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 create_type = 4;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // required uint32 queue_ts = 5;
    if (has_queue_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_ts());
    }

    // optional string manager_name = 6;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string manager_portrait = 7;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCreatReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCreatReq*>(&from));
}

void IMConsultCreatReq::MergeFrom(const IMConsultCreatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_queue_ts()) {
      set_queue_ts(from.queue_ts());
    }
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCreatReq::CopyFrom(const IMConsultCreatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCreatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMConsultCreatReq::Swap(IMConsultCreatReq* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(create_type_, other->create_type_);
    std::swap(queue_ts_, other->queue_ts_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCreatReq::GetTypeName() const {
  return "IM.Consult.IMConsultCreatReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCreatResp::kStudentIdFieldNumber;
const int IMConsultCreatResp::kTeacherIdFieldNumber;
const int IMConsultCreatResp::kOrderIdFieldNumber;
const int IMConsultCreatResp::kConsultIdFieldNumber;
const int IMConsultCreatResp::kCreateTypeFieldNumber;
const int IMConsultCreatResp::kResultFieldNumber;
const int IMConsultCreatResp::kScriptFieldNumber;
const int IMConsultCreatResp::kManagerNameFieldNumber;
const int IMConsultCreatResp::kManagerPortraitFieldNumber;
const int IMConsultCreatResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCreatResp::IMConsultCreatResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCreatResp)
}

void IMConsultCreatResp::InitAsDefaultInstance() {
}

IMConsultCreatResp::IMConsultCreatResp(const IMConsultCreatResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCreatResp)
}

void IMConsultCreatResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  consult_id_ = 0u;
  create_type_ = 0u;
  result_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCreatResp::~IMConsultCreatResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCreatResp)
  SharedDtor();
}

void IMConsultCreatResp::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCreatResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCreatResp& IMConsultCreatResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCreatResp* IMConsultCreatResp::default_instance_ = NULL;

IMConsultCreatResp* IMConsultCreatResp::New() const {
  return new IMConsultCreatResp;
}

void IMConsultCreatResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCreatResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(student_id_, result_);
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCreatResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCreatResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 4;
      case 4: {
        if (tag == 32) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_type;
        break;
      }

      // required uint32 create_type = 5;
      case 5: {
        if (tag == 40) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // required uint32 result = 6;
      case 6: {
        if (tag == 48) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_script;
        break;
      }

      // optional bytes script = 7;
      case 7: {
        if (tag == 58) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 8;
      case 8: {
        if (tag == 66) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 9;
      case 9: {
        if (tag == 74) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCreatResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCreatResp)
  return false;
#undef DO_
}

void IMConsultCreatResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCreatResp)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 teacher_id = 2;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teacher_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 consult_id = 4;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consult_id(), output);
  }

  // required uint32 create_type = 5;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_type(), output);
  }

  // required uint32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  // optional bytes script = 7;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->script(), output);
  }

  // optional string manager_name = 8;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manager_name(), output);
  }

  // optional string manager_portrait = 9;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->manager_portrait(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCreatResp)
}

int IMConsultCreatResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 2;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 consult_id = 4;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 create_type = 5;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // required uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes script = 7;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional string manager_name = 8;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string manager_portrait = 9;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCreatResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCreatResp*>(&from));
}

void IMConsultCreatResp::MergeFrom(const IMConsultCreatResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCreatResp::CopyFrom(const IMConsultCreatResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCreatResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMConsultCreatResp::Swap(IMConsultCreatResp* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(create_type_, other->create_type_);
    std::swap(result_, other->result_);
    std::swap(script_, other->script_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCreatResp::GetTypeName() const {
  return "IM.Consult.IMConsultCreatResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCloseReq::kRequestIdFieldNumber;
const int IMConsultCloseReq::kStudentIdFieldNumber;
const int IMConsultCloseReq::kTeacherIdFieldNumber;
const int IMConsultCloseReq::kOrderIdFieldNumber;
const int IMConsultCloseReq::kConsultIdFieldNumber;
const int IMConsultCloseReq::kCloseTypeFieldNumber;
const int IMConsultCloseReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCloseReq::IMConsultCloseReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCloseReq)
}

void IMConsultCloseReq::InitAsDefaultInstance() {
}

IMConsultCloseReq::IMConsultCloseReq(const IMConsultCloseReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCloseReq)
}

void IMConsultCloseReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  consult_id_ = 0u;
  close_type_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCloseReq::~IMConsultCloseReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCloseReq)
  SharedDtor();
}

void IMConsultCloseReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCloseReq& IMConsultCloseReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCloseReq* IMConsultCloseReq::default_instance_ = NULL;

IMConsultCloseReq* IMConsultCloseReq::New() const {
  return new IMConsultCloseReq;
}

void IMConsultCloseReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCloseReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(request_id_, close_type_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCloseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 3;
      case 3: {
        if (tag == 24) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_close_type;
        break;
      }

      // required uint32 close_type = 6;
      case 6: {
        if (tag == 48) {
         parse_close_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_type_)));
          set_has_close_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCloseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCloseReq)
  return false;
#undef DO_
}

void IMConsultCloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCloseReq)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 teacher_id = 3;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teacher_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 consult_id = 5;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_id(), output);
  }

  // required uint32 close_type = 6;
  if (has_close_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->close_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCloseReq)
}

int IMConsultCloseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 3;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 consult_id = 5;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 close_type = 6;
    if (has_close_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCloseReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCloseReq*>(&from));
}

void IMConsultCloseReq::MergeFrom(const IMConsultCloseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_close_type()) {
      set_close_type(from.close_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCloseReq::CopyFrom(const IMConsultCloseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCloseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMConsultCloseReq::Swap(IMConsultCloseReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(close_type_, other->close_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCloseReq::GetTypeName() const {
  return "IM.Consult.IMConsultCloseReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCloseResp::kRequestIdFieldNumber;
const int IMConsultCloseResp::kStudentIdFieldNumber;
const int IMConsultCloseResp::kTeacherIdFieldNumber;
const int IMConsultCloseResp::kOrderIdFieldNumber;
const int IMConsultCloseResp::kConsultIdFieldNumber;
const int IMConsultCloseResp::kCloseTypeFieldNumber;
const int IMConsultCloseResp::kResultFieldNumber;
const int IMConsultCloseResp::kScriptFieldNumber;
const int IMConsultCloseResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCloseResp::IMConsultCloseResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCloseResp)
}

void IMConsultCloseResp::InitAsDefaultInstance() {
}

IMConsultCloseResp::IMConsultCloseResp(const IMConsultCloseResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCloseResp)
}

void IMConsultCloseResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  consult_id_ = 0u;
  close_type_ = 0u;
  result_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCloseResp::~IMConsultCloseResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCloseResp)
  SharedDtor();
}

void IMConsultCloseResp::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCloseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCloseResp& IMConsultCloseResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCloseResp* IMConsultCloseResp::default_instance_ = NULL;

IMConsultCloseResp* IMConsultCloseResp::New() const {
  return new IMConsultCloseResp;
}

void IMConsultCloseResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCloseResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(request_id_, close_type_);
    result_ = 0u;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCloseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCloseResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 3;
      case 3: {
        if (tag == 24) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_close_type;
        break;
      }

      // required uint32 close_type = 6;
      case 6: {
        if (tag == 48) {
         parse_close_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_type_)));
          set_has_close_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // required uint32 result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_script;
        break;
      }

      // optional bytes script = 8;
      case 8: {
        if (tag == 66) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCloseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCloseResp)
  return false;
#undef DO_
}

void IMConsultCloseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCloseResp)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 teacher_id = 3;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teacher_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 consult_id = 5;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_id(), output);
  }

  // required uint32 close_type = 6;
  if (has_close_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->close_type(), output);
  }

  // required uint32 result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->result(), output);
  }

  // optional bytes script = 8;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->script(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCloseResp)
}

int IMConsultCloseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 3;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 consult_id = 5;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 close_type = 6;
    if (has_close_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_type());
    }

    // required uint32 result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes script = 8;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCloseResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCloseResp*>(&from));
}

void IMConsultCloseResp::MergeFrom(const IMConsultCloseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_close_type()) {
      set_close_type(from.close_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCloseResp::CopyFrom(const IMConsultCloseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCloseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMConsultCloseResp::Swap(IMConsultCloseResp* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(close_type_, other->close_type_);
    std::swap(result_, other->result_);
    std::swap(script_, other->script_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCloseResp::GetTypeName() const {
  return "IM.Consult.IMConsultCloseResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCreateAnnounce::kConsultIdFieldNumber;
const int IMConsultCreateAnnounce::kStudentIdFieldNumber;
const int IMConsultCreateAnnounce::kTeacherIdFieldNumber;
const int IMConsultCreateAnnounce::kOrderIdFieldNumber;
const int IMConsultCreateAnnounce::kCreateTypeFieldNumber;
const int IMConsultCreateAnnounce::kScriptFieldNumber;
const int IMConsultCreateAnnounce::kManagerNameFieldNumber;
const int IMConsultCreateAnnounce::kManagerPortraitFieldNumber;
const int IMConsultCreateAnnounce::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCreateAnnounce::IMConsultCreateAnnounce()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCreateAnnounce)
}

void IMConsultCreateAnnounce::InitAsDefaultInstance() {
}

IMConsultCreateAnnounce::IMConsultCreateAnnounce(const IMConsultCreateAnnounce& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCreateAnnounce)
}

void IMConsultCreateAnnounce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  consult_id_ = 0u;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  create_type_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCreateAnnounce::~IMConsultCreateAnnounce() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCreateAnnounce)
  SharedDtor();
}

void IMConsultCreateAnnounce::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCreateAnnounce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCreateAnnounce& IMConsultCreateAnnounce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCreateAnnounce* IMConsultCreateAnnounce::default_instance_ = NULL;

IMConsultCreateAnnounce* IMConsultCreateAnnounce::New() const {
  return new IMConsultCreateAnnounce;
}

void IMConsultCreateAnnounce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCreateAnnounce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(consult_id_, order_id_);
    create_type_ = 0u;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCreateAnnounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCreateAnnounce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 consult_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 3;
      case 3: {
        if (tag == 24) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create_type;
        break;
      }

      // required uint32 create_type = 5;
      case 5: {
        if (tag == 40) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_script;
        break;
      }

      // optional bytes script = 6;
      case 6: {
        if (tag == 50) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 7;
      case 7: {
        if (tag == 58) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 8;
      case 8: {
        if (tag == 66) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCreateAnnounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCreateAnnounce)
  return false;
#undef DO_
}

void IMConsultCreateAnnounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCreateAnnounce)
  // required uint32 consult_id = 1;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->consult_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 teacher_id = 3;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teacher_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 create_type = 5;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_type(), output);
  }

  // optional bytes script = 6;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->script(), output);
  }

  // optional string manager_name = 7;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manager_name(), output);
  }

  // optional string manager_portrait = 8;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manager_portrait(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCreateAnnounce)
}

int IMConsultCreateAnnounce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 consult_id = 1;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 3;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 create_type = 5;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // optional bytes script = 6;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional string manager_name = 7;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string manager_portrait = 8;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCreateAnnounce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCreateAnnounce*>(&from));
}

void IMConsultCreateAnnounce::MergeFrom(const IMConsultCreateAnnounce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCreateAnnounce::CopyFrom(const IMConsultCreateAnnounce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCreateAnnounce::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMConsultCreateAnnounce::Swap(IMConsultCreateAnnounce* other) {
  if (other != this) {
    std::swap(consult_id_, other->consult_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(create_type_, other->create_type_);
    std::swap(script_, other->script_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCreateAnnounce::GetTypeName() const {
  return "IM.Consult.IMConsultCreateAnnounce";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultCloseAnnounce::kConsultIdFieldNumber;
const int IMConsultCloseAnnounce::kStudentIdFieldNumber;
const int IMConsultCloseAnnounce::kTeacherIdFieldNumber;
const int IMConsultCloseAnnounce::kOrderIdFieldNumber;
const int IMConsultCloseAnnounce::kCloseTypeFieldNumber;
const int IMConsultCloseAnnounce::kScriptFieldNumber;
const int IMConsultCloseAnnounce::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultCloseAnnounce::IMConsultCloseAnnounce()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultCloseAnnounce)
}

void IMConsultCloseAnnounce::InitAsDefaultInstance() {
}

IMConsultCloseAnnounce::IMConsultCloseAnnounce(const IMConsultCloseAnnounce& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultCloseAnnounce)
}

void IMConsultCloseAnnounce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  consult_id_ = 0u;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  close_type_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultCloseAnnounce::~IMConsultCloseAnnounce() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultCloseAnnounce)
  SharedDtor();
}

void IMConsultCloseAnnounce::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultCloseAnnounce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultCloseAnnounce& IMConsultCloseAnnounce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultCloseAnnounce* IMConsultCloseAnnounce::default_instance_ = NULL;

IMConsultCloseAnnounce* IMConsultCloseAnnounce::New() const {
  return new IMConsultCloseAnnounce;
}

void IMConsultCloseAnnounce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultCloseAnnounce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(consult_id_, order_id_);
    close_type_ = 0u;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultCloseAnnounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultCloseAnnounce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 consult_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 3;
      case 3: {
        if (tag == 24) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_close_type;
        break;
      }

      // required uint32 close_type = 5;
      case 5: {
        if (tag == 40) {
         parse_close_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_type_)));
          set_has_close_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_script;
        break;
      }

      // optional bytes script = 6;
      case 6: {
        if (tag == 50) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultCloseAnnounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultCloseAnnounce)
  return false;
#undef DO_
}

void IMConsultCloseAnnounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultCloseAnnounce)
  // required uint32 consult_id = 1;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->consult_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 teacher_id = 3;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teacher_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 close_type = 5;
  if (has_close_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->close_type(), output);
  }

  // optional bytes script = 6;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->script(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultCloseAnnounce)
}

int IMConsultCloseAnnounce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 consult_id = 1;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 3;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 close_type = 5;
    if (has_close_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_type());
    }

    // optional bytes script = 6;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultCloseAnnounce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultCloseAnnounce*>(&from));
}

void IMConsultCloseAnnounce::MergeFrom(const IMConsultCloseAnnounce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_close_type()) {
      set_close_type(from.close_type());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultCloseAnnounce::CopyFrom(const IMConsultCloseAnnounce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultCloseAnnounce::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMConsultCloseAnnounce::Swap(IMConsultCloseAnnounce* other) {
  if (other != this) {
    std::swap(consult_id_, other->consult_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(close_type_, other->close_type_);
    std::swap(script_, other->script_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultCloseAnnounce::GetTypeName() const {
  return "IM.Consult.IMConsultCloseAnnounce";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentInQueueReq::kStudentIdFieldNumber;
const int IMConsultStudentInQueueReq::kTeacherIdFieldNumber;
const int IMConsultStudentInQueueReq::kOrderIdFieldNumber;
const int IMConsultStudentInQueueReq::kQueueTsFieldNumber;
const int IMConsultStudentInQueueReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentInQueueReq::IMConsultStudentInQueueReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentInQueueReq)
}

void IMConsultStudentInQueueReq::InitAsDefaultInstance() {
}

IMConsultStudentInQueueReq::IMConsultStudentInQueueReq(const IMConsultStudentInQueueReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentInQueueReq)
}

void IMConsultStudentInQueueReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  queue_ts_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentInQueueReq::~IMConsultStudentInQueueReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentInQueueReq)
  SharedDtor();
}

void IMConsultStudentInQueueReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentInQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentInQueueReq& IMConsultStudentInQueueReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentInQueueReq* IMConsultStudentInQueueReq::default_instance_ = NULL;

IMConsultStudentInQueueReq* IMConsultStudentInQueueReq::New() const {
  return new IMConsultStudentInQueueReq;
}

void IMConsultStudentInQueueReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentInQueueReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(student_id_, queue_ts_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentInQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentInQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queue_ts;
        break;
      }

      // required uint32 queue_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_queue_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_ts_)));
          set_has_queue_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentInQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentInQueueReq)
  return false;
#undef DO_
}

void IMConsultStudentInQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentInQueueReq)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 teacher_id = 2;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teacher_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 queue_ts = 4;
  if (has_queue_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->queue_ts(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentInQueueReq)
}

int IMConsultStudentInQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 2;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 queue_ts = 4;
    if (has_queue_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_ts());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentInQueueReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentInQueueReq*>(&from));
}

void IMConsultStudentInQueueReq::MergeFrom(const IMConsultStudentInQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_queue_ts()) {
      set_queue_ts(from.queue_ts());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentInQueueReq::CopyFrom(const IMConsultStudentInQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentInQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMConsultStudentInQueueReq::Swap(IMConsultStudentInQueueReq* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(queue_ts_, other->queue_ts_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentInQueueReq::GetTypeName() const {
  return "IM.Consult.IMConsultStudentInQueueReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentInQueueResp::kStudentIdFieldNumber;
const int IMConsultStudentInQueueResp::kTeacherIdFieldNumber;
const int IMConsultStudentInQueueResp::kOrderIdFieldNumber;
const int IMConsultStudentInQueueResp::kResultFieldNumber;
const int IMConsultStudentInQueueResp::kScriptFieldNumber;
const int IMConsultStudentInQueueResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentInQueueResp::IMConsultStudentInQueueResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentInQueueResp)
}

void IMConsultStudentInQueueResp::InitAsDefaultInstance() {
}

IMConsultStudentInQueueResp::IMConsultStudentInQueueResp(const IMConsultStudentInQueueResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentInQueueResp)
}

void IMConsultStudentInQueueResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  result_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentInQueueResp::~IMConsultStudentInQueueResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentInQueueResp)
  SharedDtor();
}

void IMConsultStudentInQueueResp::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentInQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentInQueueResp& IMConsultStudentInQueueResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentInQueueResp* IMConsultStudentInQueueResp::default_instance_ = NULL;

IMConsultStudentInQueueResp* IMConsultStudentInQueueResp::New() const {
  return new IMConsultStudentInQueueResp;
}

void IMConsultStudentInQueueResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentInQueueResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(student_id_, result_);
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentInQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentInQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required uint32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_script;
        break;
      }

      // optional bytes script = 5;
      case 5: {
        if (tag == 42) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentInQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentInQueueResp)
  return false;
#undef DO_
}

void IMConsultStudentInQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentInQueueResp)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 teacher_id = 2;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teacher_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional bytes script = 5;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->script(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentInQueueResp)
}

int IMConsultStudentInQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 2;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes script = 5;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentInQueueResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentInQueueResp*>(&from));
}

void IMConsultStudentInQueueResp::MergeFrom(const IMConsultStudentInQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentInQueueResp::CopyFrom(const IMConsultStudentInQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentInQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMConsultStudentInQueueResp::Swap(IMConsultStudentInQueueResp* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(result_, other->result_);
    std::swap(script_, other->script_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentInQueueResp::GetTypeName() const {
  return "IM.Consult.IMConsultStudentInQueueResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultTeacherOfflineInform::kStudentIdFieldNumber;
const int IMConsultTeacherOfflineInform::kTeacherIdFieldNumber;
const int IMConsultTeacherOfflineInform::kOrderIdFieldNumber;
const int IMConsultTeacherOfflineInform::kQueueTsFieldNumber;
const int IMConsultTeacherOfflineInform::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultTeacherOfflineInform::IMConsultTeacherOfflineInform()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultTeacherOfflineInform)
}

void IMConsultTeacherOfflineInform::InitAsDefaultInstance() {
}

IMConsultTeacherOfflineInform::IMConsultTeacherOfflineInform(const IMConsultTeacherOfflineInform& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultTeacherOfflineInform)
}

void IMConsultTeacherOfflineInform::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  teacher_id_ = 0u;
  order_id_ = 0u;
  queue_ts_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultTeacherOfflineInform::~IMConsultTeacherOfflineInform() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultTeacherOfflineInform)
  SharedDtor();
}

void IMConsultTeacherOfflineInform::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultTeacherOfflineInform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultTeacherOfflineInform& IMConsultTeacherOfflineInform::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultTeacherOfflineInform* IMConsultTeacherOfflineInform::default_instance_ = NULL;

IMConsultTeacherOfflineInform* IMConsultTeacherOfflineInform::New() const {
  return new IMConsultTeacherOfflineInform;
}

void IMConsultTeacherOfflineInform::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultTeacherOfflineInform*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(student_id_, queue_ts_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultTeacherOfflineInform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultTeacherOfflineInform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id;
        break;
      }

      // required uint32 teacher_id = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queue_ts;
        break;
      }

      // required uint32 queue_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_queue_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_ts_)));
          set_has_queue_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultTeacherOfflineInform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultTeacherOfflineInform)
  return false;
#undef DO_
}

void IMConsultTeacherOfflineInform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultTeacherOfflineInform)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 teacher_id = 2;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teacher_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 queue_ts = 4;
  if (has_queue_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->queue_ts(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultTeacherOfflineInform)
}

int IMConsultTeacherOfflineInform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 teacher_id = 2;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 queue_ts = 4;
    if (has_queue_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_ts());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultTeacherOfflineInform::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultTeacherOfflineInform*>(&from));
}

void IMConsultTeacherOfflineInform::MergeFrom(const IMConsultTeacherOfflineInform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_queue_ts()) {
      set_queue_ts(from.queue_ts());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultTeacherOfflineInform::CopyFrom(const IMConsultTeacherOfflineInform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultTeacherOfflineInform::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMConsultTeacherOfflineInform::Swap(IMConsultTeacherOfflineInform* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(queue_ts_, other->queue_ts_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultTeacherOfflineInform::GetTypeName() const {
  return "IM.Consult.IMConsultTeacherOfflineInform";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentOutQueueReq::kStudentIdFieldNumber;
const int IMConsultStudentOutQueueReq::kOrderIdFieldNumber;
const int IMConsultStudentOutQueueReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentOutQueueReq::IMConsultStudentOutQueueReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentOutQueueReq)
}

void IMConsultStudentOutQueueReq::InitAsDefaultInstance() {
}

IMConsultStudentOutQueueReq::IMConsultStudentOutQueueReq(const IMConsultStudentOutQueueReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentOutQueueReq)
}

void IMConsultStudentOutQueueReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentOutQueueReq::~IMConsultStudentOutQueueReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentOutQueueReq)
  SharedDtor();
}

void IMConsultStudentOutQueueReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentOutQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentOutQueueReq& IMConsultStudentOutQueueReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentOutQueueReq* IMConsultStudentOutQueueReq::default_instance_ = NULL;

IMConsultStudentOutQueueReq* IMConsultStudentOutQueueReq::New() const {
  return new IMConsultStudentOutQueueReq;
}

void IMConsultStudentOutQueueReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentOutQueueReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(student_id_, order_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentOutQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentOutQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentOutQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentOutQueueReq)
  return false;
#undef DO_
}

void IMConsultStudentOutQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentOutQueueReq)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentOutQueueReq)
}

int IMConsultStudentOutQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentOutQueueReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentOutQueueReq*>(&from));
}

void IMConsultStudentOutQueueReq::MergeFrom(const IMConsultStudentOutQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentOutQueueReq::CopyFrom(const IMConsultStudentOutQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentOutQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMConsultStudentOutQueueReq::Swap(IMConsultStudentOutQueueReq* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentOutQueueReq::GetTypeName() const {
  return "IM.Consult.IMConsultStudentOutQueueReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentOutQueueResp::kStudentIdFieldNumber;
const int IMConsultStudentOutQueueResp::kOrderIdFieldNumber;
const int IMConsultStudentOutQueueResp::kResultFieldNumber;
const int IMConsultStudentOutQueueResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentOutQueueResp::IMConsultStudentOutQueueResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentOutQueueResp)
}

void IMConsultStudentOutQueueResp::InitAsDefaultInstance() {
}

IMConsultStudentOutQueueResp::IMConsultStudentOutQueueResp(const IMConsultStudentOutQueueResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentOutQueueResp)
}

void IMConsultStudentOutQueueResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentOutQueueResp::~IMConsultStudentOutQueueResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentOutQueueResp)
  SharedDtor();
}

void IMConsultStudentOutQueueResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentOutQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentOutQueueResp& IMConsultStudentOutQueueResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentOutQueueResp* IMConsultStudentOutQueueResp::default_instance_ = NULL;

IMConsultStudentOutQueueResp* IMConsultStudentOutQueueResp::New() const {
  return new IMConsultStudentOutQueueResp;
}

void IMConsultStudentOutQueueResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentOutQueueResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(student_id_, order_id_);
    result_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentOutQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentOutQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentOutQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentOutQueueResp)
  return false;
#undef DO_
}

void IMConsultStudentOutQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentOutQueueResp)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentOutQueueResp)
}

int IMConsultStudentOutQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentOutQueueResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentOutQueueResp*>(&from));
}

void IMConsultStudentOutQueueResp::MergeFrom(const IMConsultStudentOutQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentOutQueueResp::CopyFrom(const IMConsultStudentOutQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentOutQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMConsultStudentOutQueueResp::Swap(IMConsultStudentOutQueueResp* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentOutQueueResp::GetTypeName() const {
  return "IM.Consult.IMConsultStudentOutQueueResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultTeacherModifyStateReq::kTeacherIdFieldNumber;
const int IMConsultTeacherModifyStateReq::kClientTypeFieldNumber;
const int IMConsultTeacherModifyStateReq::kStateFieldNumber;
const int IMConsultTeacherModifyStateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultTeacherModifyStateReq::IMConsultTeacherModifyStateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultTeacherModifyStateReq)
}

void IMConsultTeacherModifyStateReq::InitAsDefaultInstance() {
}

IMConsultTeacherModifyStateReq::IMConsultTeacherModifyStateReq(const IMConsultTeacherModifyStateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultTeacherModifyStateReq)
}

void IMConsultTeacherModifyStateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teacher_id_ = 0u;
  client_type_ = 0u;
  state_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultTeacherModifyStateReq::~IMConsultTeacherModifyStateReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultTeacherModifyStateReq)
  SharedDtor();
}

void IMConsultTeacherModifyStateReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultTeacherModifyStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultTeacherModifyStateReq& IMConsultTeacherModifyStateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultTeacherModifyStateReq* IMConsultTeacherModifyStateReq::default_instance_ = NULL;

IMConsultTeacherModifyStateReq* IMConsultTeacherModifyStateReq::New() const {
  return new IMConsultTeacherModifyStateReq;
}

void IMConsultTeacherModifyStateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultTeacherModifyStateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teacher_id_, client_type_);
    state_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultTeacherModifyStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultTeacherModifyStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 teacher_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // required uint32 client_type = 2;
      case 2: {
        if (tag == 16) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultTeacherModifyStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultTeacherModifyStateReq)
  return false;
#undef DO_
}

void IMConsultTeacherModifyStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultTeacherModifyStateReq)
  // required uint32 teacher_id = 1;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teacher_id(), output);
  }

  // required uint32 client_type = 2;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_type(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultTeacherModifyStateReq)
}

int IMConsultTeacherModifyStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 teacher_id = 1;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 client_type = 2;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_type());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultTeacherModifyStateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultTeacherModifyStateReq*>(&from));
}

void IMConsultTeacherModifyStateReq::MergeFrom(const IMConsultTeacherModifyStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultTeacherModifyStateReq::CopyFrom(const IMConsultTeacherModifyStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultTeacherModifyStateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMConsultTeacherModifyStateReq::Swap(IMConsultTeacherModifyStateReq* other) {
  if (other != this) {
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(state_, other->state_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultTeacherModifyStateReq::GetTypeName() const {
  return "IM.Consult.IMConsultTeacherModifyStateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultTeacherModifyStateResp::kTeacherIdFieldNumber;
const int IMConsultTeacherModifyStateResp::kClientTypeFieldNumber;
const int IMConsultTeacherModifyStateResp::kStateFieldNumber;
const int IMConsultTeacherModifyStateResp::kResultFieldNumber;
const int IMConsultTeacherModifyStateResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultTeacherModifyStateResp::IMConsultTeacherModifyStateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultTeacherModifyStateResp)
}

void IMConsultTeacherModifyStateResp::InitAsDefaultInstance() {
}

IMConsultTeacherModifyStateResp::IMConsultTeacherModifyStateResp(const IMConsultTeacherModifyStateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultTeacherModifyStateResp)
}

void IMConsultTeacherModifyStateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teacher_id_ = 0u;
  client_type_ = 0u;
  state_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultTeacherModifyStateResp::~IMConsultTeacherModifyStateResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultTeacherModifyStateResp)
  SharedDtor();
}

void IMConsultTeacherModifyStateResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultTeacherModifyStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultTeacherModifyStateResp& IMConsultTeacherModifyStateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultTeacherModifyStateResp* IMConsultTeacherModifyStateResp::default_instance_ = NULL;

IMConsultTeacherModifyStateResp* IMConsultTeacherModifyStateResp::New() const {
  return new IMConsultTeacherModifyStateResp;
}

void IMConsultTeacherModifyStateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultTeacherModifyStateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teacher_id_, result_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultTeacherModifyStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultTeacherModifyStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 teacher_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // required uint32 client_type = 2;
      case 2: {
        if (tag == 16) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required uint32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultTeacherModifyStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultTeacherModifyStateResp)
  return false;
#undef DO_
}

void IMConsultTeacherModifyStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultTeacherModifyStateResp)
  // required uint32 teacher_id = 1;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teacher_id(), output);
  }

  // required uint32 client_type = 2;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_type(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultTeacherModifyStateResp)
}

int IMConsultTeacherModifyStateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 teacher_id = 1;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 client_type = 2;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_type());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultTeacherModifyStateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultTeacherModifyStateResp*>(&from));
}

void IMConsultTeacherModifyStateResp::MergeFrom(const IMConsultTeacherModifyStateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultTeacherModifyStateResp::CopyFrom(const IMConsultTeacherModifyStateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultTeacherModifyStateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMConsultTeacherModifyStateResp::Swap(IMConsultTeacherModifyStateResp* other) {
  if (other != this) {
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(client_type_, other->client_type_);
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultTeacherModifyStateResp::GetTypeName() const {
  return "IM.Consult.IMConsultTeacherModifyStateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetTeacherStateReq::kRequestIdFieldNumber;
const int IMConsultGetTeacherStateReq::kTeacherIdListFieldNumber;
const int IMConsultGetTeacherStateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetTeacherStateReq::IMConsultGetTeacherStateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetTeacherStateReq)
}

void IMConsultGetTeacherStateReq::InitAsDefaultInstance() {
}

IMConsultGetTeacherStateReq::IMConsultGetTeacherStateReq(const IMConsultGetTeacherStateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetTeacherStateReq)
}

void IMConsultGetTeacherStateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetTeacherStateReq::~IMConsultGetTeacherStateReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetTeacherStateReq)
  SharedDtor();
}

void IMConsultGetTeacherStateReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetTeacherStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetTeacherStateReq& IMConsultGetTeacherStateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetTeacherStateReq* IMConsultGetTeacherStateReq::default_instance_ = NULL;

IMConsultGetTeacherStateReq* IMConsultGetTeacherStateReq::New() const {
  return new IMConsultGetTeacherStateReq;
}

void IMConsultGetTeacherStateReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    request_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  teacher_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetTeacherStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetTeacherStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id_list;
        break;
      }

      // repeated uint32 teacher_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_teacher_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_teacher_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teacher_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teacher_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetTeacherStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetTeacherStateReq)
  return false;
#undef DO_
}

void IMConsultGetTeacherStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetTeacherStateReq)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated uint32 teacher_id_list = 2;
  for (int i = 0; i < this->teacher_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->teacher_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetTeacherStateReq)
}

int IMConsultGetTeacherStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 teacher_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->teacher_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teacher_id_list(i));
    }
    total_size += 1 * this->teacher_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetTeacherStateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetTeacherStateReq*>(&from));
}

void IMConsultGetTeacherStateReq::MergeFrom(const IMConsultGetTeacherStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  teacher_id_list_.MergeFrom(from.teacher_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetTeacherStateReq::CopyFrom(const IMConsultGetTeacherStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetTeacherStateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMConsultGetTeacherStateReq::Swap(IMConsultGetTeacherStateReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    teacher_id_list_.Swap(&other->teacher_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetTeacherStateReq::GetTypeName() const {
  return "IM.Consult.IMConsultGetTeacherStateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetTeacherStateResp::kRequestIdFieldNumber;
const int IMConsultGetTeacherStateResp::kTeacherStateListFieldNumber;
const int IMConsultGetTeacherStateResp::kResultFieldNumber;
const int IMConsultGetTeacherStateResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetTeacherStateResp::IMConsultGetTeacherStateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetTeacherStateResp)
}

void IMConsultGetTeacherStateResp::InitAsDefaultInstance() {
}

IMConsultGetTeacherStateResp::IMConsultGetTeacherStateResp(const IMConsultGetTeacherStateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetTeacherStateResp)
}

void IMConsultGetTeacherStateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetTeacherStateResp::~IMConsultGetTeacherStateResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetTeacherStateResp)
  SharedDtor();
}

void IMConsultGetTeacherStateResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetTeacherStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetTeacherStateResp& IMConsultGetTeacherStateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetTeacherStateResp* IMConsultGetTeacherStateResp::default_instance_ = NULL;

IMConsultGetTeacherStateResp* IMConsultGetTeacherStateResp::New() const {
  return new IMConsultGetTeacherStateResp;
}

void IMConsultGetTeacherStateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetTeacherStateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(request_id_, result_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teacher_state_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetTeacherStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetTeacherStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teacher_state_list;
        break;
      }

      // repeated .IM.BaseDefine.TeacherStat teacher_state_list = 2;
      case 2: {
        if (tag == 18) {
         parse_teacher_state_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teacher_state_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teacher_state_list;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetTeacherStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetTeacherStateResp)
  return false;
#undef DO_
}

void IMConsultGetTeacherStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetTeacherStateResp)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .IM.BaseDefine.TeacherStat teacher_state_list = 2;
  for (int i = 0; i < this->teacher_state_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->teacher_state_list(i), output);
  }

  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetTeacherStateResp)
}

int IMConsultGetTeacherStateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.TeacherStat teacher_state_list = 2;
  total_size += 1 * this->teacher_state_list_size();
  for (int i = 0; i < this->teacher_state_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teacher_state_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetTeacherStateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetTeacherStateResp*>(&from));
}

void IMConsultGetTeacherStateResp::MergeFrom(const IMConsultGetTeacherStateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teacher_state_list_.MergeFrom(from.teacher_state_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetTeacherStateResp::CopyFrom(const IMConsultGetTeacherStateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetTeacherStateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->teacher_state_list())) return false;
  return true;
}

void IMConsultGetTeacherStateResp::Swap(IMConsultGetTeacherStateResp* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    teacher_state_list_.Swap(&other->teacher_state_list_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetTeacherStateResp::GetTypeName() const {
  return "IM.Consult.IMConsultGetTeacherStateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultTeacherModifyTopReq::kTeacherIdFieldNumber;
const int IMConsultTeacherModifyTopReq::kStudentIdFieldNumber;
const int IMConsultTeacherModifyTopReq::kOrderIdFieldNumber;
const int IMConsultTeacherModifyTopReq::kTopTypeFieldNumber;
const int IMConsultTeacherModifyTopReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultTeacherModifyTopReq::IMConsultTeacherModifyTopReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultTeacherModifyTopReq)
}

void IMConsultTeacherModifyTopReq::InitAsDefaultInstance() {
}

IMConsultTeacherModifyTopReq::IMConsultTeacherModifyTopReq(const IMConsultTeacherModifyTopReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultTeacherModifyTopReq)
}

void IMConsultTeacherModifyTopReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teacher_id_ = 0u;
  student_id_ = 0u;
  order_id_ = 0u;
  top_type_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultTeacherModifyTopReq::~IMConsultTeacherModifyTopReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultTeacherModifyTopReq)
  SharedDtor();
}

void IMConsultTeacherModifyTopReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultTeacherModifyTopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultTeacherModifyTopReq& IMConsultTeacherModifyTopReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultTeacherModifyTopReq* IMConsultTeacherModifyTopReq::default_instance_ = NULL;

IMConsultTeacherModifyTopReq* IMConsultTeacherModifyTopReq::New() const {
  return new IMConsultTeacherModifyTopReq;
}

void IMConsultTeacherModifyTopReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultTeacherModifyTopReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teacher_id_, top_type_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultTeacherModifyTopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultTeacherModifyTopReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 teacher_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_top_type;
        break;
      }

      // required uint32 top_type = 4;
      case 4: {
        if (tag == 32) {
         parse_top_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_type_)));
          set_has_top_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultTeacherModifyTopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultTeacherModifyTopReq)
  return false;
#undef DO_
}

void IMConsultTeacherModifyTopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultTeacherModifyTopReq)
  // required uint32 teacher_id = 1;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teacher_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 top_type = 4;
  if (has_top_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->top_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultTeacherModifyTopReq)
}

int IMConsultTeacherModifyTopReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 teacher_id = 1;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 top_type = 4;
    if (has_top_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultTeacherModifyTopReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultTeacherModifyTopReq*>(&from));
}

void IMConsultTeacherModifyTopReq::MergeFrom(const IMConsultTeacherModifyTopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_top_type()) {
      set_top_type(from.top_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultTeacherModifyTopReq::CopyFrom(const IMConsultTeacherModifyTopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultTeacherModifyTopReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMConsultTeacherModifyTopReq::Swap(IMConsultTeacherModifyTopReq* other) {
  if (other != this) {
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(top_type_, other->top_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultTeacherModifyTopReq::GetTypeName() const {
  return "IM.Consult.IMConsultTeacherModifyTopReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultTeacherModifyTopResp::kTeacherIdFieldNumber;
const int IMConsultTeacherModifyTopResp::kStudentIdFieldNumber;
const int IMConsultTeacherModifyTopResp::kOrderIdFieldNumber;
const int IMConsultTeacherModifyTopResp::kTopTypeFieldNumber;
const int IMConsultTeacherModifyTopResp::kResultFieldNumber;
const int IMConsultTeacherModifyTopResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultTeacherModifyTopResp::IMConsultTeacherModifyTopResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultTeacherModifyTopResp)
}

void IMConsultTeacherModifyTopResp::InitAsDefaultInstance() {
}

IMConsultTeacherModifyTopResp::IMConsultTeacherModifyTopResp(const IMConsultTeacherModifyTopResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultTeacherModifyTopResp)
}

void IMConsultTeacherModifyTopResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teacher_id_ = 0u;
  student_id_ = 0u;
  order_id_ = 0u;
  top_type_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultTeacherModifyTopResp::~IMConsultTeacherModifyTopResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultTeacherModifyTopResp)
  SharedDtor();
}

void IMConsultTeacherModifyTopResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultTeacherModifyTopResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultTeacherModifyTopResp& IMConsultTeacherModifyTopResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultTeacherModifyTopResp* IMConsultTeacherModifyTopResp::default_instance_ = NULL;

IMConsultTeacherModifyTopResp* IMConsultTeacherModifyTopResp::New() const {
  return new IMConsultTeacherModifyTopResp;
}

void IMConsultTeacherModifyTopResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultTeacherModifyTopResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(teacher_id_, top_type_);
    result_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultTeacherModifyTopResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultTeacherModifyTopResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 teacher_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacher_id_)));
          set_has_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 3;
      case 3: {
        if (tag == 24) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_top_type;
        break;
      }

      // required uint32 top_type = 4;
      case 4: {
        if (tag == 32) {
         parse_top_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_type_)));
          set_has_top_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // required uint32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultTeacherModifyTopResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultTeacherModifyTopResp)
  return false;
#undef DO_
}

void IMConsultTeacherModifyTopResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultTeacherModifyTopResp)
  // required uint32 teacher_id = 1;
  if (has_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teacher_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_id(), output);
  }

  // required uint32 top_type = 4;
  if (has_top_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->top_type(), output);
  }

  // required uint32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultTeacherModifyTopResp)
}

int IMConsultTeacherModifyTopResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 teacher_id = 1;
    if (has_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacher_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 top_type = 4;
    if (has_top_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_type());
    }

    // required uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultTeacherModifyTopResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultTeacherModifyTopResp*>(&from));
}

void IMConsultTeacherModifyTopResp::MergeFrom(const IMConsultTeacherModifyTopResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teacher_id()) {
      set_teacher_id(from.teacher_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_top_type()) {
      set_top_type(from.top_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultTeacherModifyTopResp::CopyFrom(const IMConsultTeacherModifyTopResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultTeacherModifyTopResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMConsultTeacherModifyTopResp::Swap(IMConsultTeacherModifyTopResp* other) {
  if (other != this) {
    std::swap(teacher_id_, other->teacher_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(top_type_, other->top_type_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultTeacherModifyTopResp::GetTypeName() const {
  return "IM.Consult.IMConsultTeacherModifyTopResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentGetStateReq::kStudentIdFieldNumber;
const int IMConsultStudentGetStateReq::kOrderIdFieldNumber;
const int IMConsultStudentGetStateReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentGetStateReq::IMConsultStudentGetStateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentGetStateReq)
}

void IMConsultStudentGetStateReq::InitAsDefaultInstance() {
}

IMConsultStudentGetStateReq::IMConsultStudentGetStateReq(const IMConsultStudentGetStateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentGetStateReq)
}

void IMConsultStudentGetStateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentGetStateReq::~IMConsultStudentGetStateReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentGetStateReq)
  SharedDtor();
}

void IMConsultStudentGetStateReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentGetStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentGetStateReq& IMConsultStudentGetStateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentGetStateReq* IMConsultStudentGetStateReq::default_instance_ = NULL;

IMConsultStudentGetStateReq* IMConsultStudentGetStateReq::New() const {
  return new IMConsultStudentGetStateReq;
}

void IMConsultStudentGetStateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentGetStateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(student_id_, order_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentGetStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentGetStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentGetStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentGetStateReq)
  return false;
#undef DO_
}

void IMConsultStudentGetStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentGetStateReq)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentGetStateReq)
}

int IMConsultStudentGetStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentGetStateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentGetStateReq*>(&from));
}

void IMConsultStudentGetStateReq::MergeFrom(const IMConsultStudentGetStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentGetStateReq::CopyFrom(const IMConsultStudentGetStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentGetStateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMConsultStudentGetStateReq::Swap(IMConsultStudentGetStateReq* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentGetStateReq::GetTypeName() const {
  return "IM.Consult.IMConsultStudentGetStateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultStudentGetStateResp::kStudentIdFieldNumber;
const int IMConsultStudentGetStateResp::kOrderIdFieldNumber;
const int IMConsultStudentGetStateResp::kStateFieldNumber;
const int IMConsultStudentGetStateResp::kConsultIdFieldNumber;
const int IMConsultStudentGetStateResp::kConsultTeacherIdFieldNumber;
const int IMConsultStudentGetStateResp::kConsultTeacherIdentityFieldNumber;
const int IMConsultStudentGetStateResp::kResultFieldNumber;
const int IMConsultStudentGetStateResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultStudentGetStateResp::IMConsultStudentGetStateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultStudentGetStateResp)
}

void IMConsultStudentGetStateResp::InitAsDefaultInstance() {
}

IMConsultStudentGetStateResp::IMConsultStudentGetStateResp(const IMConsultStudentGetStateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultStudentGetStateResp)
}

void IMConsultStudentGetStateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  student_id_ = 0u;
  order_id_ = 0u;
  state_ = 0u;
  consult_id_ = 0u;
  consult_teacher_id_ = 0u;
  consult_teacher_identity_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultStudentGetStateResp::~IMConsultStudentGetStateResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultStudentGetStateResp)
  SharedDtor();
}

void IMConsultStudentGetStateResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultStudentGetStateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultStudentGetStateResp& IMConsultStudentGetStateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultStudentGetStateResp* IMConsultStudentGetStateResp::default_instance_ = NULL;

IMConsultStudentGetStateResp* IMConsultStudentGetStateResp::New() const {
  return new IMConsultStudentGetStateResp;
}

void IMConsultStudentGetStateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultStudentGetStateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(student_id_, consult_teacher_identity_);
    result_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultStudentGetStateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultStudentGetStateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 student_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_consult_id;
        break;
      }

      // required uint32 consult_id = 4;
      case 4: {
        if (tag == 32) {
         parse_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_id_)));
          set_has_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consult_teacher_id;
        break;
      }

      // required uint32 consult_teacher_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consult_teacher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_teacher_id_)));
          set_has_consult_teacher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_consult_teacher_identity;
        break;
      }

      // required uint32 consult_teacher_identity = 6;
      case 6: {
        if (tag == 48) {
         parse_consult_teacher_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_teacher_identity_)));
          set_has_consult_teacher_identity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // required uint32 result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultStudentGetStateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultStudentGetStateResp)
  return false;
#undef DO_
}

void IMConsultStudentGetStateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultStudentGetStateResp)
  // required uint32 student_id = 1;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->student_id(), output);
  }

  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required uint32 consult_id = 4;
  if (has_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consult_id(), output);
  }

  // required uint32 consult_teacher_id = 5;
  if (has_consult_teacher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consult_teacher_id(), output);
  }

  // required uint32 consult_teacher_identity = 6;
  if (has_consult_teacher_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consult_teacher_identity(), output);
  }

  // required uint32 result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultStudentGetStateResp)
}

int IMConsultStudentGetStateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 student_id = 1;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 consult_id = 4;
    if (has_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_id());
    }

    // required uint32 consult_teacher_id = 5;
    if (has_consult_teacher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_teacher_id());
    }

    // required uint32 consult_teacher_identity = 6;
    if (has_consult_teacher_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consult_teacher_identity());
    }

    // required uint32 result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultStudentGetStateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultStudentGetStateResp*>(&from));
}

void IMConsultStudentGetStateResp::MergeFrom(const IMConsultStudentGetStateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_consult_id()) {
      set_consult_id(from.consult_id());
    }
    if (from.has_consult_teacher_id()) {
      set_consult_teacher_id(from.consult_teacher_id());
    }
    if (from.has_consult_teacher_identity()) {
      set_consult_teacher_identity(from.consult_teacher_identity());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultStudentGetStateResp::CopyFrom(const IMConsultStudentGetStateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultStudentGetStateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void IMConsultStudentGetStateResp::Swap(IMConsultStudentGetStateResp* other) {
  if (other != this) {
    std::swap(student_id_, other->student_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(state_, other->state_);
    std::swap(consult_id_, other->consult_id_);
    std::swap(consult_teacher_id_, other->consult_teacher_id_);
    std::swap(consult_teacher_identity_, other->consult_teacher_identity_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultStudentGetStateResp::GetTypeName() const {
  return "IM.Consult.IMConsultStudentGetStateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetStudentConsultTeacherListReq::kRequestIdFieldNumber;
const int IMConsultGetStudentConsultTeacherListReq::kStudentIdFieldNumber;
const int IMConsultGetStudentConsultTeacherListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetStudentConsultTeacherListReq::IMConsultGetStudentConsultTeacherListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
}

void IMConsultGetStudentConsultTeacherListReq::InitAsDefaultInstance() {
}

IMConsultGetStudentConsultTeacherListReq::IMConsultGetStudentConsultTeacherListReq(const IMConsultGetStudentConsultTeacherListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
}

void IMConsultGetStudentConsultTeacherListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetStudentConsultTeacherListReq::~IMConsultGetStudentConsultTeacherListReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
  SharedDtor();
}

void IMConsultGetStudentConsultTeacherListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetStudentConsultTeacherListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetStudentConsultTeacherListReq& IMConsultGetStudentConsultTeacherListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetStudentConsultTeacherListReq* IMConsultGetStudentConsultTeacherListReq::default_instance_ = NULL;

IMConsultGetStudentConsultTeacherListReq* IMConsultGetStudentConsultTeacherListReq::New() const {
  return new IMConsultGetStudentConsultTeacherListReq;
}

void IMConsultGetStudentConsultTeacherListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetStudentConsultTeacherListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(request_id_, student_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetStudentConsultTeacherListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
  return false;
#undef DO_
}

void IMConsultGetStudentConsultTeacherListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetStudentConsultTeacherListReq)
}

int IMConsultGetStudentConsultTeacherListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetStudentConsultTeacherListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetStudentConsultTeacherListReq*>(&from));
}

void IMConsultGetStudentConsultTeacherListReq::MergeFrom(const IMConsultGetStudentConsultTeacherListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetStudentConsultTeacherListReq::CopyFrom(const IMConsultGetStudentConsultTeacherListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetStudentConsultTeacherListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMConsultGetStudentConsultTeacherListReq::Swap(IMConsultGetStudentConsultTeacherListReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetStudentConsultTeacherListReq::GetTypeName() const {
  return "IM.Consult.IMConsultGetStudentConsultTeacherListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultGetStudentConsultTeacherListResp::kRequestIdFieldNumber;
const int IMConsultGetStudentConsultTeacherListResp::kStudentIdFieldNumber;
const int IMConsultGetStudentConsultTeacherListResp::kTeacherIdListFieldNumber;
const int IMConsultGetStudentConsultTeacherListResp::kResultFieldNumber;
const int IMConsultGetStudentConsultTeacherListResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultGetStudentConsultTeacherListResp::IMConsultGetStudentConsultTeacherListResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
}

void IMConsultGetStudentConsultTeacherListResp::InitAsDefaultInstance() {
}

IMConsultGetStudentConsultTeacherListResp::IMConsultGetStudentConsultTeacherListResp(const IMConsultGetStudentConsultTeacherListResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
}

void IMConsultGetStudentConsultTeacherListResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_ = 0u;
  student_id_ = 0u;
  result_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultGetStudentConsultTeacherListResp::~IMConsultGetStudentConsultTeacherListResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
  SharedDtor();
}

void IMConsultGetStudentConsultTeacherListResp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultGetStudentConsultTeacherListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultGetStudentConsultTeacherListResp& IMConsultGetStudentConsultTeacherListResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultGetStudentConsultTeacherListResp* IMConsultGetStudentConsultTeacherListResp::default_instance_ = NULL;

IMConsultGetStudentConsultTeacherListResp* IMConsultGetStudentConsultTeacherListResp::New() const {
  return new IMConsultGetStudentConsultTeacherListResp;
}

void IMConsultGetStudentConsultTeacherListResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultGetStudentConsultTeacherListResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(request_id_, student_id_);
    result_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teacher_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultGetStudentConsultTeacherListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id_list;
        break;
      }

      // repeated uint32 teacher_id_list = 3;
      case 3: {
        if (tag == 24) {
         parse_teacher_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_teacher_id_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teacher_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teacher_id_list;
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required uint32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
  return false;
#undef DO_
}

void IMConsultGetStudentConsultTeacherListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // repeated uint32 teacher_id_list = 3;
  for (int i = 0; i < this->teacher_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->teacher_id_list(i), output);
  }

  // required uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultGetStudentConsultTeacherListResp)
}

int IMConsultGetStudentConsultTeacherListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 teacher_id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->teacher_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teacher_id_list(i));
    }
    total_size += 1 * this->teacher_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultGetStudentConsultTeacherListResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultGetStudentConsultTeacherListResp*>(&from));
}

void IMConsultGetStudentConsultTeacherListResp::MergeFrom(const IMConsultGetStudentConsultTeacherListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teacher_id_list_.MergeFrom(from.teacher_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultGetStudentConsultTeacherListResp::CopyFrom(const IMConsultGetStudentConsultTeacherListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultGetStudentConsultTeacherListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void IMConsultGetStudentConsultTeacherListResp::Swap(IMConsultGetStudentConsultTeacherListResp* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(student_id_, other->student_id_);
    teacher_id_list_.Swap(&other->teacher_id_list_);
    std::swap(result_, other->result_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultGetStudentConsultTeacherListResp::GetTypeName() const {
  return "IM.Consult.IMConsultGetStudentConsultTeacherListResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultDeliverReq::kDutyIdFieldNumber;
const int IMConsultDeliverReq::kStudentIdFieldNumber;
const int IMConsultDeliverReq::kManagerIdFieldNumber;
const int IMConsultDeliverReq::kOrderIdFieldNumber;
const int IMConsultDeliverReq::kDeliverTypeFieldNumber;
const int IMConsultDeliverReq::kDeliverConsultIdFieldNumber;
const int IMConsultDeliverReq::kManagerNameFieldNumber;
const int IMConsultDeliverReq::kManagerPortraitFieldNumber;
const int IMConsultDeliverReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultDeliverReq::IMConsultDeliverReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultDeliverReq)
}

void IMConsultDeliverReq::InitAsDefaultInstance() {
}

IMConsultDeliverReq::IMConsultDeliverReq(const IMConsultDeliverReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultDeliverReq)
}

void IMConsultDeliverReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duty_id_ = 0u;
  student_id_ = 0u;
  manager_id_ = 0u;
  order_id_ = 0u;
  deliver_type_ = 0u;
  deliver_consult_id_ = 0u;
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultDeliverReq::~IMConsultDeliverReq() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultDeliverReq)
  SharedDtor();
}

void IMConsultDeliverReq::SharedDtor() {
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultDeliverReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultDeliverReq& IMConsultDeliverReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultDeliverReq* IMConsultDeliverReq::default_instance_ = NULL;

IMConsultDeliverReq* IMConsultDeliverReq::New() const {
  return new IMConsultDeliverReq;
}

void IMConsultDeliverReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultDeliverReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(duty_id_, deliver_consult_id_);
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultDeliverReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultDeliverReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 duty_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duty_id_)));
          set_has_duty_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_manager_id;
        break;
      }

      // required uint32 manager_id = 3;
      case 3: {
        if (tag == 24) {
         parse_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manager_id_)));
          set_has_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deliver_type;
        break;
      }

      // required uint32 deliver_type = 5;
      case 5: {
        if (tag == 40) {
         parse_deliver_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deliver_type_)));
          set_has_deliver_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deliver_consult_id;
        break;
      }

      // required uint32 deliver_consult_id = 6;
      case 6: {
        if (tag == 48) {
         parse_deliver_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deliver_consult_id_)));
          set_has_deliver_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 7;
      case 7: {
        if (tag == 58) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 8;
      case 8: {
        if (tag == 66) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultDeliverReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultDeliverReq)
  return false;
#undef DO_
}

void IMConsultDeliverReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultDeliverReq)
  // required uint32 duty_id = 1;
  if (has_duty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duty_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 manager_id = 3;
  if (has_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manager_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 deliver_type = 5;
  if (has_deliver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deliver_type(), output);
  }

  // required uint32 deliver_consult_id = 6;
  if (has_deliver_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deliver_consult_id(), output);
  }

  // optional string manager_name = 7;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manager_name(), output);
  }

  // optional string manager_portrait = 8;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manager_portrait(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultDeliverReq)
}

int IMConsultDeliverReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 duty_id = 1;
    if (has_duty_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duty_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 manager_id = 3;
    if (has_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manager_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 deliver_type = 5;
    if (has_deliver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deliver_type());
    }

    // required uint32 deliver_consult_id = 6;
    if (has_deliver_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deliver_consult_id());
    }

    // optional string manager_name = 7;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string manager_portrait = 8;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultDeliverReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultDeliverReq*>(&from));
}

void IMConsultDeliverReq::MergeFrom(const IMConsultDeliverReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duty_id()) {
      set_duty_id(from.duty_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_manager_id()) {
      set_manager_id(from.manager_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_deliver_type()) {
      set_deliver_type(from.deliver_type());
    }
    if (from.has_deliver_consult_id()) {
      set_deliver_consult_id(from.deliver_consult_id());
    }
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultDeliverReq::CopyFrom(const IMConsultDeliverReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultDeliverReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMConsultDeliverReq::Swap(IMConsultDeliverReq* other) {
  if (other != this) {
    std::swap(duty_id_, other->duty_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(manager_id_, other->manager_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(deliver_type_, other->deliver_type_);
    std::swap(deliver_consult_id_, other->deliver_consult_id_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultDeliverReq::GetTypeName() const {
  return "IM.Consult.IMConsultDeliverReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultDeliverResp::kDutyIdFieldNumber;
const int IMConsultDeliverResp::kStudentIdFieldNumber;
const int IMConsultDeliverResp::kManagerIdFieldNumber;
const int IMConsultDeliverResp::kOrderIdFieldNumber;
const int IMConsultDeliverResp::kDeliverTypeFieldNumber;
const int IMConsultDeliverResp::kDeliverConsultIdFieldNumber;
const int IMConsultDeliverResp::kNewConsultIdFieldNumber;
const int IMConsultDeliverResp::kResultFieldNumber;
const int IMConsultDeliverResp::kScriptFieldNumber;
const int IMConsultDeliverResp::kManagerNameFieldNumber;
const int IMConsultDeliverResp::kManagerPortraitFieldNumber;
const int IMConsultDeliverResp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMConsultDeliverResp::IMConsultDeliverResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultDeliverResp)
}

void IMConsultDeliverResp::InitAsDefaultInstance() {
}

IMConsultDeliverResp::IMConsultDeliverResp(const IMConsultDeliverResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultDeliverResp)
}

void IMConsultDeliverResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duty_id_ = 0u;
  student_id_ = 0u;
  manager_id_ = 0u;
  order_id_ = 0u;
  deliver_type_ = 0u;
  deliver_consult_id_ = 0u;
  new_consult_id_ = 0u;
  result_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultDeliverResp::~IMConsultDeliverResp() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultDeliverResp)
  SharedDtor();
}

void IMConsultDeliverResp::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultDeliverResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultDeliverResp& IMConsultDeliverResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultDeliverResp* IMConsultDeliverResp::default_instance_ = NULL;

IMConsultDeliverResp* IMConsultDeliverResp::New() const {
  return new IMConsultDeliverResp;
}

void IMConsultDeliverResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultDeliverResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(duty_id_, result_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultDeliverResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultDeliverResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 duty_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duty_id_)));
          set_has_duty_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 2;
      case 2: {
        if (tag == 16) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_manager_id;
        break;
      }

      // required uint32 manager_id = 3;
      case 3: {
        if (tag == 24) {
         parse_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manager_id_)));
          set_has_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 4;
      case 4: {
        if (tag == 32) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deliver_type;
        break;
      }

      // required uint32 deliver_type = 5;
      case 5: {
        if (tag == 40) {
         parse_deliver_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deliver_type_)));
          set_has_deliver_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deliver_consult_id;
        break;
      }

      // required uint32 deliver_consult_id = 6;
      case 6: {
        if (tag == 48) {
         parse_deliver_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deliver_consult_id_)));
          set_has_deliver_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_new_consult_id;
        break;
      }

      // required uint32 new_consult_id = 7;
      case 7: {
        if (tag == 56) {
         parse_new_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_consult_id_)));
          set_has_new_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // required uint32 result = 8;
      case 8: {
        if (tag == 64) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_script;
        break;
      }

      // optional bytes script = 9;
      case 9: {
        if (tag == 74) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 10;
      case 10: {
        if (tag == 82) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 11;
      case 11: {
        if (tag == 90) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultDeliverResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultDeliverResp)
  return false;
#undef DO_
}

void IMConsultDeliverResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultDeliverResp)
  // required uint32 duty_id = 1;
  if (has_duty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duty_id(), output);
  }

  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }

  // required uint32 manager_id = 3;
  if (has_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manager_id(), output);
  }

  // required uint32 order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order_id(), output);
  }

  // required uint32 deliver_type = 5;
  if (has_deliver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deliver_type(), output);
  }

  // required uint32 deliver_consult_id = 6;
  if (has_deliver_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deliver_consult_id(), output);
  }

  // required uint32 new_consult_id = 7;
  if (has_new_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_consult_id(), output);
  }

  // required uint32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result(), output);
  }

  // optional bytes script = 9;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->script(), output);
  }

  // optional string manager_name = 10;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->manager_name(), output);
  }

  // optional string manager_portrait = 11;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->manager_portrait(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultDeliverResp)
}

int IMConsultDeliverResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 duty_id = 1;
    if (has_duty_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duty_id());
    }

    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 manager_id = 3;
    if (has_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manager_id());
    }

    // required uint32 order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 deliver_type = 5;
    if (has_deliver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deliver_type());
    }

    // required uint32 deliver_consult_id = 6;
    if (has_deliver_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deliver_consult_id());
    }

    // required uint32 new_consult_id = 7;
    if (has_new_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_consult_id());
    }

    // required uint32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes script = 9;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional string manager_name = 10;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string manager_portrait = 11;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultDeliverResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultDeliverResp*>(&from));
}

void IMConsultDeliverResp::MergeFrom(const IMConsultDeliverResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duty_id()) {
      set_duty_id(from.duty_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_manager_id()) {
      set_manager_id(from.manager_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_deliver_type()) {
      set_deliver_type(from.deliver_type());
    }
    if (from.has_deliver_consult_id()) {
      set_deliver_consult_id(from.deliver_consult_id());
    }
    if (from.has_new_consult_id()) {
      set_new_consult_id(from.new_consult_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultDeliverResp::CopyFrom(const IMConsultDeliverResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultDeliverResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void IMConsultDeliverResp::Swap(IMConsultDeliverResp* other) {
  if (other != this) {
    std::swap(duty_id_, other->duty_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(manager_id_, other->manager_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(deliver_type_, other->deliver_type_);
    std::swap(deliver_consult_id_, other->deliver_consult_id_);
    std::swap(new_consult_id_, other->new_consult_id_);
    std::swap(result_, other->result_);
    std::swap(script_, other->script_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultDeliverResp::GetTypeName() const {
  return "IM.Consult.IMConsultDeliverResp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMConsultDeliverAnnounce::kOldConsultIdFieldNumber;
const int IMConsultDeliverAnnounce::kNewConsultIdFieldNumber;
const int IMConsultDeliverAnnounce::kStudentIdFieldNumber;
const int IMConsultDeliverAnnounce::kDutyIdFieldNumber;
const int IMConsultDeliverAnnounce::kManagerIdFieldNumber;
const int IMConsultDeliverAnnounce::kOrderIdFieldNumber;
const int IMConsultDeliverAnnounce::kDeliverTypeFieldNumber;
const int IMConsultDeliverAnnounce::kScriptFieldNumber;
const int IMConsultDeliverAnnounce::kConsultMsgListFieldNumber;
const int IMConsultDeliverAnnounce::kManagerNameFieldNumber;
const int IMConsultDeliverAnnounce::kManagerPortraitFieldNumber;
#endif  // !_MSC_VER

IMConsultDeliverAnnounce::IMConsultDeliverAnnounce()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Consult.IMConsultDeliverAnnounce)
}

void IMConsultDeliverAnnounce::InitAsDefaultInstance() {
}

IMConsultDeliverAnnounce::IMConsultDeliverAnnounce(const IMConsultDeliverAnnounce& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Consult.IMConsultDeliverAnnounce)
}

void IMConsultDeliverAnnounce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  old_consult_id_ = 0u;
  new_consult_id_ = 0u;
  student_id_ = 0u;
  duty_id_ = 0u;
  manager_id_ = 0u;
  order_id_ = 0u;
  deliver_type_ = 0u;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manager_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMConsultDeliverAnnounce::~IMConsultDeliverAnnounce() {
  // @@protoc_insertion_point(destructor:IM.Consult.IMConsultDeliverAnnounce)
  SharedDtor();
}

void IMConsultDeliverAnnounce::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_name_;
  }
  if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manager_portrait_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMConsultDeliverAnnounce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMConsultDeliverAnnounce& IMConsultDeliverAnnounce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eConsult_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eConsult_2eproto();
#endif
  return *default_instance_;
}

IMConsultDeliverAnnounce* IMConsultDeliverAnnounce::default_instance_ = NULL;

IMConsultDeliverAnnounce* IMConsultDeliverAnnounce::New() const {
  return new IMConsultDeliverAnnounce;
}

void IMConsultDeliverAnnounce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMConsultDeliverAnnounce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(old_consult_id_, order_id_);
    deliver_type_ = 0u;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    if (has_manager_name()) {
      if (manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_name_->clear();
      }
    }
    if (has_manager_portrait()) {
      if (manager_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manager_portrait_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  consult_msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMConsultDeliverAnnounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Consult.IMConsultDeliverAnnounce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 old_consult_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_consult_id_)));
          set_has_old_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_consult_id;
        break;
      }

      // required uint32 new_consult_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_consult_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_consult_id_)));
          set_has_new_consult_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_student_id;
        break;
      }

      // required uint32 student_id = 3;
      case 3: {
        if (tag == 24) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duty_id;
        break;
      }

      // required uint32 duty_id = 4;
      case 4: {
        if (tag == 32) {
         parse_duty_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duty_id_)));
          set_has_duty_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_manager_id;
        break;
      }

      // required uint32 manager_id = 5;
      case 5: {
        if (tag == 40) {
         parse_manager_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manager_id_)));
          set_has_manager_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_order_id;
        break;
      }

      // required uint32 order_id = 6;
      case 6: {
        if (tag == 48) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deliver_type;
        break;
      }

      // required uint32 deliver_type = 7;
      case 7: {
        if (tag == 56) {
         parse_deliver_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deliver_type_)));
          set_has_deliver_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_script;
        break;
      }

      // optional bytes script = 8;
      case 8: {
        if (tag == 66) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_consult_msg_list;
        break;
      }

      // repeated .IM.BaseDefine.ConsultMsg consult_msg_list = 9;
      case 9: {
        if (tag == 74) {
         parse_consult_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consult_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_consult_msg_list;
        if (input->ExpectTag(82)) goto parse_manager_name;
        break;
      }

      // optional string manager_name = 10;
      case 10: {
        if (tag == 82) {
         parse_manager_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_manager_portrait;
        break;
      }

      // optional string manager_portrait = 11;
      case 11: {
        if (tag == 90) {
         parse_manager_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Consult.IMConsultDeliverAnnounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Consult.IMConsultDeliverAnnounce)
  return false;
#undef DO_
}

void IMConsultDeliverAnnounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Consult.IMConsultDeliverAnnounce)
  // required uint32 old_consult_id = 1;
  if (has_old_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_consult_id(), output);
  }

  // required uint32 new_consult_id = 2;
  if (has_new_consult_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_consult_id(), output);
  }

  // required uint32 student_id = 3;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->student_id(), output);
  }

  // required uint32 duty_id = 4;
  if (has_duty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duty_id(), output);
  }

  // required uint32 manager_id = 5;
  if (has_manager_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->manager_id(), output);
  }

  // required uint32 order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->order_id(), output);
  }

  // required uint32 deliver_type = 7;
  if (has_deliver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deliver_type(), output);
  }

  // optional bytes script = 8;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->script(), output);
  }

  // repeated .IM.BaseDefine.ConsultMsg consult_msg_list = 9;
  for (int i = 0; i < this->consult_msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->consult_msg_list(i), output);
  }

  // optional string manager_name = 10;
  if (has_manager_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->manager_name(), output);
  }

  // optional string manager_portrait = 11;
  if (has_manager_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->manager_portrait(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Consult.IMConsultDeliverAnnounce)
}

int IMConsultDeliverAnnounce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 old_consult_id = 1;
    if (has_old_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_consult_id());
    }

    // required uint32 new_consult_id = 2;
    if (has_new_consult_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_consult_id());
    }

    // required uint32 student_id = 3;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }

    // required uint32 duty_id = 4;
    if (has_duty_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duty_id());
    }

    // required uint32 manager_id = 5;
    if (has_manager_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manager_id());
    }

    // required uint32 order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // required uint32 deliver_type = 7;
    if (has_deliver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deliver_type());
    }

    // optional bytes script = 8;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string manager_name = 10;
    if (has_manager_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_name());
    }

    // optional string manager_portrait = 11;
    if (has_manager_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_portrait());
    }

  }
  // repeated .IM.BaseDefine.ConsultMsg consult_msg_list = 9;
  total_size += 1 * this->consult_msg_list_size();
  for (int i = 0; i < this->consult_msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consult_msg_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMConsultDeliverAnnounce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMConsultDeliverAnnounce*>(&from));
}

void IMConsultDeliverAnnounce::MergeFrom(const IMConsultDeliverAnnounce& from) {
  GOOGLE_CHECK_NE(&from, this);
  consult_msg_list_.MergeFrom(from.consult_msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_consult_id()) {
      set_old_consult_id(from.old_consult_id());
    }
    if (from.has_new_consult_id()) {
      set_new_consult_id(from.new_consult_id());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_duty_id()) {
      set_duty_id(from.duty_id());
    }
    if (from.has_manager_id()) {
      set_manager_id(from.manager_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_deliver_type()) {
      set_deliver_type(from.deliver_type());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_manager_name()) {
      set_manager_name(from.manager_name());
    }
    if (from.has_manager_portrait()) {
      set_manager_portrait(from.manager_portrait());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMConsultDeliverAnnounce::CopyFrom(const IMConsultDeliverAnnounce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMConsultDeliverAnnounce::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->consult_msg_list())) return false;
  return true;
}

void IMConsultDeliverAnnounce::Swap(IMConsultDeliverAnnounce* other) {
  if (other != this) {
    std::swap(old_consult_id_, other->old_consult_id_);
    std::swap(new_consult_id_, other->new_consult_id_);
    std::swap(student_id_, other->student_id_);
    std::swap(duty_id_, other->duty_id_);
    std::swap(manager_id_, other->manager_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(deliver_type_, other->deliver_type_);
    std::swap(script_, other->script_);
    consult_msg_list_.Swap(&other->consult_msg_list_);
    std::swap(manager_name_, other->manager_name_);
    std::swap(manager_portrait_, other->manager_portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMConsultDeliverAnnounce::GetTypeName() const {
  return "IM.Consult.IMConsultDeliverAnnounce";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Consult
}  // namespace IM

// @@protoc_insertion_point(global_scope)
