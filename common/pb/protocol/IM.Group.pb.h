// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#ifndef PROTOBUF_IM_2eGroup_2eproto__INCLUDED
#define PROTOBUF_IM_2eGroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Group {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eGroup_2eproto();
void protobuf_AssignDesc_IM_2eGroup_2eproto();
void protobuf_ShutdownFile_IM_2eGroup_2eproto();

class IMNormalGroupListReq;
class IMNormalGroupListRsp;
class IMGroupInfoListReq;
class IMGroupInfoListRsp;
class IMGroupCreateReq;
class IMGroupCreateRsp;
class IMGroupChangeMemberReq;
class IMGroupChangeMemberRsp;
class IMGroupShieldReq;
class IMGroupShieldRsp;
class IMGroupDescpReq;
class IMGroupDescpResp;
class IMGroupMemberShieldReq;
class IMGroupMemberShieldResp;
class IMGroupMsgDataRevokeReq;
class IMGroupMsgDataRevokeResp;
class IMGroupChangeMemberNotify;
class IMGroupSetAnnounceReq;
class IMGroupSetAnnounceResp;
class IMGroupGetAnnounceReq;
class IMGroupGetAnnounceResp;
class IMGroupRemoveAnnounceReq;
class IMGroupRemoveAnnounceResp;
class IMGroupManagementModifyReq;
class IMGroupManagementModifyResp;
class IMGroupAtReq;
class IMGroupAtResp;
class IMGroupMemberInviteReq;
class IMGroupMemberInviteResp;
class IMGroupMemberKickReq;
class IMGroupMemberKickResp;
class IMGroupMemberApplyReq;
class IMGroupMemberApplyResp;
class IMGroupMemberReviewReq;
class IMGroupMemberReviewResp;
class IMGroupMemberQuitReq;
class IMGroupMemberQuitResp;
class IMGroupMemberDismissReq;
class IMGroupMemberDismissResp;
class IMGroupInfoModifyReq;
class IMGroupInfoModifyResp;
class IMGroupForbiddenReq;
class IMGroupForbiddenResp;
class IMGroupSetMemberIdentityReq;
class IMGroupSetMemberIdentityResp;
class IMGroupMemberInfoUpdateReq;
class IMGroupMemberInfoUpdateResp;
class IMGroupMemberForbiddenReq;
class IMGroupMemberForbiddenResp;
class IMGroupBaseInfoAlterNotify;
class IMGroupMemberListAlterNotify;
class IMMemberBaseInfoAlterNotify;
class IMGroupMemberIdentityAlterNotify;
class IMGroupSetAnnounceAlterNotify;
class IMGroupManagementModifyAlterNotify;
class IMGroupAtAlterNotify;
class IMGroupRemoveAnnounceAlterNotify;
class IMGroupMemberInfoReq;
class IMGroupMemberInfoResp;

// ===================================================================

class IMNormalGroupListReq : public ::google::protobuf::MessageLite {
 public:
  IMNormalGroupListReq();
  virtual ~IMNormalGroupListReq();

  IMNormalGroupListReq(const IMNormalGroupListReq& from);

  inline IMNormalGroupListReq& operator=(const IMNormalGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMNormalGroupListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMNormalGroupListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMNormalGroupListReq* other);

  // implements Message ----------------------------------------------

  IMNormalGroupListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMNormalGroupListReq& from);
  void MergeFrom(const IMNormalGroupListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMNormalGroupListReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMNormalGroupListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMNormalGroupListRsp : public ::google::protobuf::MessageLite {
 public:
  IMNormalGroupListRsp();
  virtual ~IMNormalGroupListRsp();

  IMNormalGroupListRsp(const IMNormalGroupListRsp& from);

  inline IMNormalGroupListRsp& operator=(const IMNormalGroupListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMNormalGroupListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMNormalGroupListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMNormalGroupListRsp* other);

  // implements Message ----------------------------------------------

  IMNormalGroupListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMNormalGroupListRsp& from);
  void MergeFrom(const IMNormalGroupListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  inline int group_version_list_size() const;
  inline void clear_group_version_list();
  static const int kGroupVersionListFieldNumber = 2;
  inline const ::IM::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  inline ::IM::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  inline ::IM::BaseDefine::GroupVersionInfo* add_group_version_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
      group_version_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMNormalGroupListRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo > group_version_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMNormalGroupListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoListReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoListReq();
  virtual ~IMGroupInfoListReq();

  IMGroupInfoListReq(const IMGroupInfoListReq& from);

  inline IMGroupInfoListReq& operator=(const IMGroupInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoListReq* other);

  // implements Message ----------------------------------------------

  IMGroupInfoListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoListReq& from);
  void MergeFrom(const IMGroupInfoListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  inline int group_version_list_size() const;
  inline void clear_group_version_list();
  static const int kGroupVersionListFieldNumber = 2;
  inline const ::IM::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  inline ::IM::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  inline ::IM::BaseDefine::GroupVersionInfo* add_group_version_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
      group_version_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoListReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo > group_version_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoListRsp();
  virtual ~IMGroupInfoListRsp();

  IMGroupInfoListRsp(const IMGroupInfoListRsp& from);

  inline IMGroupInfoListRsp& operator=(const IMGroupInfoListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoListRsp* other);

  // implements Message ----------------------------------------------

  IMGroupInfoListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoListRsp& from);
  void MergeFrom(const IMGroupInfoListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  inline int group_info_list_size() const;
  inline void clear_group_info_list();
  static const int kGroupInfoListFieldNumber = 2;
  inline const ::IM::BaseDefine::GroupInfo& group_info_list(int index) const;
  inline ::IM::BaseDefine::GroupInfo* mutable_group_info_list(int index);
  inline ::IM::BaseDefine::GroupInfo* add_group_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
      group_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
      mutable_group_info_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoListRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo > group_info_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupCreateReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupCreateReq();
  virtual ~IMGroupCreateReq();

  IMGroupCreateReq(const IMGroupCreateReq& from);

  inline IMGroupCreateReq& operator=(const IMGroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupCreateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupCreateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupCreateReq* other);

  // implements Message ----------------------------------------------

  IMGroupCreateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupCreateReq& from);
  void MergeFrom(const IMGroupCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required string group_name = 3;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 4;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 4;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // repeated uint32 member_id_list = 5;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_id_list(int index) const;
  inline void set_member_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int group_type_;
  ::std::string* group_name_;
  ::std::string* group_avatar_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupCreateRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupCreateRsp();
  virtual ~IMGroupCreateRsp();

  IMGroupCreateRsp(const IMGroupCreateRsp& from);

  inline IMGroupCreateRsp& operator=(const IMGroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupCreateRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupCreateRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupCreateRsp* other);

  // implements Message ----------------------------------------------

  IMGroupCreateRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupCreateRsp& from);
  void MergeFrom(const IMGroupCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 4;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // repeated uint32 user_id_list = 5;
  inline int user_id_list_size() const;
  inline void clear_user_id_list();
  static const int kUserIdListFieldNumber = 5;
  inline ::google::protobuf::uint32 user_id_list(int index) const;
  inline void set_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupCreateRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* group_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberReq();
  virtual ~IMGroupChangeMemberReq();

  IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from);

  inline IMGroupChangeMemberReq& operator=(const IMGroupChangeMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberReq* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberReq& from);
  void MergeFrom(const IMGroupChangeMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupModifyType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupModifyType value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 member_id_list = 4;
  inline int member_id_list_size() const;
  inline void clear_member_id_list();
  static const int kMemberIdListFieldNumber = 4;
  inline ::google::protobuf::uint32 member_id_list(int index) const;
  inline void set_member_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int change_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberRsp();
  virtual ~IMGroupChangeMemberRsp();

  IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from);

  inline IMGroupChangeMemberRsp& operator=(const IMGroupChangeMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberRsp* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberRsp& from);
  void MergeFrom(const IMGroupChangeMemberRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupModifyType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupModifyType value);

  // required uint32 result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 cur_user_id_list = 5;
  inline int cur_user_id_list_size() const;
  inline void clear_cur_user_id_list();
  static const int kCurUserIdListFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_user_id_list(int index) const;
  inline void set_cur_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_cur_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 6;
  inline int chg_user_id_list_size() const;
  inline void clear_chg_user_id_list();
  static const int kChgUserIdListFieldNumber = 6;
  inline ::google::protobuf::uint32 chg_user_id_list(int index) const;
  inline void set_chg_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_chg_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chg_user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chg_user_id_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int change_type_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_user_id_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chg_user_id_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupShieldReq();
  virtual ~IMGroupShieldReq();

  IMGroupShieldReq(const IMGroupShieldReq& from);

  inline IMGroupShieldReq& operator=(const IMGroupShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupShieldReq* other);

  // implements Message ----------------------------------------------

  IMGroupShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupShieldReq& from);
  void MergeFrom(const IMGroupShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 shield_status = 3;
  inline bool has_shield_status() const;
  inline void clear_shield_status();
  static const int kShieldStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 shield_status() const;
  inline void set_shield_status(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupShieldReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_shield_status();
  inline void clear_has_shield_status();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 shield_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupShieldRsp();
  virtual ~IMGroupShieldRsp();

  IMGroupShieldRsp(const IMGroupShieldRsp& from);

  inline IMGroupShieldRsp& operator=(const IMGroupShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupShieldRsp* other);

  // implements Message ----------------------------------------------

  IMGroupShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupShieldRsp& from);
  void MergeFrom(const IMGroupShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupShieldRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDescpReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupDescpReq();
  virtual ~IMGroupDescpReq();

  IMGroupDescpReq(const IMGroupDescpReq& from);

  inline IMGroupDescpReq& operator=(const IMGroupDescpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDescpReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDescpReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDescpReq* other);

  // implements Message ----------------------------------------------

  IMGroupDescpReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDescpReq& from);
  void MergeFrom(const IMGroupDescpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDescpReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDescpReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupDescpResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupDescpResp();
  virtual ~IMGroupDescpResp();

  IMGroupDescpResp(const IMGroupDescpResp& from);

  inline IMGroupDescpResp& operator=(const IMGroupDescpResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupDescpResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupDescpResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupDescpResp* other);

  // implements Message ----------------------------------------------

  IMGroupDescpResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupDescpResp& from);
  void MergeFrom(const IMGroupDescpResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional string group_descrp = 3;
  inline bool has_group_descrp() const;
  inline void clear_group_descrp();
  static const int kGroupDescrpFieldNumber = 3;
  inline const ::std::string& group_descrp() const;
  inline void set_group_descrp(const ::std::string& value);
  inline void set_group_descrp(const char* value);
  inline void set_group_descrp(const char* value, size_t size);
  inline ::std::string* mutable_group_descrp();
  inline ::std::string* release_group_descrp();
  inline void set_allocated_group_descrp(::std::string* group_descrp);

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupDescpResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_descrp();
  inline void clear_has_group_descrp();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_descrp_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupDescpResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberShieldReq();
  virtual ~IMGroupMemberShieldReq();

  IMGroupMemberShieldReq(const IMGroupMemberShieldReq& from);

  inline IMGroupMemberShieldReq& operator=(const IMGroupMemberShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberShieldReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberShieldReq& from);
  void MergeFrom(const IMGroupMemberShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 4;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberShieldReq)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 msg_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberShieldResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberShieldResp();
  virtual ~IMGroupMemberShieldResp();

  IMGroupMemberShieldResp(const IMGroupMemberShieldResp& from);

  inline IMGroupMemberShieldResp& operator=(const IMGroupMemberShieldResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberShieldResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberShieldResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberShieldResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberShieldResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberShieldResp& from);
  void MergeFrom(const IMGroupMemberShieldResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 4;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberShieldResp)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberShieldResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMsgDataRevokeReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMsgDataRevokeReq();
  virtual ~IMGroupMsgDataRevokeReq();

  IMGroupMsgDataRevokeReq(const IMGroupMsgDataRevokeReq& from);

  inline IMGroupMsgDataRevokeReq& operator=(const IMGroupMsgDataRevokeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMsgDataRevokeReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMsgDataRevokeReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMsgDataRevokeReq* other);

  // implements Message ----------------------------------------------

  IMGroupMsgDataRevokeReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMsgDataRevokeReq& from);
  void MergeFrom(const IMGroupMsgDataRevokeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional string reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMsgDataRevokeReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 msg_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMsgDataRevokeReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMsgDataRevokeResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMsgDataRevokeResp();
  virtual ~IMGroupMsgDataRevokeResp();

  IMGroupMsgDataRevokeResp(const IMGroupMsgDataRevokeResp& from);

  inline IMGroupMsgDataRevokeResp& operator=(const IMGroupMsgDataRevokeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMsgDataRevokeResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMsgDataRevokeResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMsgDataRevokeResp* other);

  // implements Message ----------------------------------------------

  IMGroupMsgDataRevokeResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMsgDataRevokeResp& from);
  void MergeFrom(const IMGroupMsgDataRevokeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // optional string reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMsgDataRevokeResp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMsgDataRevokeResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupChangeMemberNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupChangeMemberNotify();
  virtual ~IMGroupChangeMemberNotify();

  IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from);

  inline IMGroupChangeMemberNotify& operator=(const IMGroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupChangeMemberNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupChangeMemberNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupChangeMemberNotify* other);

  // implements Message ----------------------------------------------

  IMGroupChangeMemberNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupChangeMemberNotify& from);
  void MergeFrom(const IMGroupChangeMemberNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupModifyType change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::IM::BaseDefine::GroupModifyType change_type() const;
  inline void set_change_type(::IM::BaseDefine::GroupModifyType value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 cur_user_id_list = 4;
  inline int cur_user_id_list_size() const;
  inline void clear_cur_user_id_list();
  static const int kCurUserIdListFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_user_id_list(int index) const;
  inline void set_cur_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_cur_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cur_user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 5;
  inline int chg_user_id_list_size() const;
  inline void clear_chg_user_id_list();
  static const int kChgUserIdListFieldNumber = 5;
  inline ::google::protobuf::uint32 chg_user_id_list(int index) const;
  inline void set_chg_user_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_chg_user_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chg_user_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chg_user_id_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupChangeMemberNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int change_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cur_user_id_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chg_user_id_list_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupChangeMemberNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetAnnounceReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetAnnounceReq();
  virtual ~IMGroupSetAnnounceReq();

  IMGroupSetAnnounceReq(const IMGroupSetAnnounceReq& from);

  inline IMGroupSetAnnounceReq& operator=(const IMGroupSetAnnounceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetAnnounceReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetAnnounceReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetAnnounceReq* other);

  // implements Message ----------------------------------------------

  IMGroupSetAnnounceReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetAnnounceReq& from);
  void MergeFrom(const IMGroupSetAnnounceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required string announce = 4;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 4;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const char* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional string group_name = 5;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 5;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetAnnounceReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::std::string* announce_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetAnnounceReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetAnnounceResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetAnnounceResp();
  virtual ~IMGroupSetAnnounceResp();

  IMGroupSetAnnounceResp(const IMGroupSetAnnounceResp& from);

  inline IMGroupSetAnnounceResp& operator=(const IMGroupSetAnnounceResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetAnnounceResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetAnnounceResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetAnnounceResp* other);

  // implements Message ----------------------------------------------

  IMGroupSetAnnounceResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetAnnounceResp& from);
  void MergeFrom(const IMGroupSetAnnounceResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required uint32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 result_code = 5;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 6;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 6;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // optional string group_name = 7;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 7;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional string announce = 8;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 8;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const char* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetAnnounceResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* group_name_;
  ::std::string* announce_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetAnnounceResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetAnnounceReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetAnnounceReq();
  virtual ~IMGroupGetAnnounceReq();

  IMGroupGetAnnounceReq(const IMGroupGetAnnounceReq& from);

  inline IMGroupGetAnnounceReq& operator=(const IMGroupGetAnnounceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetAnnounceReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetAnnounceReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetAnnounceReq* other);

  // implements Message ----------------------------------------------

  IMGroupGetAnnounceReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetAnnounceReq& from);
  void MergeFrom(const IMGroupGetAnnounceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupGetAnnounceReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetAnnounceReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetAnnounceResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetAnnounceResp();
  virtual ~IMGroupGetAnnounceResp();

  IMGroupGetAnnounceResp(const IMGroupGetAnnounceResp& from);

  inline IMGroupGetAnnounceResp& operator=(const IMGroupGetAnnounceResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetAnnounceResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetAnnounceResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetAnnounceResp* other);

  // implements Message ----------------------------------------------

  IMGroupGetAnnounceResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetAnnounceResp& from);
  void MergeFrom(const IMGroupGetAnnounceResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string announce = 3;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 3;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const char* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // required string creator_name = 4;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 4;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required uint32 update_time = 5;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupGetAnnounceResp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* announce_;
  ::std::string* creator_name_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetAnnounceResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupRemoveAnnounceReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupRemoveAnnounceReq();
  virtual ~IMGroupRemoveAnnounceReq();

  IMGroupRemoveAnnounceReq(const IMGroupRemoveAnnounceReq& from);

  inline IMGroupRemoveAnnounceReq& operator=(const IMGroupRemoveAnnounceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupRemoveAnnounceReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupRemoveAnnounceReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupRemoveAnnounceReq* other);

  // implements Message ----------------------------------------------

  IMGroupRemoveAnnounceReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupRemoveAnnounceReq& from);
  void MergeFrom(const IMGroupRemoveAnnounceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupRemoveAnnounceReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupRemoveAnnounceReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupRemoveAnnounceResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupRemoveAnnounceResp();
  virtual ~IMGroupRemoveAnnounceResp();

  IMGroupRemoveAnnounceResp(const IMGroupRemoveAnnounceResp& from);

  inline IMGroupRemoveAnnounceResp& operator=(const IMGroupRemoveAnnounceResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupRemoveAnnounceResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupRemoveAnnounceResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupRemoveAnnounceResp* other);

  // implements Message ----------------------------------------------

  IMGroupRemoveAnnounceResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupRemoveAnnounceResp& from);
  void MergeFrom(const IMGroupRemoveAnnounceResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupRemoveAnnounceResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupRemoveAnnounceResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupManagementModifyReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupManagementModifyReq();
  virtual ~IMGroupManagementModifyReq();

  IMGroupManagementModifyReq(const IMGroupManagementModifyReq& from);

  inline IMGroupManagementModifyReq& operator=(const IMGroupManagementModifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupManagementModifyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupManagementModifyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupManagementModifyReq* other);

  // implements Message ----------------------------------------------

  IMGroupManagementModifyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupManagementModifyReq& from);
  void MergeFrom(const IMGroupManagementModifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required uint32 peer_id = 4;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 peer_id() const;
  inline void set_peer_id(::google::protobuf::uint32 value);

  // required string group_name = 5;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 5;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupManagementModifyReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 peer_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupManagementModifyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupManagementModifyResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupManagementModifyResp();
  virtual ~IMGroupManagementModifyResp();

  IMGroupManagementModifyResp(const IMGroupManagementModifyResp& from);

  inline IMGroupManagementModifyResp& operator=(const IMGroupManagementModifyResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupManagementModifyResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupManagementModifyResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupManagementModifyResp* other);

  // implements Message ----------------------------------------------

  IMGroupManagementModifyResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupManagementModifyResp& from);
  void MergeFrom(const IMGroupManagementModifyResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required uint32 peer_id = 4;
  inline bool has_peer_id() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 peer_id() const;
  inline void set_peer_id(::google::protobuf::uint32 value);

  // required string peer_name = 5;
  inline bool has_peer_name() const;
  inline void clear_peer_name();
  static const int kPeerNameFieldNumber = 5;
  inline const ::std::string& peer_name() const;
  inline void set_peer_name(const ::std::string& value);
  inline void set_peer_name(const char* value);
  inline void set_peer_name(const char* value, size_t size);
  inline ::std::string* mutable_peer_name();
  inline ::std::string* release_peer_name();
  inline void set_allocated_peer_name(::std::string* peer_name);

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 7;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 7;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required string group_name = 8;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 8;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupManagementModifyResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_peer_id();
  inline void clear_has_peer_id();
  inline void set_has_peer_name();
  inline void clear_has_peer_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::std::string* peer_name_;
  ::google::protobuf::uint32 peer_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupManagementModifyResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupAtReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupAtReq();
  virtual ~IMGroupAtReq();

  IMGroupAtReq(const IMGroupAtReq& from);

  inline IMGroupAtReq& operator=(const IMGroupAtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupAtReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupAtReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupAtReq* other);

  // implements Message ----------------------------------------------

  IMGroupAtReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupAtReq& from);
  void MergeFrom(const IMGroupAtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 peer_id = 3;
  inline int peer_id_size() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 peer_id(int index) const;
  inline void set_peer_id(int index, ::google::protobuf::uint32 value);
  inline void add_peer_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      peer_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_peer_id();

  // required uint32 group_at_type = 4;
  inline bool has_group_at_type() const;
  inline void clear_group_at_type();
  static const int kGroupAtTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 group_at_type() const;
  inline void set_group_at_type(::google::protobuf::uint32 value);

  // required string from_user_name = 5;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 5;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // optional string group_name = 6;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 6;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional uint32 msg_id = 7;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupAtReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_at_type();
  inline void clear_has_group_at_type();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > peer_id_;
  ::std::string* from_user_name_;
  ::google::protobuf::uint32 group_at_type_;
  ::google::protobuf::uint32 msg_id_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupAtReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupAtResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupAtResp();
  virtual ~IMGroupAtResp();

  IMGroupAtResp(const IMGroupAtResp& from);

  inline IMGroupAtResp& operator=(const IMGroupAtResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupAtResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupAtResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupAtResp* other);

  // implements Message ----------------------------------------------

  IMGroupAtResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupAtResp& from);
  void MergeFrom(const IMGroupAtResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 peer_id = 3;
  inline int peer_id_size() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 peer_id(int index) const;
  inline void set_peer_id(int index, ::google::protobuf::uint32 value);
  inline void add_peer_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      peer_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_peer_id();

  // required uint32 group_at_type = 4;
  inline bool has_group_at_type() const;
  inline void clear_group_at_type();
  static const int kGroupAtTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 group_at_type() const;
  inline void set_group_at_type(::google::protobuf::uint32 value);

  // required string from_user_name = 5;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 5;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required uint32 result_code = 7;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 msg_id = 8;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 8;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupAtResp)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_at_type();
  inline void clear_has_group_at_type();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > peer_id_;
  ::std::string* from_user_name_;
  ::google::protobuf::uint32 group_at_type_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 msg_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupAtResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInviteReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInviteReq();
  virtual ~IMGroupMemberInviteReq();

  IMGroupMemberInviteReq(const IMGroupMemberInviteReq& from);

  inline IMGroupMemberInviteReq& operator=(const IMGroupMemberInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInviteReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInviteReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInviteReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInviteReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInviteReq& from);
  void MergeFrom(const IMGroupMemberInviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 user_id = 3;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // repeated string name = 4;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInviteReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInviteReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInviteResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInviteResp();
  virtual ~IMGroupMemberInviteResp();

  IMGroupMemberInviteResp(const IMGroupMemberInviteResp& from);

  inline IMGroupMemberInviteResp& operator=(const IMGroupMemberInviteResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInviteResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInviteResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInviteResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInviteResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInviteResp& from);
  void MergeFrom(const IMGroupMemberInviteResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 user_id = 3;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // repeated string name = 4;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string group_name = 8;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 8;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInviteResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* group_name_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInviteResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberKickReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberKickReq();
  virtual ~IMGroupMemberKickReq();

  IMGroupMemberKickReq(const IMGroupMemberKickReq& from);

  inline IMGroupMemberKickReq& operator=(const IMGroupMemberKickReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberKickReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberKickReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberKickReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberKickReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberKickReq& from);
  void MergeFrom(const IMGroupMemberKickReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 member_id = 3;
  inline int member_id_size() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 member_id(int index) const;
  inline void set_member_id(int index, ::google::protobuf::uint32 value);
  inline void add_member_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_id();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberKickReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberKickReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberKickResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberKickResp();
  virtual ~IMGroupMemberKickResp();

  IMGroupMemberKickResp(const IMGroupMemberKickResp& from);

  inline IMGroupMemberKickResp& operator=(const IMGroupMemberKickResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberKickResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberKickResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberKickResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberKickResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberKickResp& from);
  void MergeFrom(const IMGroupMemberKickResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 member_id = 3;
  inline int member_id_size() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 member_id(int index) const;
  inline void set_member_id(int index, ::google::protobuf::uint32 value);
  inline void add_member_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_id();

  // repeated string member_name = 4;
  inline int member_name_size() const;
  inline void clear_member_name();
  static const int kMemberNameFieldNumber = 4;
  inline const ::std::string& member_name(int index) const;
  inline ::std::string* mutable_member_name(int index);
  inline void set_member_name(int index, const ::std::string& value);
  inline void set_member_name(int index, const char* value);
  inline void set_member_name(int index, const char* value, size_t size);
  inline ::std::string* add_member_name();
  inline void add_member_name(const ::std::string& value);
  inline void add_member_name(const char* value);
  inline void add_member_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& member_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member_name();

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 8;
  inline int user_token_info_size() const;
  inline void clear_user_token_info();
  static const int kUserTokenInfoFieldNumber = 8;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberKickResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberKickResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberApplyReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberApplyReq();
  virtual ~IMGroupMemberApplyReq();

  IMGroupMemberApplyReq(const IMGroupMemberApplyReq& from);

  inline IMGroupMemberApplyReq& operator=(const IMGroupMemberApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberApplyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberApplyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberApplyReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberApplyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberApplyReq& from);
  void MergeFrom(const IMGroupMemberApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 creator_id = 4;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 4;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberApplyReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* name_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 creator_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberApplyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberApplyResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberApplyResp();
  virtual ~IMGroupMemberApplyResp();

  IMGroupMemberApplyResp(const IMGroupMemberApplyResp& from);

  inline IMGroupMemberApplyResp& operator=(const IMGroupMemberApplyResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberApplyResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberApplyResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberApplyResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberApplyResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberApplyResp& from);
  void MergeFrom(const IMGroupMemberApplyResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 result_code = 5;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberApplyResp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberApplyResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberReviewReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberReviewReq();
  virtual ~IMGroupMemberReviewReq();

  IMGroupMemberReviewReq(const IMGroupMemberReviewReq& from);

  inline IMGroupMemberReviewReq& operator=(const IMGroupMemberReviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberReviewReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberReviewReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberReviewReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberReviewReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberReviewReq& from);
  void MergeFrom(const IMGroupMemberReviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberReviewReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 action_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberReviewReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberReviewResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberReviewResp();
  virtual ~IMGroupMemberReviewResp();

  IMGroupMemberReviewResp(const IMGroupMemberReviewResp& from);

  inline IMGroupMemberReviewResp& operator=(const IMGroupMemberReviewResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberReviewResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberReviewResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberReviewResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberReviewResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberReviewResp& from);
  void MergeFrom(const IMGroupMemberReviewResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint32 action = 7;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 7;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // optional string reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberReviewResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 action_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberReviewResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberQuitReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberQuitReq();
  virtual ~IMGroupMemberQuitReq();

  IMGroupMemberQuitReq(const IMGroupMemberQuitReq& from);

  inline IMGroupMemberQuitReq& operator=(const IMGroupMemberQuitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberQuitReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberQuitReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberQuitReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberQuitReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberQuitReq& from);
  void MergeFrom(const IMGroupMemberQuitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberQuitReq)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* name_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberQuitReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberQuitResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberQuitResp();
  virtual ~IMGroupMemberQuitResp();

  IMGroupMemberQuitResp(const IMGroupMemberQuitResp& from);

  inline IMGroupMemberQuitResp& operator=(const IMGroupMemberQuitResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberQuitResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberQuitResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberQuitResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberQuitResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberQuitResp& from);
  void MergeFrom(const IMGroupMemberQuitResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberQuitResp)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 creator_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberQuitResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberDismissReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberDismissReq();
  virtual ~IMGroupMemberDismissReq();

  IMGroupMemberDismissReq(const IMGroupMemberDismissReq& from);

  inline IMGroupMemberDismissReq& operator=(const IMGroupMemberDismissReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberDismissReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberDismissReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberDismissReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberDismissReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberDismissReq& from);
  void MergeFrom(const IMGroupMemberDismissReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional string reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberDismissReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberDismissReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberDismissResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberDismissResp();
  virtual ~IMGroupMemberDismissResp();

  IMGroupMemberDismissResp(const IMGroupMemberDismissResp& from);

  inline IMGroupMemberDismissResp& operator=(const IMGroupMemberDismissResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberDismissResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberDismissResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberDismissResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberDismissResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberDismissResp& from);
  void MergeFrom(const IMGroupMemberDismissResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 3;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 3;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string group_name = 6;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 6;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 7;
  inline int user_token_info_size() const;
  inline void clear_user_token_info();
  static const int kUserTokenInfoFieldNumber = 7;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberDismissResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* group_name_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberDismissResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoModifyReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoModifyReq();
  virtual ~IMGroupInfoModifyReq();

  IMGroupInfoModifyReq(const IMGroupInfoModifyReq& from);

  inline IMGroupInfoModifyReq& operator=(const IMGroupInfoModifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoModifyReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoModifyReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoModifyReq* other);

  // implements Message ----------------------------------------------

  IMGroupInfoModifyReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoModifyReq& from);
  void MergeFrom(const IMGroupInfoModifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 group_type() const;
  inline void set_group_type(::google::protobuf::uint32 value);

  // required string group_name = 4;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_portrait = 5;
  inline bool has_group_portrait() const;
  inline void clear_group_portrait();
  static const int kGroupPortraitFieldNumber = 5;
  inline const ::std::string& group_portrait() const;
  inline void set_group_portrait(const ::std::string& value);
  inline void set_group_portrait(const char* value);
  inline void set_group_portrait(const char* value, size_t size);
  inline ::std::string* mutable_group_portrait();
  inline ::std::string* release_group_portrait();
  inline void set_allocated_group_portrait(::std::string* group_portrait);

  // optional string group_descrp = 6;
  inline bool has_group_descrp() const;
  inline void clear_group_descrp();
  static const int kGroupDescrpFieldNumber = 6;
  inline const ::std::string& group_descrp() const;
  inline void set_group_descrp(const ::std::string& value);
  inline void set_group_descrp(const char* value);
  inline void set_group_descrp(const char* value, size_t size);
  inline ::std::string* mutable_group_descrp();
  inline ::std::string* release_group_descrp();
  inline void set_allocated_group_descrp(::std::string* group_descrp);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoModifyReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_portrait();
  inline void clear_has_group_portrait();
  inline void set_has_group_descrp();
  inline void clear_has_group_descrp();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::std::string* group_portrait_;
  ::std::string* group_descrp_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoModifyReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupInfoModifyResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupInfoModifyResp();
  virtual ~IMGroupInfoModifyResp();

  IMGroupInfoModifyResp(const IMGroupInfoModifyResp& from);

  inline IMGroupInfoModifyResp& operator=(const IMGroupInfoModifyResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupInfoModifyResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupInfoModifyResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupInfoModifyResp* other);

  // implements Message ----------------------------------------------

  IMGroupInfoModifyResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupInfoModifyResp& from);
  void MergeFrom(const IMGroupInfoModifyResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 group_type = 3;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 group_type() const;
  inline void set_group_type(::google::protobuf::uint32 value);

  // required string group_name = 4;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_portrait = 5;
  inline bool has_group_portrait() const;
  inline void clear_group_portrait();
  static const int kGroupPortraitFieldNumber = 5;
  inline const ::std::string& group_portrait() const;
  inline void set_group_portrait(const ::std::string& value);
  inline void set_group_portrait(const char* value);
  inline void set_group_portrait(const char* value, size_t size);
  inline ::std::string* mutable_group_portrait();
  inline ::std::string* release_group_portrait();
  inline void set_allocated_group_portrait(::std::string* group_portrait);

  // repeated uint32 member_list = 6;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 6;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 7;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string group_descrp = 9;
  inline bool has_group_descrp() const;
  inline void clear_group_descrp();
  static const int kGroupDescrpFieldNumber = 9;
  inline const ::std::string& group_descrp() const;
  inline void set_group_descrp(const ::std::string& value);
  inline void set_group_descrp(const char* value);
  inline void set_group_descrp(const char* value, size_t size);
  inline ::std::string* mutable_group_descrp();
  inline ::std::string* release_group_descrp();
  inline void set_allocated_group_descrp(::std::string* group_descrp);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupInfoModifyResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_portrait();
  inline void clear_has_group_portrait();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_group_descrp();
  inline void clear_has_group_descrp();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::std::string* group_portrait_;
  ::google::protobuf::uint32 group_type_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* group_descrp_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupInfoModifyResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupForbiddenReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupForbiddenReq();
  virtual ~IMGroupForbiddenReq();

  IMGroupForbiddenReq(const IMGroupForbiddenReq& from);

  inline IMGroupForbiddenReq& operator=(const IMGroupForbiddenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupForbiddenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupForbiddenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupForbiddenReq* other);

  // implements Message ----------------------------------------------

  IMGroupForbiddenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupForbiddenReq& from);
  void MergeFrom(const IMGroupForbiddenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional string creator_name = 4;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 4;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupForbiddenReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupForbiddenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupForbiddenResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupForbiddenResp();
  virtual ~IMGroupForbiddenResp();

  IMGroupForbiddenResp(const IMGroupForbiddenResp& from);

  inline IMGroupForbiddenResp& operator=(const IMGroupForbiddenResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupForbiddenResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupForbiddenResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupForbiddenResp* other);

  // implements Message ----------------------------------------------

  IMGroupForbiddenResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupForbiddenResp& from);
  void MergeFrom(const IMGroupForbiddenResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 4;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 4;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 5;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional string creator_name = 7;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 7;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupForbiddenResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* reason_;
  ::std::string* creator_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupForbiddenResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetMemberIdentityReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetMemberIdentityReq();
  virtual ~IMGroupSetMemberIdentityReq();

  IMGroupSetMemberIdentityReq(const IMGroupSetMemberIdentityReq& from);

  inline IMGroupSetMemberIdentityReq& operator=(const IMGroupSetMemberIdentityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetMemberIdentityReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetMemberIdentityReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetMemberIdentityReq* other);

  // implements Message ----------------------------------------------

  IMGroupSetMemberIdentityReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetMemberIdentityReq& from);
  void MergeFrom(const IMGroupSetMemberIdentityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 3;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required string group_name = 4;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 4;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required uint32 degree = 5;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 5;
  inline ::google::protobuf::uint32 degree() const;
  inline void set_degree(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetMemberIdentityReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 degree_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetMemberIdentityReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetMemberIdentityResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetMemberIdentityResp();
  virtual ~IMGroupSetMemberIdentityResp();

  IMGroupSetMemberIdentityResp(const IMGroupSetMemberIdentityResp& from);

  inline IMGroupSetMemberIdentityResp& operator=(const IMGroupSetMemberIdentityResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetMemberIdentityResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetMemberIdentityResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetMemberIdentityResp* other);

  // implements Message ----------------------------------------------

  IMGroupSetMemberIdentityResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetMemberIdentityResp& from);
  void MergeFrom(const IMGroupSetMemberIdentityResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 3;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required uint32 member_id = 4;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 4;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required string member_name = 5;
  inline bool has_member_name() const;
  inline void clear_member_name();
  static const int kMemberNameFieldNumber = 5;
  inline const ::std::string& member_name() const;
  inline void set_member_name(const ::std::string& value);
  inline void set_member_name(const char* value);
  inline void set_member_name(const char* value, size_t size);
  inline ::std::string* mutable_member_name();
  inline ::std::string* release_member_name();
  inline void set_allocated_member_name(::std::string* member_name);

  // required uint32 degree = 6;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 6;
  inline ::google::protobuf::uint32 degree() const;
  inline void set_degree(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 7;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 7;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 8;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 8;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 9;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 9;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetMemberIdentityResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_member_name();
  inline void clear_has_member_name();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::std::string* member_name_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 degree_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetMemberIdentityResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInfoUpdateReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInfoUpdateReq();
  virtual ~IMGroupMemberInfoUpdateReq();

  IMGroupMemberInfoUpdateReq(const IMGroupMemberInfoUpdateReq& from);

  inline IMGroupMemberInfoUpdateReq& operator=(const IMGroupMemberInfoUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInfoUpdateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInfoUpdateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInfoUpdateReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInfoUpdateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInfoUpdateReq& from);
  void MergeFrom(const IMGroupMemberInfoUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInfoUpdateReq)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInfoUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInfoUpdateResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInfoUpdateResp();
  virtual ~IMGroupMemberInfoUpdateResp();

  IMGroupMemberInfoUpdateResp(const IMGroupMemberInfoUpdateResp& from);

  inline IMGroupMemberInfoUpdateResp& operator=(const IMGroupMemberInfoUpdateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInfoUpdateResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInfoUpdateResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInfoUpdateResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInfoUpdateResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInfoUpdateResp& from);
  void MergeFrom(const IMGroupMemberInfoUpdateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 6;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 7;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 7;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInfoUpdateResp)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 creator_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInfoUpdateResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberForbiddenReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberForbiddenReq();
  virtual ~IMGroupMemberForbiddenReq();

  IMGroupMemberForbiddenReq(const IMGroupMemberForbiddenReq& from);

  inline IMGroupMemberForbiddenReq& operator=(const IMGroupMemberForbiddenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberForbiddenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberForbiddenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberForbiddenReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberForbiddenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberForbiddenReq& from);
  void MergeFrom(const IMGroupMemberForbiddenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberForbiddenReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 state_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberForbiddenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberForbiddenResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberForbiddenResp();
  virtual ~IMGroupMemberForbiddenResp();

  IMGroupMemberForbiddenResp(const IMGroupMemberForbiddenResp& from);

  inline IMGroupMemberForbiddenResp& operator=(const IMGroupMemberForbiddenResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberForbiddenResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberForbiddenResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberForbiddenResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberForbiddenResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberForbiddenResp& from);
  void MergeFrom(const IMGroupMemberForbiddenResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 member_id = 1;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required string member_name = 2;
  inline bool has_member_name() const;
  inline void clear_member_name();
  static const int kMemberNameFieldNumber = 2;
  inline const ::std::string& member_name() const;
  inline void set_member_name(const ::std::string& value);
  inline void set_member_name(const char* value);
  inline void set_member_name(const char* value, size_t size);
  inline ::std::string* mutable_member_name();
  inline ::std::string* release_member_name();
  inline void set_allocated_member_name(::std::string* member_name);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 4;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 6;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 6;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // required uint32 result_code = 7;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 8;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 8;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberForbiddenResp)
 private:
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_member_name();
  inline void clear_has_member_name();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* member_name_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberForbiddenResp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupBaseInfoAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupBaseInfoAlterNotify();
  virtual ~IMGroupBaseInfoAlterNotify();

  IMGroupBaseInfoAlterNotify(const IMGroupBaseInfoAlterNotify& from);

  inline IMGroupBaseInfoAlterNotify& operator=(const IMGroupBaseInfoAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupBaseInfoAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupBaseInfoAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupBaseInfoAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupBaseInfoAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupBaseInfoAlterNotify& from);
  void MergeFrom(const IMGroupBaseInfoAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 3;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_descrp = 4;
  inline bool has_group_descrp() const;
  inline void clear_group_descrp();
  static const int kGroupDescrpFieldNumber = 4;
  inline const ::std::string& group_descrp() const;
  inline void set_group_descrp(const ::std::string& value);
  inline void set_group_descrp(const char* value);
  inline void set_group_descrp(const char* value, size_t size);
  inline ::std::string* mutable_group_descrp();
  inline ::std::string* release_group_descrp();
  inline void set_allocated_group_descrp(::std::string* group_descrp);

  // required string group_portrait = 5;
  inline bool has_group_portrait() const;
  inline void clear_group_portrait();
  static const int kGroupPortraitFieldNumber = 5;
  inline const ::std::string& group_portrait() const;
  inline void set_group_portrait(const ::std::string& value);
  inline void set_group_portrait(const char* value);
  inline void set_group_portrait(const char* value, size_t size);
  inline ::std::string* mutable_group_portrait();
  inline ::std::string* release_group_portrait();
  inline void set_allocated_group_portrait(::std::string* group_portrait);

  // required uint32 forbidden = 6;
  inline bool has_forbidden() const;
  inline void clear_forbidden();
  static const int kForbiddenFieldNumber = 6;
  inline ::google::protobuf::uint32 forbidden() const;
  inline void set_forbidden(::google::protobuf::uint32 value);

  // required uint32 creator_id = 7;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 7;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 8;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 8;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // repeated uint32 user_id = 9;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 9;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // repeated string user_name = 10;
  inline int user_name_size() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 10;
  inline const ::std::string& user_name(int index) const;
  inline ::std::string* mutable_user_name(int index);
  inline void set_user_name(int index, const ::std::string& value);
  inline void set_user_name(int index, const char* value);
  inline void set_user_name(int index, const char* value, size_t size);
  inline ::std::string* add_user_name();
  inline void add_user_name(const ::std::string& value);
  inline void add_user_name(const char* value);
  inline void add_user_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_name();

  // optional string creator_name = 11;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 11;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // optional uint32 group_type = 12;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 group_type() const;
  inline void set_group_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupBaseInfoAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_descrp();
  inline void clear_has_group_descrp();
  inline void set_has_group_portrait();
  inline void clear_has_group_portrait();
  inline void set_has_forbidden();
  inline void clear_has_forbidden();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_group_type();
  inline void clear_has_group_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* group_name_;
  ::std::string* group_descrp_;
  ::std::string* group_portrait_;
  ::google::protobuf::uint32 forbidden_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_name_;
  ::std::string* creator_name_;
  ::google::protobuf::uint32 group_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupBaseInfoAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberListAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberListAlterNotify();
  virtual ~IMGroupMemberListAlterNotify();

  IMGroupMemberListAlterNotify(const IMGroupMemberListAlterNotify& from);

  inline IMGroupMemberListAlterNotify& operator=(const IMGroupMemberListAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberListAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberListAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberListAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupMemberListAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberListAlterNotify& from);
  void MergeFrom(const IMGroupMemberListAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // repeated uint32 user_id = 2;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint32 value);
  inline void add_user_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // repeated string user_name = 3;
  inline int user_name_size() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name(int index) const;
  inline ::std::string* mutable_user_name(int index);
  inline void set_user_name(int index, const ::std::string& value);
  inline void set_user_name(int index, const char* value);
  inline void set_user_name(int index, const char* value, size_t size);
  inline ::std::string* add_user_name();
  inline void add_user_name(const ::std::string& value);
  inline void add_user_name(const char* value);
  inline void add_user_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_name();

  // repeated uint32 member_list = 4;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 4;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // optional uint32 creator_id = 5;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 5;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // optional uint32 group_id = 6;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional string group_name = 7;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 7;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberListAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_name_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* group_name_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberListAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMMemberBaseInfoAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMMemberBaseInfoAlterNotify();
  virtual ~IMMemberBaseInfoAlterNotify();

  IMMemberBaseInfoAlterNotify(const IMMemberBaseInfoAlterNotify& from);

  inline IMMemberBaseInfoAlterNotify& operator=(const IMMemberBaseInfoAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMemberBaseInfoAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMemberBaseInfoAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMemberBaseInfoAlterNotify* other);

  // implements Message ----------------------------------------------

  IMMemberBaseInfoAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMemberBaseInfoAlterNotify& from);
  void MergeFrom(const IMMemberBaseInfoAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 degree = 6;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 6;
  inline ::google::protobuf::uint32 degree() const;
  inline void set_degree(::google::protobuf::uint32 value);

  // required uint32 forbidden = 7;
  inline bool has_forbidden() const;
  inline void clear_forbidden();
  static const int kForbiddenFieldNumber = 7;
  inline ::google::protobuf::uint32 forbidden() const;
  inline void set_forbidden(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 8;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 8;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMMemberBaseInfoAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_forbidden();
  inline void clear_has_forbidden();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 degree_;
  ::google::protobuf::uint32 forbidden_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMMemberBaseInfoAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberIdentityAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberIdentityAlterNotify();
  virtual ~IMGroupMemberIdentityAlterNotify();

  IMGroupMemberIdentityAlterNotify(const IMGroupMemberIdentityAlterNotify& from);

  inline IMGroupMemberIdentityAlterNotify& operator=(const IMGroupMemberIdentityAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberIdentityAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberIdentityAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberIdentityAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupMemberIdentityAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberIdentityAlterNotify& from);
  void MergeFrom(const IMGroupMemberIdentityAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string user_name = 5;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 degree = 6;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 6;
  inline ::google::protobuf::uint32 degree() const;
  inline void set_degree(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 7;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 7;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // optional string group_name = 8;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 8;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberIdentityAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  ::std::string* group_name_;
  ::google::protobuf::uint32 degree_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberIdentityAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupSetAnnounceAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupSetAnnounceAlterNotify();
  virtual ~IMGroupSetAnnounceAlterNotify();

  IMGroupSetAnnounceAlterNotify(const IMGroupSetAnnounceAlterNotify& from);

  inline IMGroupSetAnnounceAlterNotify& operator=(const IMGroupSetAnnounceAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupSetAnnounceAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupSetAnnounceAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupSetAnnounceAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupSetAnnounceAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupSetAnnounceAlterNotify& from);
  void MergeFrom(const IMGroupSetAnnounceAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required string creator_name = 4;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 4;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required string announce = 5;
  inline bool has_announce() const;
  inline void clear_announce();
  static const int kAnnounceFieldNumber = 5;
  inline const ::std::string& announce() const;
  inline void set_announce(const ::std::string& value);
  inline void set_announce(const char* value);
  inline void set_announce(const char* value, size_t size);
  inline ::std::string* mutable_announce();
  inline ::std::string* release_announce();
  inline void set_allocated_announce(::std::string* announce);

  // required uint32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // optional string group_name = 7;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 7;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // repeated uint32 member_list = 8;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 8;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupSetAnnounceAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_announce();
  inline void clear_has_announce();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 update_time_;
  ::std::string* announce_;
  ::std::string* group_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupSetAnnounceAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupManagementModifyAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupManagementModifyAlterNotify();
  virtual ~IMGroupManagementModifyAlterNotify();

  IMGroupManagementModifyAlterNotify(const IMGroupManagementModifyAlterNotify& from);

  inline IMGroupManagementModifyAlterNotify& operator=(const IMGroupManagementModifyAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupManagementModifyAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupManagementModifyAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupManagementModifyAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupManagementModifyAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupManagementModifyAlterNotify& from);
  void MergeFrom(const IMGroupManagementModifyAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required string creator_name = 4;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 4;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // required string group_name = 5;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 5;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required uint32 new_manager_id = 6;
  inline bool has_new_manager_id() const;
  inline void clear_new_manager_id();
  static const int kNewManagerIdFieldNumber = 6;
  inline ::google::protobuf::uint32 new_manager_id() const;
  inline void set_new_manager_id(::google::protobuf::uint32 value);

  // required string new_manager_name = 7;
  inline bool has_new_manager_name() const;
  inline void clear_new_manager_name();
  static const int kNewManagerNameFieldNumber = 7;
  inline const ::std::string& new_manager_name() const;
  inline void set_new_manager_name(const ::std::string& value);
  inline void set_new_manager_name(const char* value);
  inline void set_new_manager_name(const char* value, size_t size);
  inline ::std::string* mutable_new_manager_name();
  inline ::std::string* release_new_manager_name();
  inline void set_allocated_new_manager_name(::std::string* new_manager_name);

  // repeated uint32 member_list = 8;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 8;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupManagementModifyAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_new_manager_id();
  inline void clear_has_new_manager_id();
  inline void set_has_new_manager_name();
  inline void clear_has_new_manager_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* creator_name_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 new_manager_id_;
  ::std::string* group_name_;
  ::std::string* new_manager_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupManagementModifyAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupAtAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupAtAlterNotify();
  virtual ~IMGroupAtAlterNotify();

  IMGroupAtAlterNotify(const IMGroupAtAlterNotify& from);

  inline IMGroupAtAlterNotify& operator=(const IMGroupAtAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupAtAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupAtAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupAtAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupAtAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupAtAlterNotify& from);
  void MergeFrom(const IMGroupAtAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 from_user_id = 3;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required string from_user_name = 4;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 4;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required uint32 group_at_type = 5;
  inline bool has_group_at_type() const;
  inline void clear_group_at_type();
  static const int kGroupAtTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 group_at_type() const;
  inline void set_group_at_type(::google::protobuf::uint32 value);

  // repeated uint32 peer_id = 6;
  inline int peer_id_size() const;
  inline void clear_peer_id();
  static const int kPeerIdFieldNumber = 6;
  inline ::google::protobuf::uint32 peer_id(int index) const;
  inline void set_peer_id(int index, ::google::protobuf::uint32 value);
  inline void add_peer_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      peer_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_peer_id();

  // optional string group_name = 7;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 7;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional uint32 msg_id = 8;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 8;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupAtAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_group_at_type();
  inline void clear_has_group_at_type();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* from_user_name_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 group_at_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > peer_id_;
  ::std::string* group_name_;
  ::google::protobuf::uint32 msg_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupAtAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupRemoveAnnounceAlterNotify : public ::google::protobuf::MessageLite {
 public:
  IMGroupRemoveAnnounceAlterNotify();
  virtual ~IMGroupRemoveAnnounceAlterNotify();

  IMGroupRemoveAnnounceAlterNotify(const IMGroupRemoveAnnounceAlterNotify& from);

  inline IMGroupRemoveAnnounceAlterNotify& operator=(const IMGroupRemoveAnnounceAlterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupRemoveAnnounceAlterNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupRemoveAnnounceAlterNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupRemoveAnnounceAlterNotify* other);

  // implements Message ----------------------------------------------

  IMGroupRemoveAnnounceAlterNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupRemoveAnnounceAlterNotify& from);
  void MergeFrom(const IMGroupRemoveAnnounceAlterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 notify_type() const;
  inline void set_notify_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 creator_id = 3;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // repeated uint32 member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline ::google::protobuf::uint32 member_list(int index) const;
  inline void set_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupRemoveAnnounceAlterNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 notify_type_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupRemoveAnnounceAlterNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInfoReq();
  virtual ~IMGroupMemberInfoReq();

  IMGroupMemberInfoReq(const IMGroupMemberInfoReq& from);

  inline IMGroupMemberInfoReq& operator=(const IMGroupMemberInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInfoReq* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInfoReq& from);
  void MergeFrom(const IMGroupMemberInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 3;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInfoReq)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 member_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupMemberInfoResp : public ::google::protobuf::MessageLite {
 public:
  IMGroupMemberInfoResp();
  virtual ~IMGroupMemberInfoResp();

  IMGroupMemberInfoResp(const IMGroupMemberInfoResp& from);

  inline IMGroupMemberInfoResp& operator=(const IMGroupMemberInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupMemberInfoResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupMemberInfoResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupMemberInfoResp* other);

  // implements Message ----------------------------------------------

  IMGroupMemberInfoResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupMemberInfoResp& from);
  void MergeFrom(const IMGroupMemberInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 creator_id = 1;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 1;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 member_id = 3;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 member_id() const;
  inline void set_member_id(::google::protobuf::uint32 value);

  // required string member_name = 4;
  inline bool has_member_name() const;
  inline void clear_member_name();
  static const int kMemberNameFieldNumber = 4;
  inline const ::std::string& member_name() const;
  inline void set_member_name(const ::std::string& value);
  inline void set_member_name(const char* value);
  inline void set_member_name(const char* value, size_t size);
  inline ::std::string* mutable_member_name();
  inline ::std::string* release_member_name();
  inline void set_allocated_member_name(::std::string* member_name);

  // required uint32 member_forbidden = 5;
  inline bool has_member_forbidden() const;
  inline void clear_member_forbidden();
  static const int kMemberForbiddenFieldNumber = 5;
  inline ::google::protobuf::uint32 member_forbidden() const;
  inline void set_member_forbidden(::google::protobuf::uint32 value);

  // required uint32 member_degree = 6;
  inline bool has_member_degree() const;
  inline void clear_member_degree();
  static const int kMemberDegreeFieldNumber = 6;
  inline ::google::protobuf::uint32 member_degree() const;
  inline void set_member_degree(::google::protobuf::uint32 value);

  // required uint32 member_type = 7;
  inline bool has_member_type() const;
  inline void clear_member_type();
  static const int kMemberTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 member_type() const;
  inline void set_member_type(::google::protobuf::uint32 value);

  // required uint32 member_status = 8;
  inline bool has_member_status() const;
  inline void clear_member_status();
  static const int kMemberStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 member_status() const;
  inline void set_member_status(::google::protobuf::uint32 value);

  // required uint32 result_code = 9;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 9;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string reason = 10;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 10;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Group.IMGroupMemberInfoResp)
 private:
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_member_name();
  inline void clear_has_member_name();
  inline void set_has_member_forbidden();
  inline void clear_has_member_forbidden();
  inline void set_has_member_degree();
  inline void clear_has_member_degree();
  inline void set_has_member_type();
  inline void clear_has_member_type();
  inline void set_has_member_status();
  inline void clear_has_member_status();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* member_name_;
  ::google::protobuf::uint32 member_id_;
  ::google::protobuf::uint32 member_forbidden_;
  ::google::protobuf::uint32 member_degree_;
  ::google::protobuf::uint32 member_type_;
  ::google::protobuf::uint32 member_status_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* reason_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eGroup_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eGroup_2eproto();
  friend void protobuf_ShutdownFile_IM_2eGroup_2eproto();

  void InitAsDefaultInstance();
  static IMGroupMemberInfoResp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMNormalGroupListReq

// required uint32 user_id = 1;
inline bool IMNormalGroupListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMNormalGroupListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMNormalGroupListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMNormalGroupListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMNormalGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.user_id)
  return user_id_;
}
inline void IMNormalGroupListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMNormalGroupListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMNormalGroupListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMNormalGroupListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMNormalGroupListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMNormalGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListReq.attach_data)
  return *attach_data_;
}
inline void IMNormalGroupListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListReq.attach_data)
}
inline void IMNormalGroupListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMNormalGroupListReq.attach_data)
}
inline void IMNormalGroupListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMNormalGroupListReq.attach_data)
}
inline ::std::string* IMNormalGroupListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMNormalGroupListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMNormalGroupListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListReq.attach_data)
}

// -------------------------------------------------------------------

// IMNormalGroupListRsp

// required uint32 user_id = 1;
inline bool IMNormalGroupListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMNormalGroupListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMNormalGroupListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMNormalGroupListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMNormalGroupListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.user_id)
  return user_id_;
}
inline void IMNormalGroupListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int IMNormalGroupListRsp::group_version_list_size() const {
  return group_version_list_.size();
}
inline void IMNormalGroupListRsp::clear_group_version_list() {
  group_version_list_.Clear();
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMNormalGroupListRsp::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Get(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMNormalGroupListRsp::add_group_version_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMNormalGroupListRsp::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return group_version_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMNormalGroupListRsp::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMNormalGroupListRsp.group_version_list)
  return &group_version_list_;
}

// optional bytes attach_data = 20;
inline bool IMNormalGroupListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMNormalGroupListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMNormalGroupListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMNormalGroupListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMNormalGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMNormalGroupListRsp.attach_data)
  return *attach_data_;
}
inline void IMNormalGroupListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMNormalGroupListRsp.attach_data)
}
inline void IMNormalGroupListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMNormalGroupListRsp.attach_data)
}
inline void IMNormalGroupListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMNormalGroupListRsp.attach_data)
}
inline ::std::string* IMNormalGroupListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMNormalGroupListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMNormalGroupListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMNormalGroupListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMNormalGroupListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoListReq

// required uint32 user_id = 1;
inline bool IMGroupInfoListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupInfoListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.user_id)
  return user_id_;
}
inline void IMGroupInfoListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.user_id)
}

// repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int IMGroupInfoListReq::group_version_list_size() const {
  return group_version_list_.size();
}
inline void IMGroupInfoListReq::clear_group_version_list() {
  group_version_list_.Clear();
}
inline const ::IM::BaseDefine::GroupVersionInfo& IMGroupInfoListReq::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Get(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupVersionInfo* IMGroupInfoListReq::add_group_version_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >&
IMGroupInfoListReq::group_version_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return group_version_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupVersionInfo >*
IMGroupInfoListReq::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListReq.group_version_list)
  return &group_version_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListReq.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListReq.attach_data)
}
inline void IMGroupInfoListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoListReq.attach_data)
}
inline void IMGroupInfoListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoListReq.attach_data)
}
inline ::std::string* IMGroupInfoListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoListRsp

// required uint32 user_id = 1;
inline bool IMGroupInfoListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupInfoListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.user_id)
  return user_id_;
}
inline void IMGroupInfoListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.user_id)
}

// repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
inline int IMGroupInfoListRsp::group_info_list_size() const {
  return group_info_list_.size();
}
inline void IMGroupInfoListRsp::clear_group_info_list() {
  group_info_list_.Clear();
}
inline const ::IM::BaseDefine::GroupInfo& IMGroupInfoListRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Get(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Mutable(index);
}
inline ::IM::BaseDefine::GroupInfo* IMGroupInfoListRsp::add_group_info_list() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >&
IMGroupInfoListRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return group_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::GroupInfo >*
IMGroupInfoListRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoListRsp.group_info_list)
  return &group_info_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoListRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoListRsp.attach_data)
}
inline void IMGroupInfoListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoListRsp.attach_data)
}
inline void IMGroupInfoListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoListRsp.attach_data)
}
inline ::std::string* IMGroupInfoListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateReq

// required uint32 user_id = 1;
inline bool IMGroupCreateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupCreateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupCreateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupCreateReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.user_id)
  return user_id_;
}
inline void IMGroupCreateReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.user_id)
}

// required .IM.BaseDefine.GroupType group_type = 2;
inline bool IMGroupCreateReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupCreateReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupCreateReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupCreateReq::clear_group_type() {
  group_type_ = 0;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType IMGroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void IMGroupCreateReq::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_type)
}

// required string group_name = 3;
inline bool IMGroupCreateReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupCreateReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupCreateReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupCreateReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_name)
  return *group_name_;
}
inline void IMGroupCreateReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_name)
}
inline void IMGroupCreateReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_name)
}
inline void IMGroupCreateReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_name)
}
inline ::std::string* IMGroupCreateReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupCreateReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_name)
}

// required string group_avatar = 4;
inline bool IMGroupCreateReq::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupCreateReq::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupCreateReq::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupCreateReq::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& IMGroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.group_avatar)
  return *group_avatar_;
}
inline void IMGroupCreateReq::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.group_avatar)
}
inline void IMGroupCreateReq::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.group_avatar)
}
inline void IMGroupCreateReq::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.group_avatar)
}
inline ::std::string* IMGroupCreateReq::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.group_avatar)
  return group_avatar_;
}
inline ::std::string* IMGroupCreateReq::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.group_avatar)
}

// repeated uint32 member_id_list = 5;
inline int IMGroupCreateReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void IMGroupCreateReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_.Get(index);
}
inline void IMGroupCreateReq::set_member_id_list(int index, ::google::protobuf::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.member_id_list)
}
inline void IMGroupCreateReq::add_member_id_list(::google::protobuf::uint32 value) {
  member_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateReq.member_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateReq.member_id_list)
  return &member_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupCreateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupCreateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupCreateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupCreateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateReq.attach_data)
  return *attach_data_;
}
inline void IMGroupCreateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateReq.attach_data)
}
inline void IMGroupCreateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateReq.attach_data)
}
inline void IMGroupCreateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateReq.attach_data)
}
inline ::std::string* IMGroupCreateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupCreateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupCreateRsp

// required uint32 user_id = 1;
inline bool IMGroupCreateRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupCreateRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupCreateRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupCreateRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id)
  return user_id_;
}
inline void IMGroupCreateRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id)
}

// required uint32 result_code = 2;
inline bool IMGroupCreateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupCreateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupCreateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupCreateRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.result_code)
  return result_code_;
}
inline void IMGroupCreateRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.result_code)
}

// optional uint32 group_id = 3;
inline bool IMGroupCreateRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupCreateRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupCreateRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupCreateRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_id)
  return group_id_;
}
inline void IMGroupCreateRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_id)
}

// required string group_name = 4;
inline bool IMGroupCreateRsp::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupCreateRsp::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupCreateRsp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupCreateRsp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupCreateRsp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.group_name)
  return *group_name_;
}
inline void IMGroupCreateRsp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.group_name)
}
inline void IMGroupCreateRsp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateRsp.group_name)
}
inline void IMGroupCreateRsp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateRsp.group_name)
}
inline ::std::string* IMGroupCreateRsp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupCreateRsp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateRsp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.group_name)
}

// repeated uint32 user_id_list = 5;
inline int IMGroupCreateRsp::user_id_list_size() const {
  return user_id_list_.size();
}
inline void IMGroupCreateRsp::clear_user_id_list() {
  user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupCreateRsp::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.user_id_list)
  return user_id_list_.Get(index);
}
inline void IMGroupCreateRsp::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.user_id_list)
}
inline void IMGroupCreateRsp::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupCreateRsp.user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupCreateRsp::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupCreateRsp::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupCreateRsp.user_id_list)
  return &user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupCreateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupCreateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupCreateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupCreateRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupCreateRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupCreateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupCreateRsp.attach_data)
}
inline void IMGroupCreateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupCreateRsp.attach_data)
}
inline void IMGroupCreateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupCreateRsp.attach_data)
}
inline ::std::string* IMGroupCreateRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupCreateRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupCreateRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupCreateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupCreateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberReq

// required uint32 user_id = 1;
inline bool IMGroupChangeMemberReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.user_id)
  return user_id_;
}
inline void IMGroupChangeMemberReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
inline bool IMGroupChangeMemberReq::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberReq::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberReq::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberReq::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline void IMGroupChangeMemberReq::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.change_type)
}

// required uint32 group_id = 3;
inline bool IMGroupChangeMemberReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupChangeMemberReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupChangeMemberReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.group_id)
  return group_id_;
}
inline void IMGroupChangeMemberReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.group_id)
}

// repeated uint32 member_id_list = 4;
inline int IMGroupChangeMemberReq::member_id_list_size() const {
  return member_id_list_.size();
}
inline void IMGroupChangeMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_.Get(index);
}
inline void IMGroupChangeMemberReq::set_member_id_list(int index, ::google::protobuf::uint32 value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
inline void IMGroupChangeMemberReq::add_member_id_list(::google::protobuf::uint32 value) {
  member_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberReq.member_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return member_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberReq.member_id_list)
  return &member_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupChangeMemberReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupChangeMemberReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupChangeMemberReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupChangeMemberReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberReq.attach_data)
  return *attach_data_;
}
inline void IMGroupChangeMemberReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline void IMGroupChangeMemberReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline void IMGroupChangeMemberReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberReq.attach_data)
}
inline ::std::string* IMGroupChangeMemberReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupChangeMemberReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupChangeMemberReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberRsp

// required uint32 user_id = 1;
inline bool IMGroupChangeMemberRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.user_id)
  return user_id_;
}
inline void IMGroupChangeMemberRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
inline bool IMGroupChangeMemberRsp::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberRsp::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberRsp::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberRsp::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline void IMGroupChangeMemberRsp::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.change_type)
}

// required uint32 result_code = 3;
inline bool IMGroupChangeMemberRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupChangeMemberRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupChangeMemberRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.result_code)
  return result_code_;
}
inline void IMGroupChangeMemberRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.result_code)
}

// required uint32 group_id = 4;
inline bool IMGroupChangeMemberRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupChangeMemberRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupChangeMemberRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.group_id)
  return group_id_;
}
inline void IMGroupChangeMemberRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.group_id)
}

// repeated uint32 cur_user_id_list = 5;
inline int IMGroupChangeMemberRsp::cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
inline void IMGroupChangeMemberRsp::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return cur_user_id_list_.Get(index);
}
inline void IMGroupChangeMemberRsp::set_cur_user_id_list(int index, ::google::protobuf::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
inline void IMGroupChangeMemberRsp::add_cur_user_id_list(::google::protobuf::uint32 value) {
  cur_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberRsp::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return cur_user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberRsp::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.cur_user_id_list)
  return &cur_user_id_list_;
}

// repeated uint32 chg_user_id_list = 6;
inline int IMGroupChangeMemberRsp::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline void IMGroupChangeMemberRsp::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberRsp::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
inline void IMGroupChangeMemberRsp::set_chg_user_id_list(int index, ::google::protobuf::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
inline void IMGroupChangeMemberRsp::add_chg_user_id_list(::google::protobuf::uint32 value) {
  chg_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberRsp::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return chg_user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberRsp::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberRsp.chg_user_id_list)
  return &chg_user_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupChangeMemberRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupChangeMemberRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupChangeMemberRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupChangeMemberRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupChangeMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupChangeMemberRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline void IMGroupChangeMemberRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline void IMGroupChangeMemberRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupChangeMemberRsp.attach_data)
}
inline ::std::string* IMGroupChangeMemberRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupChangeMemberRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupChangeMemberRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupChangeMemberRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupChangeMemberRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupShieldReq

// required uint32 user_id = 1;
inline bool IMGroupShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.user_id)
  return user_id_;
}
inline void IMGroupShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupShieldReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupShieldReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupShieldReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupShieldReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.group_id)
  return group_id_;
}
inline void IMGroupShieldReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.group_id)
}

// required uint32 shield_status = 3;
inline bool IMGroupShieldReq::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupShieldReq::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupShieldReq::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupShieldReq::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMGroupShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.shield_status)
  return shield_status_;
}
inline void IMGroupShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMGroupShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldReq.attach_data)
  return *attach_data_;
}
inline void IMGroupShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldReq.attach_data)
}
inline void IMGroupShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupShieldReq.attach_data)
}
inline void IMGroupShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupShieldReq.attach_data)
}
inline ::std::string* IMGroupShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupShieldRsp

// required uint32 user_id = 1;
inline bool IMGroupShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.user_id)
  return user_id_;
}
inline void IMGroupShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupShieldRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupShieldRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupShieldRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupShieldRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.group_id)
  return group_id_;
}
inline void IMGroupShieldRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.group_id)
}

// required uint32 result_code = 3;
inline bool IMGroupShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.result_code)
  return result_code_;
}
inline void IMGroupShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.result_code)
}

// optional bytes attach_data = 20;
inline bool IMGroupShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupShieldRsp.attach_data)
}
inline void IMGroupShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupShieldRsp.attach_data)
}
inline void IMGroupShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupShieldRsp.attach_data)
}
inline ::std::string* IMGroupShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupDescpReq

// required uint32 creator_id = 1;
inline bool IMGroupDescpReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDescpReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDescpReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDescpReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupDescpReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpReq.creator_id)
  return creator_id_;
}
inline void IMGroupDescpReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupDescpReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDescpReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDescpReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDescpReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDescpReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpReq.group_id)
  return group_id_;
}
inline void IMGroupDescpReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpReq.group_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupDescpReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDescpReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDescpReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDescpReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupDescpReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpReq.attach_data)
  return *attach_data_;
}
inline void IMGroupDescpReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpReq.attach_data)
}
inline void IMGroupDescpReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupDescpReq.attach_data)
}
inline void IMGroupDescpReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupDescpReq.attach_data)
}
inline ::std::string* IMGroupDescpReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupDescpReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupDescpReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupDescpReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupDescpReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupDescpResp

// required uint32 creator_id = 1;
inline bool IMGroupDescpResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupDescpResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupDescpResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupDescpResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupDescpResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpResp.creator_id)
  return creator_id_;
}
inline void IMGroupDescpResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupDescpResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupDescpResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupDescpResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupDescpResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupDescpResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpResp.group_id)
  return group_id_;
}
inline void IMGroupDescpResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpResp.group_id)
}

// optional string group_descrp = 3;
inline bool IMGroupDescpResp::has_group_descrp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupDescpResp::set_has_group_descrp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupDescpResp::clear_has_group_descrp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupDescpResp::clear_group_descrp() {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_->clear();
  }
  clear_has_group_descrp();
}
inline const ::std::string& IMGroupDescpResp::group_descrp() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpResp.group_descrp)
  return *group_descrp_;
}
inline void IMGroupDescpResp::set_group_descrp(const ::std::string& value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpResp.group_descrp)
}
inline void IMGroupDescpResp::set_group_descrp(const char* value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupDescpResp.group_descrp)
}
inline void IMGroupDescpResp::set_group_descrp(const char* value, size_t size) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupDescpResp.group_descrp)
}
inline ::std::string* IMGroupDescpResp::mutable_group_descrp() {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupDescpResp.group_descrp)
  return group_descrp_;
}
inline ::std::string* IMGroupDescpResp::release_group_descrp() {
  clear_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_descrp_;
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupDescpResp::set_allocated_group_descrp(::std::string* group_descrp) {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (group_descrp) {
    set_has_group_descrp();
    group_descrp_ = group_descrp;
  } else {
    clear_has_group_descrp();
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupDescpResp.group_descrp)
}

// required uint32 result_code = 4;
inline bool IMGroupDescpResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupDescpResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupDescpResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupDescpResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupDescpResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpResp.result_code)
  return result_code_;
}
inline void IMGroupDescpResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpResp.result_code)
}

// optional bytes attach_data = 20;
inline bool IMGroupDescpResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupDescpResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupDescpResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupDescpResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupDescpResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupDescpResp.attach_data)
  return *attach_data_;
}
inline void IMGroupDescpResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupDescpResp.attach_data)
}
inline void IMGroupDescpResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupDescpResp.attach_data)
}
inline void IMGroupDescpResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupDescpResp.attach_data)
}
inline ::std::string* IMGroupDescpResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupDescpResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupDescpResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupDescpResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupDescpResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberShieldReq

// required uint32 member_id = 1;
inline bool IMGroupMemberShieldReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberShieldReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberShieldReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberShieldReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldReq.member_id)
  return member_id_;
}
inline void IMGroupMemberShieldReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldReq.member_id)
}

// required uint32 creator_id = 2;
inline bool IMGroupMemberShieldReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberShieldReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberShieldReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberShieldReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberShieldReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldReq.creator_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberShieldReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberShieldReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberShieldReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberShieldReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldReq.group_id)
  return group_id_;
}
inline void IMGroupMemberShieldReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldReq.group_id)
}

// required uint32 msg_id = 4;
inline bool IMGroupMemberShieldReq::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberShieldReq::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberShieldReq::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberShieldReq::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldReq::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldReq.msg_id)
  return msg_id_;
}
inline void IMGroupMemberShieldReq::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldReq.msg_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldReq.attach_data)
}
inline void IMGroupMemberShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberShieldReq.attach_data)
}
inline void IMGroupMemberShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberShieldReq.attach_data)
}
inline ::std::string* IMGroupMemberShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberShieldResp

// required uint32 member_id = 1;
inline bool IMGroupMemberShieldResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberShieldResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberShieldResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.member_id)
  return member_id_;
}
inline void IMGroupMemberShieldResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.member_id)
}

// required uint32 creator_id = 2;
inline bool IMGroupMemberShieldResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberShieldResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberShieldResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberShieldResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.creator_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberShieldResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberShieldResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberShieldResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.group_id)
  return group_id_;
}
inline void IMGroupMemberShieldResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.group_id)
}

// required uint32 msg_id = 4;
inline bool IMGroupMemberShieldResp::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberShieldResp::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberShieldResp::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.msg_id)
  return msg_id_;
}
inline void IMGroupMemberShieldResp::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.msg_id)
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberShieldResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberShieldResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberShieldResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.member_list)
}
inline void IMGroupMemberShieldResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberShieldResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberShieldResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberShieldResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberShieldResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberShieldResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberShieldResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberShieldResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberShieldResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberShieldResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.result_code)
  return result_code_;
}
inline void IMGroupMemberShieldResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.result_code)
}

// optional string reason = 7;
inline bool IMGroupMemberShieldResp::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberShieldResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberShieldResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberShieldResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.reason)
  return *reason_;
}
inline void IMGroupMemberShieldResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.reason)
}
inline void IMGroupMemberShieldResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberShieldResp.reason)
}
inline void IMGroupMemberShieldResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberShieldResp.reason)
}
inline ::std::string* IMGroupMemberShieldResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberShieldResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberShieldResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberShieldResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberShieldResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberShieldResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberShieldResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberShieldResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberShieldResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberShieldResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberShieldResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberShieldResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberShieldResp.attach_data)
}
inline void IMGroupMemberShieldResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberShieldResp.attach_data)
}
inline void IMGroupMemberShieldResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberShieldResp.attach_data)
}
inline ::std::string* IMGroupMemberShieldResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberShieldResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberShieldResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberShieldResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberShieldResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMsgDataRevokeReq

// required uint32 user_id = 1;
inline bool IMGroupMsgDataRevokeReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMsgDataRevokeReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMsgDataRevokeReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMsgDataRevokeReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeReq.user_id)
  return user_id_;
}
inline void IMGroupMsgDataRevokeReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMsgDataRevokeReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMsgDataRevokeReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMsgDataRevokeReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMsgDataRevokeReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeReq.group_id)
  return group_id_;
}
inline void IMGroupMsgDataRevokeReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeReq.group_id)
}

// required uint32 msg_id = 3;
inline bool IMGroupMsgDataRevokeReq::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMsgDataRevokeReq::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMsgDataRevokeReq::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMsgDataRevokeReq::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeReq::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeReq.msg_id)
  return msg_id_;
}
inline void IMGroupMsgDataRevokeReq::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeReq.msg_id)
}

// optional string reason = 4;
inline bool IMGroupMsgDataRevokeReq::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMsgDataRevokeReq::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMsgDataRevokeReq::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMsgDataRevokeReq::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMsgDataRevokeReq::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeReq.reason)
  return *reason_;
}
inline void IMGroupMsgDataRevokeReq::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeReq.reason)
}
inline void IMGroupMsgDataRevokeReq::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMsgDataRevokeReq.reason)
}
inline void IMGroupMsgDataRevokeReq::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMsgDataRevokeReq.reason)
}
inline ::std::string* IMGroupMsgDataRevokeReq::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMsgDataRevokeReq.reason)
  return reason_;
}
inline ::std::string* IMGroupMsgDataRevokeReq::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMsgDataRevokeReq::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMsgDataRevokeReq.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMsgDataRevokeReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMsgDataRevokeReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMsgDataRevokeReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMsgDataRevokeReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMsgDataRevokeReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMsgDataRevokeReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
}
inline void IMGroupMsgDataRevokeReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
}
inline void IMGroupMsgDataRevokeReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
}
inline ::std::string* IMGroupMsgDataRevokeReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMsgDataRevokeReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMsgDataRevokeReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMsgDataRevokeReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMsgDataRevokeResp

// required uint32 user_id = 1;
inline bool IMGroupMsgDataRevokeResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMsgDataRevokeResp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeResp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.user_id)
  return user_id_;
}
inline void IMGroupMsgDataRevokeResp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMsgDataRevokeResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMsgDataRevokeResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.group_id)
  return group_id_;
}
inline void IMGroupMsgDataRevokeResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.group_id)
}

// required uint32 msg_id = 3;
inline bool IMGroupMsgDataRevokeResp::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMsgDataRevokeResp::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeResp::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.msg_id)
  return msg_id_;
}
inline void IMGroupMsgDataRevokeResp::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.msg_id)
}

// required uint32 result_code = 4;
inline bool IMGroupMsgDataRevokeResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMsgDataRevokeResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.result_code)
  return result_code_;
}
inline void IMGroupMsgDataRevokeResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.result_code)
}

// repeated uint32 member_list = 5;
inline int IMGroupMsgDataRevokeResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMsgDataRevokeResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMsgDataRevokeResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMsgDataRevokeResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.member_list)
}
inline void IMGroupMsgDataRevokeResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMsgDataRevokeResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMsgDataRevokeResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMsgDataRevokeResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMsgDataRevokeResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMsgDataRevokeResp.member_list)
  return &member_list_;
}

// optional string reason = 6;
inline bool IMGroupMsgDataRevokeResp::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMsgDataRevokeResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMsgDataRevokeResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.reason)
  return *reason_;
}
inline void IMGroupMsgDataRevokeResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.reason)
}
inline void IMGroupMsgDataRevokeResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMsgDataRevokeResp.reason)
}
inline void IMGroupMsgDataRevokeResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMsgDataRevokeResp.reason)
}
inline ::std::string* IMGroupMsgDataRevokeResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMsgDataRevokeResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMsgDataRevokeResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMsgDataRevokeResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMsgDataRevokeResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMsgDataRevokeResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMsgDataRevokeResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMsgDataRevokeResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMsgDataRevokeResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMsgDataRevokeResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMsgDataRevokeResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
}
inline void IMGroupMsgDataRevokeResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
}
inline void IMGroupMsgDataRevokeResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
}
inline ::std::string* IMGroupMsgDataRevokeResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMsgDataRevokeResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMsgDataRevokeResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMsgDataRevokeResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupChangeMemberNotify

// required uint32 user_id = 1;
inline bool IMGroupChangeMemberNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupChangeMemberNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupChangeMemberNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupChangeMemberNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.user_id)
  return user_id_;
}
inline void IMGroupChangeMemberNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.user_id)
}

// required .IM.BaseDefine.GroupModifyType change_type = 2;
inline bool IMGroupChangeMemberNotify::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupChangeMemberNotify::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupChangeMemberNotify::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupChangeMemberNotify::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::IM::BaseDefine::GroupModifyType IMGroupChangeMemberNotify::change_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.change_type)
  return static_cast< ::IM::BaseDefine::GroupModifyType >(change_type_);
}
inline void IMGroupChangeMemberNotify::set_change_type(::IM::BaseDefine::GroupModifyType value) {
  assert(::IM::BaseDefine::GroupModifyType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.change_type)
}

// required uint32 group_id = 3;
inline bool IMGroupChangeMemberNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupChangeMemberNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupChangeMemberNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupChangeMemberNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.group_id)
  return group_id_;
}
inline void IMGroupChangeMemberNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.group_id)
}

// repeated uint32 cur_user_id_list = 4;
inline int IMGroupChangeMemberNotify::cur_user_id_list_size() const {
  return cur_user_id_list_.size();
}
inline void IMGroupChangeMemberNotify::clear_cur_user_id_list() {
  cur_user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberNotify::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return cur_user_id_list_.Get(index);
}
inline void IMGroupChangeMemberNotify::set_cur_user_id_list(int index, ::google::protobuf::uint32 value) {
  cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
inline void IMGroupChangeMemberNotify::add_cur_user_id_list(::google::protobuf::uint32 value) {
  cur_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberNotify::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return cur_user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberNotify::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.cur_user_id_list)
  return &cur_user_id_list_;
}

// repeated uint32 chg_user_id_list = 5;
inline int IMGroupChangeMemberNotify::chg_user_id_list_size() const {
  return chg_user_id_list_.size();
}
inline void IMGroupChangeMemberNotify::clear_chg_user_id_list() {
  chg_user_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupChangeMemberNotify::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_.Get(index);
}
inline void IMGroupChangeMemberNotify::set_chg_user_id_list(int index, ::google::protobuf::uint32 value) {
  chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
inline void IMGroupChangeMemberNotify::add_chg_user_id_list(::google::protobuf::uint32 value) {
  chg_user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupChangeMemberNotify::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return chg_user_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupChangeMemberNotify::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupChangeMemberNotify.chg_user_id_list)
  return &chg_user_id_list_;
}

// -------------------------------------------------------------------

// IMGroupSetAnnounceReq

// required uint32 creator_id = 1;
inline bool IMGroupSetAnnounceReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetAnnounceReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetAnnounceReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.creator_id)
  return creator_id_;
}
inline void IMGroupSetAnnounceReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetAnnounceReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetAnnounceReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetAnnounceReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.group_id)
  return group_id_;
}
inline void IMGroupSetAnnounceReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.group_id)
}

// required string creator_name = 3;
inline bool IMGroupSetAnnounceReq::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetAnnounceReq::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetAnnounceReq::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupSetAnnounceReq::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.creator_name)
  return *creator_name_;
}
inline void IMGroupSetAnnounceReq::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.creator_name)
}
inline void IMGroupSetAnnounceReq::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceReq.creator_name)
}
inline void IMGroupSetAnnounceReq::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceReq.creator_name)
}
inline ::std::string* IMGroupSetAnnounceReq::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceReq.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupSetAnnounceReq::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceReq::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceReq.creator_name)
}

// required string announce = 4;
inline bool IMGroupSetAnnounceReq::has_announce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_announce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetAnnounceReq::clear_has_announce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetAnnounceReq::clear_announce() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& IMGroupSetAnnounceReq::announce() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.announce)
  return *announce_;
}
inline void IMGroupSetAnnounceReq::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.announce)
}
inline void IMGroupSetAnnounceReq::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceReq.announce)
}
inline void IMGroupSetAnnounceReq::set_announce(const char* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceReq.announce)
}
inline ::std::string* IMGroupSetAnnounceReq::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceReq.announce)
  return announce_;
}
inline ::std::string* IMGroupSetAnnounceReq::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceReq::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceReq.announce)
}

// optional string group_name = 5;
inline bool IMGroupSetAnnounceReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetAnnounceReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetAnnounceReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupSetAnnounceReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.group_name)
  return *group_name_;
}
inline void IMGroupSetAnnounceReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.group_name)
}
inline void IMGroupSetAnnounceReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceReq.group_name)
}
inline void IMGroupSetAnnounceReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceReq.group_name)
}
inline ::std::string* IMGroupSetAnnounceReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupSetAnnounceReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceReq.group_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupSetAnnounceReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetAnnounceReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetAnnounceReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetAnnounceReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupSetAnnounceReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceReq.attach_data)
  return *attach_data_;
}
inline void IMGroupSetAnnounceReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceReq.attach_data)
}
inline void IMGroupSetAnnounceReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceReq.attach_data)
}
inline void IMGroupSetAnnounceReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceReq.attach_data)
}
inline ::std::string* IMGroupSetAnnounceReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupSetAnnounceReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupSetAnnounceResp

// required uint32 creator_id = 1;
inline bool IMGroupSetAnnounceResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetAnnounceResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetAnnounceResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.creator_id)
  return creator_id_;
}
inline void IMGroupSetAnnounceResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetAnnounceResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetAnnounceResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetAnnounceResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.group_id)
  return group_id_;
}
inline void IMGroupSetAnnounceResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.group_id)
}

// required string creator_name = 3;
inline bool IMGroupSetAnnounceResp::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetAnnounceResp::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetAnnounceResp::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupSetAnnounceResp::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.creator_name)
  return *creator_name_;
}
inline void IMGroupSetAnnounceResp::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.creator_name)
}
inline void IMGroupSetAnnounceResp::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceResp.creator_name)
}
inline void IMGroupSetAnnounceResp::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceResp.creator_name)
}
inline ::std::string* IMGroupSetAnnounceResp::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceResp.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupSetAnnounceResp::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceResp::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceResp.creator_name)
}

// required uint32 update_time = 4;
inline bool IMGroupSetAnnounceResp::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetAnnounceResp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetAnnounceResp::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceResp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.update_time)
  return update_time_;
}
inline void IMGroupSetAnnounceResp::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.update_time)
}

// required uint32 result_code = 5;
inline bool IMGroupSetAnnounceResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetAnnounceResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetAnnounceResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.result_code)
  return result_code_;
}
inline void IMGroupSetAnnounceResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.result_code)
}

// repeated uint32 member_list = 6;
inline int IMGroupSetAnnounceResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupSetAnnounceResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupSetAnnounceResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.member_list)
}
inline void IMGroupSetAnnounceResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupSetAnnounceResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupSetAnnounceResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupSetAnnounceResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupSetAnnounceResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupSetAnnounceResp.member_list)
  return &member_list_;
}

// optional string group_name = 7;
inline bool IMGroupSetAnnounceResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupSetAnnounceResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupSetAnnounceResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupSetAnnounceResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.group_name)
  return *group_name_;
}
inline void IMGroupSetAnnounceResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.group_name)
}
inline void IMGroupSetAnnounceResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceResp.group_name)
}
inline void IMGroupSetAnnounceResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceResp.group_name)
}
inline ::std::string* IMGroupSetAnnounceResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupSetAnnounceResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceResp.group_name)
}

// optional string announce = 8;
inline bool IMGroupSetAnnounceResp::has_announce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_announce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupSetAnnounceResp::clear_has_announce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupSetAnnounceResp::clear_announce() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& IMGroupSetAnnounceResp::announce() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.announce)
  return *announce_;
}
inline void IMGroupSetAnnounceResp::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.announce)
}
inline void IMGroupSetAnnounceResp::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceResp.announce)
}
inline void IMGroupSetAnnounceResp::set_announce(const char* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceResp.announce)
}
inline ::std::string* IMGroupSetAnnounceResp::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceResp.announce)
  return announce_;
}
inline ::std::string* IMGroupSetAnnounceResp::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceResp::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceResp.announce)
}

// optional bytes attach_data = 20;
inline bool IMGroupSetAnnounceResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupSetAnnounceResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupSetAnnounceResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupSetAnnounceResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupSetAnnounceResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceResp.attach_data)
  return *attach_data_;
}
inline void IMGroupSetAnnounceResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceResp.attach_data)
}
inline void IMGroupSetAnnounceResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceResp.attach_data)
}
inline void IMGroupSetAnnounceResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceResp.attach_data)
}
inline ::std::string* IMGroupSetAnnounceResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupSetAnnounceResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetAnnounceReq

// required uint32 user_id = 1;
inline bool IMGroupGetAnnounceReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetAnnounceReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetAnnounceReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetAnnounceReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceReq.user_id)
  return user_id_;
}
inline void IMGroupGetAnnounceReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupGetAnnounceReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupGetAnnounceReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupGetAnnounceReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupGetAnnounceReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceReq.group_id)
  return group_id_;
}
inline void IMGroupGetAnnounceReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceReq.group_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupGetAnnounceReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetAnnounceReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetAnnounceReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetAnnounceReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetAnnounceReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceReq.attach_data)
  return *attach_data_;
}
inline void IMGroupGetAnnounceReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceReq.attach_data)
}
inline void IMGroupGetAnnounceReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupGetAnnounceReq.attach_data)
}
inline void IMGroupGetAnnounceReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupGetAnnounceReq.attach_data)
}
inline ::std::string* IMGroupGetAnnounceReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupGetAnnounceReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetAnnounceReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetAnnounceReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupGetAnnounceReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetAnnounceResp

// required uint32 user_id = 1;
inline bool IMGroupGetAnnounceResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetAnnounceResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetAnnounceResp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceResp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.user_id)
  return user_id_;
}
inline void IMGroupGetAnnounceResp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupGetAnnounceResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupGetAnnounceResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupGetAnnounceResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.group_id)
  return group_id_;
}
inline void IMGroupGetAnnounceResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.group_id)
}

// required string announce = 3;
inline bool IMGroupGetAnnounceResp::has_announce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_announce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetAnnounceResp::clear_has_announce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetAnnounceResp::clear_announce() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& IMGroupGetAnnounceResp::announce() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.announce)
  return *announce_;
}
inline void IMGroupGetAnnounceResp::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.announce)
}
inline void IMGroupGetAnnounceResp::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupGetAnnounceResp.announce)
}
inline void IMGroupGetAnnounceResp::set_announce(const char* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupGetAnnounceResp.announce)
}
inline ::std::string* IMGroupGetAnnounceResp::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupGetAnnounceResp.announce)
  return announce_;
}
inline ::std::string* IMGroupGetAnnounceResp::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetAnnounceResp::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupGetAnnounceResp.announce)
}

// required string creator_name = 4;
inline bool IMGroupGetAnnounceResp::has_creator_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_creator_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupGetAnnounceResp::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupGetAnnounceResp::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupGetAnnounceResp::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.creator_name)
  return *creator_name_;
}
inline void IMGroupGetAnnounceResp::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.creator_name)
}
inline void IMGroupGetAnnounceResp::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupGetAnnounceResp.creator_name)
}
inline void IMGroupGetAnnounceResp::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupGetAnnounceResp.creator_name)
}
inline ::std::string* IMGroupGetAnnounceResp::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupGetAnnounceResp.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupGetAnnounceResp::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetAnnounceResp::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupGetAnnounceResp.creator_name)
}

// required uint32 update_time = 5;
inline bool IMGroupGetAnnounceResp::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupGetAnnounceResp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupGetAnnounceResp::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceResp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.update_time)
  return update_time_;
}
inline void IMGroupGetAnnounceResp::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.update_time)
}

// required uint32 result_code = 6;
inline bool IMGroupGetAnnounceResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupGetAnnounceResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupGetAnnounceResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupGetAnnounceResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.result_code)
  return result_code_;
}
inline void IMGroupGetAnnounceResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.result_code)
}

// optional bytes attach_data = 20;
inline bool IMGroupGetAnnounceResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupGetAnnounceResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupGetAnnounceResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupGetAnnounceResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetAnnounceResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupGetAnnounceResp.attach_data)
  return *attach_data_;
}
inline void IMGroupGetAnnounceResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupGetAnnounceResp.attach_data)
}
inline void IMGroupGetAnnounceResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupGetAnnounceResp.attach_data)
}
inline void IMGroupGetAnnounceResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupGetAnnounceResp.attach_data)
}
inline ::std::string* IMGroupGetAnnounceResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupGetAnnounceResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetAnnounceResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetAnnounceResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupGetAnnounceResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupRemoveAnnounceReq

// required uint32 creator_id = 1;
inline bool IMGroupRemoveAnnounceReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupRemoveAnnounceReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupRemoveAnnounceReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupRemoveAnnounceReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceReq.creator_id)
  return creator_id_;
}
inline void IMGroupRemoveAnnounceReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupRemoveAnnounceReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupRemoveAnnounceReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupRemoveAnnounceReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupRemoveAnnounceReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceReq.group_id)
  return group_id_;
}
inline void IMGroupRemoveAnnounceReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceReq.group_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupRemoveAnnounceReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupRemoveAnnounceReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupRemoveAnnounceReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupRemoveAnnounceReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupRemoveAnnounceReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
  return *attach_data_;
}
inline void IMGroupRemoveAnnounceReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
}
inline void IMGroupRemoveAnnounceReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
}
inline void IMGroupRemoveAnnounceReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
}
inline ::std::string* IMGroupRemoveAnnounceReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupRemoveAnnounceReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupRemoveAnnounceReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupRemoveAnnounceReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupRemoveAnnounceResp

// required uint32 creator_id = 1;
inline bool IMGroupRemoveAnnounceResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupRemoveAnnounceResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupRemoveAnnounceResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupRemoveAnnounceResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.creator_id)
  return creator_id_;
}
inline void IMGroupRemoveAnnounceResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupRemoveAnnounceResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupRemoveAnnounceResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupRemoveAnnounceResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupRemoveAnnounceResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.group_id)
  return group_id_;
}
inline void IMGroupRemoveAnnounceResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.group_id)
}

// required uint32 update_time = 3;
inline bool IMGroupRemoveAnnounceResp::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupRemoveAnnounceResp::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupRemoveAnnounceResp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupRemoveAnnounceResp::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceResp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.update_time)
  return update_time_;
}
inline void IMGroupRemoveAnnounceResp::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.update_time)
}

// required uint32 result_code = 4;
inline bool IMGroupRemoveAnnounceResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupRemoveAnnounceResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupRemoveAnnounceResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupRemoveAnnounceResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.result_code)
  return result_code_;
}
inline void IMGroupRemoveAnnounceResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.result_code)
}

// repeated uint32 member_list = 5;
inline int IMGroupRemoveAnnounceResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupRemoveAnnounceResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupRemoveAnnounceResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.member_list)
}
inline void IMGroupRemoveAnnounceResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupRemoveAnnounceResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupRemoveAnnounceResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupRemoveAnnounceResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupRemoveAnnounceResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupRemoveAnnounceResp.member_list)
  return &member_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupRemoveAnnounceResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupRemoveAnnounceResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupRemoveAnnounceResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupRemoveAnnounceResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupRemoveAnnounceResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
  return *attach_data_;
}
inline void IMGroupRemoveAnnounceResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
}
inline void IMGroupRemoveAnnounceResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
}
inline void IMGroupRemoveAnnounceResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
}
inline ::std::string* IMGroupRemoveAnnounceResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupRemoveAnnounceResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupRemoveAnnounceResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupRemoveAnnounceResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupManagementModifyReq

// required uint32 creator_id = 1;
inline bool IMGroupManagementModifyReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupManagementModifyReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupManagementModifyReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.creator_id)
  return creator_id_;
}
inline void IMGroupManagementModifyReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupManagementModifyReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupManagementModifyReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupManagementModifyReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.group_id)
  return group_id_;
}
inline void IMGroupManagementModifyReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.group_id)
}

// required string creator_name = 3;
inline bool IMGroupManagementModifyReq::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupManagementModifyReq::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupManagementModifyReq::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupManagementModifyReq::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.creator_name)
  return *creator_name_;
}
inline void IMGroupManagementModifyReq::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.creator_name)
}
inline void IMGroupManagementModifyReq::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyReq.creator_name)
}
inline void IMGroupManagementModifyReq::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyReq.creator_name)
}
inline ::std::string* IMGroupManagementModifyReq::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyReq.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupManagementModifyReq::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyReq::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyReq.creator_name)
}

// required uint32 peer_id = 4;
inline bool IMGroupManagementModifyReq::has_peer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_peer_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupManagementModifyReq::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupManagementModifyReq::clear_peer_id() {
  peer_id_ = 0u;
  clear_has_peer_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyReq::peer_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.peer_id)
  return peer_id_;
}
inline void IMGroupManagementModifyReq::set_peer_id(::google::protobuf::uint32 value) {
  set_has_peer_id();
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.peer_id)
}

// required string group_name = 5;
inline bool IMGroupManagementModifyReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupManagementModifyReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupManagementModifyReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupManagementModifyReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.group_name)
  return *group_name_;
}
inline void IMGroupManagementModifyReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.group_name)
}
inline void IMGroupManagementModifyReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyReq.group_name)
}
inline void IMGroupManagementModifyReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyReq.group_name)
}
inline ::std::string* IMGroupManagementModifyReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupManagementModifyReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyReq.group_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupManagementModifyReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupManagementModifyReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupManagementModifyReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupManagementModifyReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupManagementModifyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyReq.attach_data)
  return *attach_data_;
}
inline void IMGroupManagementModifyReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyReq.attach_data)
}
inline void IMGroupManagementModifyReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyReq.attach_data)
}
inline void IMGroupManagementModifyReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyReq.attach_data)
}
inline ::std::string* IMGroupManagementModifyReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupManagementModifyReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupManagementModifyResp

// required uint32 creator_id = 1;
inline bool IMGroupManagementModifyResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupManagementModifyResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupManagementModifyResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.creator_id)
  return creator_id_;
}
inline void IMGroupManagementModifyResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupManagementModifyResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupManagementModifyResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupManagementModifyResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.group_id)
  return group_id_;
}
inline void IMGroupManagementModifyResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.group_id)
}

// required string creator_name = 3;
inline bool IMGroupManagementModifyResp::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupManagementModifyResp::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupManagementModifyResp::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupManagementModifyResp::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.creator_name)
  return *creator_name_;
}
inline void IMGroupManagementModifyResp::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.creator_name)
}
inline void IMGroupManagementModifyResp::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyResp.creator_name)
}
inline void IMGroupManagementModifyResp::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyResp.creator_name)
}
inline ::std::string* IMGroupManagementModifyResp::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyResp.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupManagementModifyResp::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyResp::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyResp.creator_name)
}

// required uint32 peer_id = 4;
inline bool IMGroupManagementModifyResp::has_peer_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_peer_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupManagementModifyResp::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupManagementModifyResp::clear_peer_id() {
  peer_id_ = 0u;
  clear_has_peer_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyResp::peer_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.peer_id)
  return peer_id_;
}
inline void IMGroupManagementModifyResp::set_peer_id(::google::protobuf::uint32 value) {
  set_has_peer_id();
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.peer_id)
}

// required string peer_name = 5;
inline bool IMGroupManagementModifyResp::has_peer_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_peer_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupManagementModifyResp::clear_has_peer_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupManagementModifyResp::clear_peer_name() {
  if (peer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peer_name_->clear();
  }
  clear_has_peer_name();
}
inline const ::std::string& IMGroupManagementModifyResp::peer_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.peer_name)
  return *peer_name_;
}
inline void IMGroupManagementModifyResp::set_peer_name(const ::std::string& value) {
  set_has_peer_name();
  if (peer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peer_name_ = new ::std::string;
  }
  peer_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.peer_name)
}
inline void IMGroupManagementModifyResp::set_peer_name(const char* value) {
  set_has_peer_name();
  if (peer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peer_name_ = new ::std::string;
  }
  peer_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyResp.peer_name)
}
inline void IMGroupManagementModifyResp::set_peer_name(const char* value, size_t size) {
  set_has_peer_name();
  if (peer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peer_name_ = new ::std::string;
  }
  peer_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyResp.peer_name)
}
inline ::std::string* IMGroupManagementModifyResp::mutable_peer_name() {
  set_has_peer_name();
  if (peer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peer_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyResp.peer_name)
  return peer_name_;
}
inline ::std::string* IMGroupManagementModifyResp::release_peer_name() {
  clear_has_peer_name();
  if (peer_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = peer_name_;
    peer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyResp::set_allocated_peer_name(::std::string* peer_name) {
  if (peer_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_name_;
  }
  if (peer_name) {
    set_has_peer_name();
    peer_name_ = peer_name;
  } else {
    clear_has_peer_name();
    peer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyResp.peer_name)
}

// required uint32 result_code = 6;
inline bool IMGroupManagementModifyResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupManagementModifyResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupManagementModifyResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.result_code)
  return result_code_;
}
inline void IMGroupManagementModifyResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.result_code)
}

// repeated uint32 member_list = 7;
inline int IMGroupManagementModifyResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupManagementModifyResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupManagementModifyResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.member_list)
}
inline void IMGroupManagementModifyResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupManagementModifyResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupManagementModifyResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupManagementModifyResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupManagementModifyResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupManagementModifyResp.member_list)
  return &member_list_;
}

// required string group_name = 8;
inline bool IMGroupManagementModifyResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupManagementModifyResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupManagementModifyResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupManagementModifyResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.group_name)
  return *group_name_;
}
inline void IMGroupManagementModifyResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.group_name)
}
inline void IMGroupManagementModifyResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyResp.group_name)
}
inline void IMGroupManagementModifyResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyResp.group_name)
}
inline ::std::string* IMGroupManagementModifyResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupManagementModifyResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyResp.group_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupManagementModifyResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupManagementModifyResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupManagementModifyResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupManagementModifyResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupManagementModifyResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyResp.attach_data)
  return *attach_data_;
}
inline void IMGroupManagementModifyResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyResp.attach_data)
}
inline void IMGroupManagementModifyResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyResp.attach_data)
}
inline void IMGroupManagementModifyResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyResp.attach_data)
}
inline ::std::string* IMGroupManagementModifyResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupManagementModifyResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupAtReq

// required uint32 from_user_id = 1;
inline bool IMGroupAtReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupAtReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupAtReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupAtReq::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupAtReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.from_user_id)
  return from_user_id_;
}
inline void IMGroupAtReq::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.from_user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupAtReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupAtReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupAtReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupAtReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupAtReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.group_id)
  return group_id_;
}
inline void IMGroupAtReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.group_id)
}

// repeated uint32 peer_id = 3;
inline int IMGroupAtReq::peer_id_size() const {
  return peer_id_.size();
}
inline void IMGroupAtReq::clear_peer_id() {
  peer_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupAtReq::peer_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.peer_id)
  return peer_id_.Get(index);
}
inline void IMGroupAtReq::set_peer_id(int index, ::google::protobuf::uint32 value) {
  peer_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.peer_id)
}
inline void IMGroupAtReq::add_peer_id(::google::protobuf::uint32 value) {
  peer_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupAtReq.peer_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupAtReq::peer_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupAtReq.peer_id)
  return peer_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupAtReq::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupAtReq.peer_id)
  return &peer_id_;
}

// required uint32 group_at_type = 4;
inline bool IMGroupAtReq::has_group_at_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupAtReq::set_has_group_at_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupAtReq::clear_has_group_at_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupAtReq::clear_group_at_type() {
  group_at_type_ = 0u;
  clear_has_group_at_type();
}
inline ::google::protobuf::uint32 IMGroupAtReq::group_at_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.group_at_type)
  return group_at_type_;
}
inline void IMGroupAtReq::set_group_at_type(::google::protobuf::uint32 value) {
  set_has_group_at_type();
  group_at_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.group_at_type)
}

// required string from_user_name = 5;
inline bool IMGroupAtReq::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupAtReq::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupAtReq::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupAtReq::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& IMGroupAtReq::from_user_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.from_user_name)
  return *from_user_name_;
}
inline void IMGroupAtReq::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.from_user_name)
}
inline void IMGroupAtReq::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtReq.from_user_name)
}
inline void IMGroupAtReq::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtReq.from_user_name)
}
inline ::std::string* IMGroupAtReq::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtReq.from_user_name)
  return from_user_name_;
}
inline ::std::string* IMGroupAtReq::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtReq::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtReq.from_user_name)
}

// optional string group_name = 6;
inline bool IMGroupAtReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupAtReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupAtReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupAtReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupAtReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.group_name)
  return *group_name_;
}
inline void IMGroupAtReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.group_name)
}
inline void IMGroupAtReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtReq.group_name)
}
inline void IMGroupAtReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtReq.group_name)
}
inline ::std::string* IMGroupAtReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupAtReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtReq.group_name)
}

// optional uint32 msg_id = 7;
inline bool IMGroupAtReq::has_msg_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupAtReq::set_has_msg_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupAtReq::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupAtReq::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupAtReq::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.msg_id)
  return msg_id_;
}
inline void IMGroupAtReq::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.msg_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupAtReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupAtReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupAtReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupAtReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupAtReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtReq.attach_data)
  return *attach_data_;
}
inline void IMGroupAtReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtReq.attach_data)
}
inline void IMGroupAtReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtReq.attach_data)
}
inline void IMGroupAtReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtReq.attach_data)
}
inline ::std::string* IMGroupAtReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupAtReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupAtResp

// required uint32 from_user_id = 1;
inline bool IMGroupAtResp::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupAtResp::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupAtResp::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupAtResp::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupAtResp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.from_user_id)
  return from_user_id_;
}
inline void IMGroupAtResp::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.from_user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupAtResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupAtResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupAtResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupAtResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupAtResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.group_id)
  return group_id_;
}
inline void IMGroupAtResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.group_id)
}

// repeated uint32 peer_id = 3;
inline int IMGroupAtResp::peer_id_size() const {
  return peer_id_.size();
}
inline void IMGroupAtResp::clear_peer_id() {
  peer_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupAtResp::peer_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.peer_id)
  return peer_id_.Get(index);
}
inline void IMGroupAtResp::set_peer_id(int index, ::google::protobuf::uint32 value) {
  peer_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.peer_id)
}
inline void IMGroupAtResp::add_peer_id(::google::protobuf::uint32 value) {
  peer_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupAtResp.peer_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupAtResp::peer_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupAtResp.peer_id)
  return peer_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupAtResp::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupAtResp.peer_id)
  return &peer_id_;
}

// required uint32 group_at_type = 4;
inline bool IMGroupAtResp::has_group_at_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupAtResp::set_has_group_at_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupAtResp::clear_has_group_at_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupAtResp::clear_group_at_type() {
  group_at_type_ = 0u;
  clear_has_group_at_type();
}
inline ::google::protobuf::uint32 IMGroupAtResp::group_at_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.group_at_type)
  return group_at_type_;
}
inline void IMGroupAtResp::set_group_at_type(::google::protobuf::uint32 value) {
  set_has_group_at_type();
  group_at_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.group_at_type)
}

// required string from_user_name = 5;
inline bool IMGroupAtResp::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupAtResp::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupAtResp::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupAtResp::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& IMGroupAtResp::from_user_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.from_user_name)
  return *from_user_name_;
}
inline void IMGroupAtResp::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.from_user_name)
}
inline void IMGroupAtResp::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtResp.from_user_name)
}
inline void IMGroupAtResp::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtResp.from_user_name)
}
inline ::std::string* IMGroupAtResp::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtResp.from_user_name)
  return from_user_name_;
}
inline ::std::string* IMGroupAtResp::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtResp::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtResp.from_user_name)
}

// required uint32 result_code = 7;
inline bool IMGroupAtResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupAtResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupAtResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupAtResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupAtResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.result_code)
  return result_code_;
}
inline void IMGroupAtResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.result_code)
}

// optional uint32 msg_id = 8;
inline bool IMGroupAtResp::has_msg_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupAtResp::set_has_msg_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupAtResp::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupAtResp::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupAtResp::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.msg_id)
  return msg_id_;
}
inline void IMGroupAtResp::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.msg_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupAtResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupAtResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupAtResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupAtResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupAtResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtResp.attach_data)
  return *attach_data_;
}
inline void IMGroupAtResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtResp.attach_data)
}
inline void IMGroupAtResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtResp.attach_data)
}
inline void IMGroupAtResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtResp.attach_data)
}
inline ::std::string* IMGroupAtResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupAtResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberInviteReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberInviteReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInviteReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInviteReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInviteReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberInviteReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberInviteReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInviteReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInviteReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInviteReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteReq.group_id)
  return group_id_;
}
inline void IMGroupMemberInviteReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteReq.group_id)
}

// repeated uint32 user_id = 3;
inline int IMGroupMemberInviteReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupMemberInviteReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteReq.user_id)
  return user_id_.Get(index);
}
inline void IMGroupMemberInviteReq::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteReq.user_id)
}
inline void IMGroupMemberInviteReq::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInviteReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberInviteReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInviteReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberInviteReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInviteReq.user_id)
  return &user_id_;
}

// repeated string name = 4;
inline int IMGroupMemberInviteReq::name_size() const {
  return name_.size();
}
inline void IMGroupMemberInviteReq::clear_name() {
  name_.Clear();
}
inline const ::std::string& IMGroupMemberInviteReq::name(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteReq.name)
  return name_.Get(index);
}
inline ::std::string* IMGroupMemberInviteReq::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteReq.name)
  return name_.Mutable(index);
}
inline void IMGroupMemberInviteReq::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteReq.name)
  name_.Mutable(index)->assign(value);
}
inline void IMGroupMemberInviteReq::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteReq.name)
}
inline void IMGroupMemberInviteReq::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteReq.name)
}
inline ::std::string* IMGroupMemberInviteReq::add_name() {
  return name_.Add();
}
inline void IMGroupMemberInviteReq::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInviteReq.name)
}
inline void IMGroupMemberInviteReq::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Group.IMGroupMemberInviteReq.name)
}
inline void IMGroupMemberInviteReq::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Group.IMGroupMemberInviteReq.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMGroupMemberInviteReq::name() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInviteReq.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMGroupMemberInviteReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInviteReq.name)
  return &name_;
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInviteReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberInviteReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberInviteReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberInviteReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInviteReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInviteReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteReq.attach_data)
}
inline void IMGroupMemberInviteReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteReq.attach_data)
}
inline void IMGroupMemberInviteReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteReq.attach_data)
}
inline ::std::string* IMGroupMemberInviteReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInviteReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInviteReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInviteReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberInviteResp

// required uint32 creator_id = 1;
inline bool IMGroupMemberInviteResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInviteResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInviteResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberInviteResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberInviteResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInviteResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInviteResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.group_id)
  return group_id_;
}
inline void IMGroupMemberInviteResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.group_id)
}

// repeated uint32 user_id = 3;
inline int IMGroupMemberInviteResp::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupMemberInviteResp::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteResp::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.user_id)
  return user_id_.Get(index);
}
inline void IMGroupMemberInviteResp::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.user_id)
}
inline void IMGroupMemberInviteResp::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInviteResp.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberInviteResp::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInviteResp.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberInviteResp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInviteResp.user_id)
  return &user_id_;
}

// repeated string name = 4;
inline int IMGroupMemberInviteResp::name_size() const {
  return name_.size();
}
inline void IMGroupMemberInviteResp::clear_name() {
  name_.Clear();
}
inline const ::std::string& IMGroupMemberInviteResp::name(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.name)
  return name_.Get(index);
}
inline ::std::string* IMGroupMemberInviteResp::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteResp.name)
  return name_.Mutable(index);
}
inline void IMGroupMemberInviteResp::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.name)
  name_.Mutable(index)->assign(value);
}
inline void IMGroupMemberInviteResp::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteResp.name)
}
inline void IMGroupMemberInviteResp::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteResp.name)
}
inline ::std::string* IMGroupMemberInviteResp::add_name() {
  return name_.Add();
}
inline void IMGroupMemberInviteResp::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInviteResp.name)
}
inline void IMGroupMemberInviteResp::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Group.IMGroupMemberInviteResp.name)
}
inline void IMGroupMemberInviteResp::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Group.IMGroupMemberInviteResp.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMGroupMemberInviteResp::name() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInviteResp.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMGroupMemberInviteResp::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInviteResp.name)
  return &name_;
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberInviteResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberInviteResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberInviteResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.member_list)
}
inline void IMGroupMemberInviteResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInviteResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberInviteResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInviteResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberInviteResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInviteResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberInviteResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberInviteResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberInviteResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberInviteResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.result_code)
  return result_code_;
}
inline void IMGroupMemberInviteResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.result_code)
}

// optional string reason = 7;
inline bool IMGroupMemberInviteResp::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberInviteResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberInviteResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberInviteResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.reason)
  return *reason_;
}
inline void IMGroupMemberInviteResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.reason)
}
inline void IMGroupMemberInviteResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteResp.reason)
}
inline void IMGroupMemberInviteResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteResp.reason)
}
inline ::std::string* IMGroupMemberInviteResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberInviteResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInviteResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInviteResp.reason)
}

// optional string group_name = 8;
inline bool IMGroupMemberInviteResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberInviteResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberInviteResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupMemberInviteResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.group_name)
  return *group_name_;
}
inline void IMGroupMemberInviteResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.group_name)
}
inline void IMGroupMemberInviteResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteResp.group_name)
}
inline void IMGroupMemberInviteResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteResp.group_name)
}
inline ::std::string* IMGroupMemberInviteResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupMemberInviteResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInviteResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInviteResp.group_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInviteResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupMemberInviteResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupMemberInviteResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupMemberInviteResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInviteResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInviteResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInviteResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInviteResp.attach_data)
}
inline void IMGroupMemberInviteResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInviteResp.attach_data)
}
inline void IMGroupMemberInviteResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInviteResp.attach_data)
}
inline ::std::string* IMGroupMemberInviteResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInviteResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInviteResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInviteResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInviteResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberKickReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberKickReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberKickReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberKickReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberKickReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberKickReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberKickReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberKickReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberKickReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberKickReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberKickReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberKickReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickReq.group_id)
  return group_id_;
}
inline void IMGroupMemberKickReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickReq.group_id)
}

// repeated uint32 member_id = 3;
inline int IMGroupMemberKickReq::member_id_size() const {
  return member_id_.size();
}
inline void IMGroupMemberKickReq::clear_member_id() {
  member_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberKickReq::member_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickReq.member_id)
  return member_id_.Get(index);
}
inline void IMGroupMemberKickReq::set_member_id(int index, ::google::protobuf::uint32 value) {
  member_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickReq.member_id)
}
inline void IMGroupMemberKickReq::add_member_id(::google::protobuf::uint32 value) {
  member_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberKickReq.member_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberKickReq::member_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberKickReq.member_id)
  return member_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberKickReq::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberKickReq.member_id)
  return &member_id_;
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberKickReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberKickReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberKickReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberKickReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberKickReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberKickReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickReq.attach_data)
}
inline void IMGroupMemberKickReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberKickReq.attach_data)
}
inline void IMGroupMemberKickReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberKickReq.attach_data)
}
inline ::std::string* IMGroupMemberKickReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberKickReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberKickReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberKickReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberKickReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberKickResp

// required uint32 creator_id = 1;
inline bool IMGroupMemberKickResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberKickResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberKickResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberKickResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberKickResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberKickResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberKickResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberKickResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberKickResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberKickResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberKickResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.group_id)
  return group_id_;
}
inline void IMGroupMemberKickResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.group_id)
}

// repeated uint32 member_id = 3;
inline int IMGroupMemberKickResp::member_id_size() const {
  return member_id_.size();
}
inline void IMGroupMemberKickResp::clear_member_id() {
  member_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberKickResp::member_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.member_id)
  return member_id_.Get(index);
}
inline void IMGroupMemberKickResp::set_member_id(int index, ::google::protobuf::uint32 value) {
  member_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.member_id)
}
inline void IMGroupMemberKickResp::add_member_id(::google::protobuf::uint32 value) {
  member_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberKickResp.member_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberKickResp::member_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberKickResp.member_id)
  return member_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberKickResp::mutable_member_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberKickResp.member_id)
  return &member_id_;
}

// repeated string member_name = 4;
inline int IMGroupMemberKickResp::member_name_size() const {
  return member_name_.size();
}
inline void IMGroupMemberKickResp::clear_member_name() {
  member_name_.Clear();
}
inline const ::std::string& IMGroupMemberKickResp::member_name(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.member_name)
  return member_name_.Get(index);
}
inline ::std::string* IMGroupMemberKickResp::mutable_member_name(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberKickResp.member_name)
  return member_name_.Mutable(index);
}
inline void IMGroupMemberKickResp::set_member_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.member_name)
  member_name_.Mutable(index)->assign(value);
}
inline void IMGroupMemberKickResp::set_member_name(int index, const char* value) {
  member_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberKickResp.member_name)
}
inline void IMGroupMemberKickResp::set_member_name(int index, const char* value, size_t size) {
  member_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberKickResp.member_name)
}
inline ::std::string* IMGroupMemberKickResp::add_member_name() {
  return member_name_.Add();
}
inline void IMGroupMemberKickResp::add_member_name(const ::std::string& value) {
  member_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberKickResp.member_name)
}
inline void IMGroupMemberKickResp::add_member_name(const char* value) {
  member_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Group.IMGroupMemberKickResp.member_name)
}
inline void IMGroupMemberKickResp::add_member_name(const char* value, size_t size) {
  member_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Group.IMGroupMemberKickResp.member_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMGroupMemberKickResp::member_name() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberKickResp.member_name)
  return member_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMGroupMemberKickResp::mutable_member_name() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberKickResp.member_name)
  return &member_name_;
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberKickResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberKickResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberKickResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberKickResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.member_list)
}
inline void IMGroupMemberKickResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberKickResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberKickResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberKickResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberKickResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberKickResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberKickResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberKickResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberKickResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberKickResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberKickResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.result_code)
  return result_code_;
}
inline void IMGroupMemberKickResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.result_code)
}

// optional string reason = 7;
inline bool IMGroupMemberKickResp::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberKickResp::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberKickResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberKickResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberKickResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.reason)
  return *reason_;
}
inline void IMGroupMemberKickResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.reason)
}
inline void IMGroupMemberKickResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberKickResp.reason)
}
inline void IMGroupMemberKickResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberKickResp.reason)
}
inline ::std::string* IMGroupMemberKickResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberKickResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberKickResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberKickResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberKickResp.reason)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 8;
inline int IMGroupMemberKickResp::user_token_info_size() const {
  return user_token_info_.size();
}
inline void IMGroupMemberKickResp::clear_user_token_info() {
  user_token_info_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGroupMemberKickResp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.user_token_info)
  return user_token_info_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGroupMemberKickResp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberKickResp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGroupMemberKickResp::add_user_token_info() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberKickResp.user_token_info)
  return user_token_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGroupMemberKickResp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberKickResp.user_token_info)
  return user_token_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGroupMemberKickResp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberKickResp.user_token_info)
  return &user_token_info_;
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberKickResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupMemberKickResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupMemberKickResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupMemberKickResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberKickResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberKickResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberKickResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberKickResp.attach_data)
}
inline void IMGroupMemberKickResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberKickResp.attach_data)
}
inline void IMGroupMemberKickResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberKickResp.attach_data)
}
inline ::std::string* IMGroupMemberKickResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberKickResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberKickResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberKickResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberKickResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberApplyReq

// required uint32 user_id = 1;
inline bool IMGroupMemberApplyReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberApplyReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberApplyReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberApplyReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyReq.user_id)
  return user_id_;
}
inline void IMGroupMemberApplyReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyReq.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberApplyReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberApplyReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberApplyReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberApplyReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyReq.group_id)
  return group_id_;
}
inline void IMGroupMemberApplyReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyReq.group_id)
}

// required string name = 3;
inline bool IMGroupMemberApplyReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberApplyReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberApplyReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberApplyReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberApplyReq::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyReq.name)
  return *name_;
}
inline void IMGroupMemberApplyReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyReq.name)
}
inline void IMGroupMemberApplyReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberApplyReq.name)
}
inline void IMGroupMemberApplyReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberApplyReq.name)
}
inline ::std::string* IMGroupMemberApplyReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberApplyReq.name)
  return name_;
}
inline ::std::string* IMGroupMemberApplyReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberApplyReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberApplyReq.name)
}

// optional uint32 creator_id = 4;
inline bool IMGroupMemberApplyReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberApplyReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberApplyReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberApplyReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberApplyReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyReq.creator_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberApplyReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberApplyReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberApplyReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberApplyReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberApplyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberApplyReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyReq.attach_data)
}
inline void IMGroupMemberApplyReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberApplyReq.attach_data)
}
inline void IMGroupMemberApplyReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberApplyReq.attach_data)
}
inline ::std::string* IMGroupMemberApplyReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberApplyReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberApplyReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberApplyReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberApplyReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberApplyResp

// required uint32 user_id = 1;
inline bool IMGroupMemberApplyResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberApplyResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberApplyResp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyResp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.user_id)
  return user_id_;
}
inline void IMGroupMemberApplyResp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.user_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberApplyResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberApplyResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberApplyResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.group_id)
  return group_id_;
}
inline void IMGroupMemberApplyResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.group_id)
}

// required uint32 creator_id = 3;
inline bool IMGroupMemberApplyResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberApplyResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberApplyResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberApplyResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.creator_id)
}

// required string name = 4;
inline bool IMGroupMemberApplyResp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberApplyResp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberApplyResp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberApplyResp::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.name)
  return *name_;
}
inline void IMGroupMemberApplyResp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.name)
}
inline void IMGroupMemberApplyResp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberApplyResp.name)
}
inline void IMGroupMemberApplyResp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberApplyResp.name)
}
inline ::std::string* IMGroupMemberApplyResp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberApplyResp.name)
  return name_;
}
inline ::std::string* IMGroupMemberApplyResp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberApplyResp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberApplyResp.name)
}

// required uint32 result_code = 5;
inline bool IMGroupMemberApplyResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberApplyResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberApplyResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberApplyResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.result_code)
  return result_code_;
}
inline void IMGroupMemberApplyResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.result_code)
}

// optional string reason = 6;
inline bool IMGroupMemberApplyResp::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberApplyResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberApplyResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberApplyResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.reason)
  return *reason_;
}
inline void IMGroupMemberApplyResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.reason)
}
inline void IMGroupMemberApplyResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberApplyResp.reason)
}
inline void IMGroupMemberApplyResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberApplyResp.reason)
}
inline ::std::string* IMGroupMemberApplyResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberApplyResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberApplyResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberApplyResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberApplyResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberApplyResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberApplyResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberApplyResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberApplyResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberApplyResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberApplyResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberApplyResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberApplyResp.attach_data)
}
inline void IMGroupMemberApplyResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberApplyResp.attach_data)
}
inline void IMGroupMemberApplyResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberApplyResp.attach_data)
}
inline ::std::string* IMGroupMemberApplyResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberApplyResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberApplyResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberApplyResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberApplyResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberReviewReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberReviewReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberReviewReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberReviewReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberReviewReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberReviewReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewReq.creator_id)
}

// required uint32 user_id = 2;
inline bool IMGroupMemberReviewReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberReviewReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberReviewReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberReviewReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewReq.user_id)
  return user_id_;
}
inline void IMGroupMemberReviewReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewReq.user_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberReviewReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberReviewReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberReviewReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberReviewReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewReq.group_id)
  return group_id_;
}
inline void IMGroupMemberReviewReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewReq.group_id)
}

// required uint32 action = 4;
inline bool IMGroupMemberReviewReq::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberReviewReq::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberReviewReq::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberReviewReq::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewReq::action() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewReq.action)
  return action_;
}
inline void IMGroupMemberReviewReq::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewReq.action)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberReviewReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberReviewReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberReviewReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberReviewReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberReviewReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberReviewReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewReq.attach_data)
}
inline void IMGroupMemberReviewReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberReviewReq.attach_data)
}
inline void IMGroupMemberReviewReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberReviewReq.attach_data)
}
inline ::std::string* IMGroupMemberReviewReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberReviewReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberReviewReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberReviewReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberReviewReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberReviewResp

// required uint32 creator_id = 1;
inline bool IMGroupMemberReviewResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberReviewResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberReviewResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberReviewResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.creator_id)
}

// required uint32 user_id = 2;
inline bool IMGroupMemberReviewResp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberReviewResp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberReviewResp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.user_id)
  return user_id_;
}
inline void IMGroupMemberReviewResp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.user_id)
}

// required string name = 3;
inline bool IMGroupMemberReviewResp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberReviewResp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberReviewResp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberReviewResp::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.name)
  return *name_;
}
inline void IMGroupMemberReviewResp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.name)
}
inline void IMGroupMemberReviewResp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberReviewResp.name)
}
inline void IMGroupMemberReviewResp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberReviewResp.name)
}
inline ::std::string* IMGroupMemberReviewResp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberReviewResp.name)
  return name_;
}
inline ::std::string* IMGroupMemberReviewResp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberReviewResp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberReviewResp.name)
}

// required uint32 group_id = 4;
inline bool IMGroupMemberReviewResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberReviewResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberReviewResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.group_id)
  return group_id_;
}
inline void IMGroupMemberReviewResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.group_id)
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberReviewResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberReviewResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberReviewResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.member_list)
}
inline void IMGroupMemberReviewResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberReviewResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberReviewResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberReviewResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberReviewResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberReviewResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberReviewResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberReviewResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberReviewResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.result_code)
  return result_code_;
}
inline void IMGroupMemberReviewResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.result_code)
}

// required uint32 action = 7;
inline bool IMGroupMemberReviewResp::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberReviewResp::clear_has_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberReviewResp::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 IMGroupMemberReviewResp::action() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.action)
  return action_;
}
inline void IMGroupMemberReviewResp::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.action)
}

// optional string reason = 8;
inline bool IMGroupMemberReviewResp::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberReviewResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberReviewResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberReviewResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.reason)
  return *reason_;
}
inline void IMGroupMemberReviewResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.reason)
}
inline void IMGroupMemberReviewResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberReviewResp.reason)
}
inline void IMGroupMemberReviewResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberReviewResp.reason)
}
inline ::std::string* IMGroupMemberReviewResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberReviewResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberReviewResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberReviewResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberReviewResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberReviewResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupMemberReviewResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupMemberReviewResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupMemberReviewResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberReviewResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberReviewResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberReviewResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberReviewResp.attach_data)
}
inline void IMGroupMemberReviewResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberReviewResp.attach_data)
}
inline void IMGroupMemberReviewResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberReviewResp.attach_data)
}
inline ::std::string* IMGroupMemberReviewResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberReviewResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberReviewResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberReviewResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberReviewResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberQuitReq

// required uint32 member_id = 1;
inline bool IMGroupMemberQuitReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberQuitReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberQuitReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberQuitReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitReq.member_id)
  return member_id_;
}
inline void IMGroupMemberQuitReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitReq.member_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberQuitReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberQuitReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberQuitReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberQuitReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitReq.group_id)
  return group_id_;
}
inline void IMGroupMemberQuitReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitReq.group_id)
}

// required string name = 3;
inline bool IMGroupMemberQuitReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberQuitReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberQuitReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberQuitReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberQuitReq::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitReq.name)
  return *name_;
}
inline void IMGroupMemberQuitReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitReq.name)
}
inline void IMGroupMemberQuitReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitReq.name)
}
inline void IMGroupMemberQuitReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitReq.name)
}
inline ::std::string* IMGroupMemberQuitReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitReq.name)
  return name_;
}
inline ::std::string* IMGroupMemberQuitReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitReq.name)
}

// optional string reason = 4;
inline bool IMGroupMemberQuitReq::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberQuitReq::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberQuitReq::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberQuitReq::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberQuitReq::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitReq.reason)
  return *reason_;
}
inline void IMGroupMemberQuitReq::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitReq.reason)
}
inline void IMGroupMemberQuitReq::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitReq.reason)
}
inline void IMGroupMemberQuitReq::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitReq.reason)
}
inline ::std::string* IMGroupMemberQuitReq::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitReq.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberQuitReq::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitReq::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitReq.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberQuitReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberQuitReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberQuitReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberQuitReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberQuitReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberQuitReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitReq.attach_data)
}
inline void IMGroupMemberQuitReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitReq.attach_data)
}
inline void IMGroupMemberQuitReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitReq.attach_data)
}
inline ::std::string* IMGroupMemberQuitReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberQuitReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberQuitResp

// required uint32 member_id = 1;
inline bool IMGroupMemberQuitResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberQuitResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberQuitResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.member_id)
  return member_id_;
}
inline void IMGroupMemberQuitResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.member_id)
}

// required uint32 creator_id = 2;
inline bool IMGroupMemberQuitResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberQuitResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberQuitResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberQuitResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.creator_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberQuitResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberQuitResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberQuitResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.group_id)
  return group_id_;
}
inline void IMGroupMemberQuitResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.group_id)
}

// required string name = 4;
inline bool IMGroupMemberQuitResp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberQuitResp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberQuitResp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberQuitResp::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.name)
  return *name_;
}
inline void IMGroupMemberQuitResp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.name)
}
inline void IMGroupMemberQuitResp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitResp.name)
}
inline void IMGroupMemberQuitResp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitResp.name)
}
inline ::std::string* IMGroupMemberQuitResp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitResp.name)
  return name_;
}
inline ::std::string* IMGroupMemberQuitResp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitResp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitResp.name)
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberQuitResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberQuitResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberQuitResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.member_list)
}
inline void IMGroupMemberQuitResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberQuitResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberQuitResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberQuitResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberQuitResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberQuitResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberQuitResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberQuitResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberQuitResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberQuitResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.result_code)
  return result_code_;
}
inline void IMGroupMemberQuitResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.result_code)
}

// optional string reason = 7;
inline bool IMGroupMemberQuitResp::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberQuitResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberQuitResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberQuitResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.reason)
  return *reason_;
}
inline void IMGroupMemberQuitResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.reason)
}
inline void IMGroupMemberQuitResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitResp.reason)
}
inline void IMGroupMemberQuitResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitResp.reason)
}
inline ::std::string* IMGroupMemberQuitResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberQuitResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberQuitResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberQuitResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberQuitResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberQuitResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberQuitResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberQuitResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberQuitResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberQuitResp.attach_data)
}
inline void IMGroupMemberQuitResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberQuitResp.attach_data)
}
inline void IMGroupMemberQuitResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberQuitResp.attach_data)
}
inline ::std::string* IMGroupMemberQuitResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberQuitResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberQuitResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberQuitResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberQuitResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberDismissReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberDismissReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberDismissReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberDismissReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberDismissReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberDismissReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberDismissReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberDismissReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberDismissReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberDismissReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissReq.group_id)
  return group_id_;
}
inline void IMGroupMemberDismissReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissReq.group_id)
}

// optional string reason = 3;
inline bool IMGroupMemberDismissReq::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberDismissReq::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberDismissReq::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberDismissReq::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberDismissReq::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissReq.reason)
  return *reason_;
}
inline void IMGroupMemberDismissReq::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissReq.reason)
}
inline void IMGroupMemberDismissReq::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberDismissReq.reason)
}
inline void IMGroupMemberDismissReq::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberDismissReq.reason)
}
inline ::std::string* IMGroupMemberDismissReq::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissReq.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberDismissReq::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberDismissReq::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberDismissReq.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberDismissReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberDismissReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberDismissReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberDismissReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberDismissReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberDismissReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissReq.attach_data)
}
inline void IMGroupMemberDismissReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberDismissReq.attach_data)
}
inline void IMGroupMemberDismissReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberDismissReq.attach_data)
}
inline ::std::string* IMGroupMemberDismissReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberDismissReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberDismissReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberDismissReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberDismissResp

// required uint32 creator_id = 1;
inline bool IMGroupMemberDismissResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberDismissResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberDismissResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberDismissResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberDismissResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberDismissResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberDismissResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.group_id)
  return group_id_;
}
inline void IMGroupMemberDismissResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.group_id)
}

// repeated uint32 member_list = 3;
inline int IMGroupMemberDismissResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberDismissResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberDismissResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.member_list)
}
inline void IMGroupMemberDismissResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberDismissResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberDismissResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberDismissResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberDismissResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberDismissResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 4;
inline bool IMGroupMemberDismissResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberDismissResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberDismissResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberDismissResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.result_code)
  return result_code_;
}
inline void IMGroupMemberDismissResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.result_code)
}

// optional string reason = 5;
inline bool IMGroupMemberDismissResp::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberDismissResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberDismissResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberDismissResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.reason)
  return *reason_;
}
inline void IMGroupMemberDismissResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.reason)
}
inline void IMGroupMemberDismissResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberDismissResp.reason)
}
inline void IMGroupMemberDismissResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberDismissResp.reason)
}
inline ::std::string* IMGroupMemberDismissResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberDismissResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberDismissResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberDismissResp.reason)
}

// optional string group_name = 6;
inline bool IMGroupMemberDismissResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberDismissResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberDismissResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupMemberDismissResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.group_name)
  return *group_name_;
}
inline void IMGroupMemberDismissResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.group_name)
}
inline void IMGroupMemberDismissResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberDismissResp.group_name)
}
inline void IMGroupMemberDismissResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberDismissResp.group_name)
}
inline ::std::string* IMGroupMemberDismissResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupMemberDismissResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberDismissResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberDismissResp.group_name)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 7;
inline int IMGroupMemberDismissResp::user_token_info_size() const {
  return user_token_info_.size();
}
inline void IMGroupMemberDismissResp::clear_user_token_info() {
  user_token_info_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGroupMemberDismissResp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.user_token_info)
  return user_token_info_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGroupMemberDismissResp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissResp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGroupMemberDismissResp::add_user_token_info() {
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberDismissResp.user_token_info)
  return user_token_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGroupMemberDismissResp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberDismissResp.user_token_info)
  return user_token_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGroupMemberDismissResp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberDismissResp.user_token_info)
  return &user_token_info_;
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberDismissResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberDismissResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberDismissResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberDismissResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberDismissResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberDismissResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberDismissResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberDismissResp.attach_data)
}
inline void IMGroupMemberDismissResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberDismissResp.attach_data)
}
inline void IMGroupMemberDismissResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberDismissResp.attach_data)
}
inline ::std::string* IMGroupMemberDismissResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberDismissResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberDismissResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberDismissResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberDismissResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoModifyReq

// required uint32 creator_id = 1;
inline bool IMGroupInfoModifyReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoModifyReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoModifyReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.creator_id)
  return creator_id_;
}
inline void IMGroupInfoModifyReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupInfoModifyReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoModifyReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoModifyReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_id)
  return group_id_;
}
inline void IMGroupInfoModifyReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_id)
}

// required uint32 group_type = 3;
inline bool IMGroupInfoModifyReq::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoModifyReq::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoModifyReq::clear_group_type() {
  group_type_ = 0u;
  clear_has_group_type();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyReq::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_type)
  return group_type_;
}
inline void IMGroupInfoModifyReq::set_group_type(::google::protobuf::uint32 value) {
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_type)
}

// required string group_name = 4;
inline bool IMGroupInfoModifyReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoModifyReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoModifyReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupInfoModifyReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_name)
  return *group_name_;
}
inline void IMGroupInfoModifyReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline void IMGroupInfoModifyReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline void IMGroupInfoModifyReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.group_name)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupInfoModifyReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.group_name)
}

// required string group_portrait = 5;
inline bool IMGroupInfoModifyReq::has_group_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupInfoModifyReq::clear_has_group_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupInfoModifyReq::clear_group_portrait() {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_->clear();
  }
  clear_has_group_portrait();
}
inline const ::std::string& IMGroupInfoModifyReq::group_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_portrait)
  return *group_portrait_;
}
inline void IMGroupInfoModifyReq::set_group_portrait(const ::std::string& value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_portrait)
}
inline void IMGroupInfoModifyReq::set_group_portrait(const char* value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.group_portrait)
}
inline void IMGroupInfoModifyReq::set_group_portrait(const char* value, size_t size) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.group_portrait)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_group_portrait() {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.group_portrait)
  return group_portrait_;
}
inline ::std::string* IMGroupInfoModifyReq::release_group_portrait() {
  clear_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_portrait_;
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_group_portrait(::std::string* group_portrait) {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (group_portrait) {
    set_has_group_portrait();
    group_portrait_ = group_portrait;
  } else {
    clear_has_group_portrait();
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.group_portrait)
}

// optional string group_descrp = 6;
inline bool IMGroupInfoModifyReq::has_group_descrp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_group_descrp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupInfoModifyReq::clear_has_group_descrp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupInfoModifyReq::clear_group_descrp() {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_->clear();
  }
  clear_has_group_descrp();
}
inline const ::std::string& IMGroupInfoModifyReq::group_descrp() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.group_descrp)
  return *group_descrp_;
}
inline void IMGroupInfoModifyReq::set_group_descrp(const ::std::string& value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.group_descrp)
}
inline void IMGroupInfoModifyReq::set_group_descrp(const char* value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.group_descrp)
}
inline void IMGroupInfoModifyReq::set_group_descrp(const char* value, size_t size) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.group_descrp)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_group_descrp() {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.group_descrp)
  return group_descrp_;
}
inline ::std::string* IMGroupInfoModifyReq::release_group_descrp() {
  clear_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_descrp_;
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_group_descrp(::std::string* group_descrp) {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (group_descrp) {
    set_has_group_descrp();
    group_descrp_ = group_descrp;
  } else {
    clear_has_group_descrp();
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.group_descrp)
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoModifyReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupInfoModifyReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupInfoModifyReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupInfoModifyReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoModifyReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyReq.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoModifyReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline void IMGroupInfoModifyReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline void IMGroupInfoModifyReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyReq.attach_data)
}
inline ::std::string* IMGroupInfoModifyReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoModifyReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupInfoModifyResp

// required uint32 creator_id = 1;
inline bool IMGroupInfoModifyResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupInfoModifyResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupInfoModifyResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.creator_id)
  return creator_id_;
}
inline void IMGroupInfoModifyResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupInfoModifyResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupInfoModifyResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupInfoModifyResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.group_id)
  return group_id_;
}
inline void IMGroupInfoModifyResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.group_id)
}

// required uint32 group_type = 3;
inline bool IMGroupInfoModifyResp::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupInfoModifyResp::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupInfoModifyResp::clear_group_type() {
  group_type_ = 0u;
  clear_has_group_type();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyResp::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.group_type)
  return group_type_;
}
inline void IMGroupInfoModifyResp::set_group_type(::google::protobuf::uint32 value) {
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.group_type)
}

// required string group_name = 4;
inline bool IMGroupInfoModifyResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupInfoModifyResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupInfoModifyResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupInfoModifyResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.group_name)
  return *group_name_;
}
inline void IMGroupInfoModifyResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.group_name)
}
inline void IMGroupInfoModifyResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyResp.group_name)
}
inline void IMGroupInfoModifyResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyResp.group_name)
}
inline ::std::string* IMGroupInfoModifyResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupInfoModifyResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyResp.group_name)
}

// required string group_portrait = 5;
inline bool IMGroupInfoModifyResp::has_group_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_group_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupInfoModifyResp::clear_has_group_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupInfoModifyResp::clear_group_portrait() {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_->clear();
  }
  clear_has_group_portrait();
}
inline const ::std::string& IMGroupInfoModifyResp::group_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.group_portrait)
  return *group_portrait_;
}
inline void IMGroupInfoModifyResp::set_group_portrait(const ::std::string& value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.group_portrait)
}
inline void IMGroupInfoModifyResp::set_group_portrait(const char* value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyResp.group_portrait)
}
inline void IMGroupInfoModifyResp::set_group_portrait(const char* value, size_t size) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyResp.group_portrait)
}
inline ::std::string* IMGroupInfoModifyResp::mutable_group_portrait() {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyResp.group_portrait)
  return group_portrait_;
}
inline ::std::string* IMGroupInfoModifyResp::release_group_portrait() {
  clear_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_portrait_;
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyResp::set_allocated_group_portrait(::std::string* group_portrait) {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (group_portrait) {
    set_has_group_portrait();
    group_portrait_ = group_portrait;
  } else {
    clear_has_group_portrait();
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyResp.group_portrait)
}

// repeated uint32 member_list = 6;
inline int IMGroupInfoModifyResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupInfoModifyResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupInfoModifyResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.member_list)
}
inline void IMGroupInfoModifyResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupInfoModifyResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupInfoModifyResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupInfoModifyResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupInfoModifyResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupInfoModifyResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 7;
inline bool IMGroupInfoModifyResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupInfoModifyResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupInfoModifyResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupInfoModifyResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.result_code)
  return result_code_;
}
inline void IMGroupInfoModifyResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.result_code)
}

// optional string reason = 8;
inline bool IMGroupInfoModifyResp::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupInfoModifyResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupInfoModifyResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupInfoModifyResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.reason)
  return *reason_;
}
inline void IMGroupInfoModifyResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.reason)
}
inline void IMGroupInfoModifyResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyResp.reason)
}
inline void IMGroupInfoModifyResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyResp.reason)
}
inline ::std::string* IMGroupInfoModifyResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyResp.reason)
  return reason_;
}
inline ::std::string* IMGroupInfoModifyResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyResp.reason)
}

// optional string group_descrp = 9;
inline bool IMGroupInfoModifyResp::has_group_descrp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_group_descrp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupInfoModifyResp::clear_has_group_descrp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupInfoModifyResp::clear_group_descrp() {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_->clear();
  }
  clear_has_group_descrp();
}
inline const ::std::string& IMGroupInfoModifyResp::group_descrp() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.group_descrp)
  return *group_descrp_;
}
inline void IMGroupInfoModifyResp::set_group_descrp(const ::std::string& value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.group_descrp)
}
inline void IMGroupInfoModifyResp::set_group_descrp(const char* value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyResp.group_descrp)
}
inline void IMGroupInfoModifyResp::set_group_descrp(const char* value, size_t size) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyResp.group_descrp)
}
inline ::std::string* IMGroupInfoModifyResp::mutable_group_descrp() {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyResp.group_descrp)
  return group_descrp_;
}
inline ::std::string* IMGroupInfoModifyResp::release_group_descrp() {
  clear_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_descrp_;
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyResp::set_allocated_group_descrp(::std::string* group_descrp) {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (group_descrp) {
    set_has_group_descrp();
    group_descrp_ = group_descrp;
  } else {
    clear_has_group_descrp();
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyResp.group_descrp)
}

// optional bytes attach_data = 20;
inline bool IMGroupInfoModifyResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMGroupInfoModifyResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMGroupInfoModifyResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMGroupInfoModifyResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupInfoModifyResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupInfoModifyResp.attach_data)
  return *attach_data_;
}
inline void IMGroupInfoModifyResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupInfoModifyResp.attach_data)
}
inline void IMGroupInfoModifyResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupInfoModifyResp.attach_data)
}
inline void IMGroupInfoModifyResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupInfoModifyResp.attach_data)
}
inline ::std::string* IMGroupInfoModifyResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupInfoModifyResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupInfoModifyResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupInfoModifyResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupInfoModifyResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupForbiddenReq

// required uint32 creator_id = 1;
inline bool IMGroupForbiddenReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupForbiddenReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupForbiddenReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupForbiddenReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupForbiddenReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenReq.creator_id)
  return creator_id_;
}
inline void IMGroupForbiddenReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupForbiddenReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupForbiddenReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupForbiddenReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupForbiddenReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupForbiddenReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenReq.group_id)
  return group_id_;
}
inline void IMGroupForbiddenReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenReq.group_id)
}

// required uint32 state = 3;
inline bool IMGroupForbiddenReq::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupForbiddenReq::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupForbiddenReq::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupForbiddenReq::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMGroupForbiddenReq::state() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenReq.state)
  return state_;
}
inline void IMGroupForbiddenReq::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenReq.state)
}

// optional string creator_name = 4;
inline bool IMGroupForbiddenReq::has_creator_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupForbiddenReq::set_has_creator_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupForbiddenReq::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupForbiddenReq::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupForbiddenReq::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenReq.creator_name)
  return *creator_name_;
}
inline void IMGroupForbiddenReq::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenReq.creator_name)
}
inline void IMGroupForbiddenReq::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupForbiddenReq.creator_name)
}
inline void IMGroupForbiddenReq::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupForbiddenReq.creator_name)
}
inline ::std::string* IMGroupForbiddenReq::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupForbiddenReq.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupForbiddenReq::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupForbiddenReq::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupForbiddenReq.creator_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupForbiddenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupForbiddenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupForbiddenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupForbiddenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupForbiddenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenReq.attach_data)
  return *attach_data_;
}
inline void IMGroupForbiddenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenReq.attach_data)
}
inline void IMGroupForbiddenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupForbiddenReq.attach_data)
}
inline void IMGroupForbiddenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupForbiddenReq.attach_data)
}
inline ::std::string* IMGroupForbiddenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupForbiddenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupForbiddenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupForbiddenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupForbiddenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupForbiddenResp

// required uint32 creator_id = 1;
inline bool IMGroupForbiddenResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupForbiddenResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupForbiddenResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupForbiddenResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupForbiddenResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.creator_id)
  return creator_id_;
}
inline void IMGroupForbiddenResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupForbiddenResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupForbiddenResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupForbiddenResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupForbiddenResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupForbiddenResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.group_id)
  return group_id_;
}
inline void IMGroupForbiddenResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.group_id)
}

// required uint32 state = 3;
inline bool IMGroupForbiddenResp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupForbiddenResp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupForbiddenResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupForbiddenResp::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMGroupForbiddenResp::state() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.state)
  return state_;
}
inline void IMGroupForbiddenResp::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.state)
}

// repeated uint32 member_list = 4;
inline int IMGroupForbiddenResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupForbiddenResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupForbiddenResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupForbiddenResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.member_list)
}
inline void IMGroupForbiddenResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupForbiddenResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupForbiddenResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupForbiddenResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupForbiddenResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupForbiddenResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 5;
inline bool IMGroupForbiddenResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupForbiddenResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupForbiddenResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupForbiddenResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupForbiddenResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.result_code)
  return result_code_;
}
inline void IMGroupForbiddenResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.result_code)
}

// optional string reason = 6;
inline bool IMGroupForbiddenResp::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupForbiddenResp::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupForbiddenResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupForbiddenResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupForbiddenResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.reason)
  return *reason_;
}
inline void IMGroupForbiddenResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.reason)
}
inline void IMGroupForbiddenResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupForbiddenResp.reason)
}
inline void IMGroupForbiddenResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupForbiddenResp.reason)
}
inline ::std::string* IMGroupForbiddenResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupForbiddenResp.reason)
  return reason_;
}
inline ::std::string* IMGroupForbiddenResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupForbiddenResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupForbiddenResp.reason)
}

// optional string creator_name = 7;
inline bool IMGroupForbiddenResp::has_creator_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupForbiddenResp::set_has_creator_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupForbiddenResp::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupForbiddenResp::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupForbiddenResp::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.creator_name)
  return *creator_name_;
}
inline void IMGroupForbiddenResp::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.creator_name)
}
inline void IMGroupForbiddenResp::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupForbiddenResp.creator_name)
}
inline void IMGroupForbiddenResp::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupForbiddenResp.creator_name)
}
inline ::std::string* IMGroupForbiddenResp::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupForbiddenResp.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupForbiddenResp::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupForbiddenResp::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupForbiddenResp.creator_name)
}

// optional bytes attach_data = 20;
inline bool IMGroupForbiddenResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupForbiddenResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupForbiddenResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupForbiddenResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupForbiddenResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupForbiddenResp.attach_data)
  return *attach_data_;
}
inline void IMGroupForbiddenResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupForbiddenResp.attach_data)
}
inline void IMGroupForbiddenResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupForbiddenResp.attach_data)
}
inline void IMGroupForbiddenResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupForbiddenResp.attach_data)
}
inline ::std::string* IMGroupForbiddenResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupForbiddenResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupForbiddenResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupForbiddenResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupForbiddenResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupSetMemberIdentityReq

// required uint32 creator_id = 1;
inline bool IMGroupSetMemberIdentityReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetMemberIdentityReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.creator_id)
  return creator_id_;
}
inline void IMGroupSetMemberIdentityReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetMemberIdentityReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetMemberIdentityReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.group_id)
  return group_id_;
}
inline void IMGroupSetMemberIdentityReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.group_id)
}

// required uint32 member_id = 3;
inline bool IMGroupSetMemberIdentityReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetMemberIdentityReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.member_id)
  return member_id_;
}
inline void IMGroupSetMemberIdentityReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.member_id)
}

// required string group_name = 4;
inline bool IMGroupSetMemberIdentityReq::has_group_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_group_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetMemberIdentityReq::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupSetMemberIdentityReq::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.group_name)
  return *group_name_;
}
inline void IMGroupSetMemberIdentityReq::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.group_name)
}
inline void IMGroupSetMemberIdentityReq::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityReq.group_name)
}
inline void IMGroupSetMemberIdentityReq::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityReq.group_name)
}
inline ::std::string* IMGroupSetMemberIdentityReq::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityReq.group_name)
  return group_name_;
}
inline ::std::string* IMGroupSetMemberIdentityReq::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityReq::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityReq.group_name)
}

// required uint32 degree = 5;
inline bool IMGroupSetMemberIdentityReq::has_degree() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_degree() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_degree() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetMemberIdentityReq::clear_degree() {
  degree_ = 0u;
  clear_has_degree();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityReq::degree() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.degree)
  return degree_;
}
inline void IMGroupSetMemberIdentityReq::set_degree(::google::protobuf::uint32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.degree)
}

// optional bytes attach_data = 20;
inline bool IMGroupSetMemberIdentityReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetMemberIdentityReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetMemberIdentityReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetMemberIdentityReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupSetMemberIdentityReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
  return *attach_data_;
}
inline void IMGroupSetMemberIdentityReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
}
inline void IMGroupSetMemberIdentityReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
}
inline void IMGroupSetMemberIdentityReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
}
inline ::std::string* IMGroupSetMemberIdentityReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupSetMemberIdentityReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupSetMemberIdentityResp

// required uint32 creator_id = 1;
inline bool IMGroupSetMemberIdentityResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetMemberIdentityResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.creator_id)
  return creator_id_;
}
inline void IMGroupSetMemberIdentityResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupSetMemberIdentityResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetMemberIdentityResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.group_id)
  return group_id_;
}
inline void IMGroupSetMemberIdentityResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.group_id)
}

// required string group_name = 3;
inline bool IMGroupSetMemberIdentityResp::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetMemberIdentityResp::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupSetMemberIdentityResp::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.group_name)
  return *group_name_;
}
inline void IMGroupSetMemberIdentityResp::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.group_name)
}
inline void IMGroupSetMemberIdentityResp::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityResp.group_name)
}
inline void IMGroupSetMemberIdentityResp::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityResp.group_name)
}
inline ::std::string* IMGroupSetMemberIdentityResp::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityResp.group_name)
  return group_name_;
}
inline ::std::string* IMGroupSetMemberIdentityResp::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityResp::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityResp.group_name)
}

// required uint32 member_id = 4;
inline bool IMGroupSetMemberIdentityResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetMemberIdentityResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.member_id)
  return member_id_;
}
inline void IMGroupSetMemberIdentityResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.member_id)
}

// required string member_name = 5;
inline bool IMGroupSetMemberIdentityResp::has_member_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_member_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_member_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetMemberIdentityResp::clear_member_name() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_->clear();
  }
  clear_has_member_name();
}
inline const ::std::string& IMGroupSetMemberIdentityResp::member_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.member_name)
  return *member_name_;
}
inline void IMGroupSetMemberIdentityResp::set_member_name(const ::std::string& value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.member_name)
}
inline void IMGroupSetMemberIdentityResp::set_member_name(const char* value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityResp.member_name)
}
inline void IMGroupSetMemberIdentityResp::set_member_name(const char* value, size_t size) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityResp.member_name)
}
inline ::std::string* IMGroupSetMemberIdentityResp::mutable_member_name() {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityResp.member_name)
  return member_name_;
}
inline ::std::string* IMGroupSetMemberIdentityResp::release_member_name() {
  clear_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = member_name_;
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityResp::set_allocated_member_name(::std::string* member_name) {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (member_name) {
    set_has_member_name();
    member_name_ = member_name;
  } else {
    clear_has_member_name();
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityResp.member_name)
}

// required uint32 degree = 6;
inline bool IMGroupSetMemberIdentityResp::has_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetMemberIdentityResp::clear_degree() {
  degree_ = 0u;
  clear_has_degree();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::degree() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.degree)
  return degree_;
}
inline void IMGroupSetMemberIdentityResp::set_degree(::google::protobuf::uint32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.degree)
}

// repeated uint32 member_list = 7;
inline int IMGroupSetMemberIdentityResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupSetMemberIdentityResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupSetMemberIdentityResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.member_list)
}
inline void IMGroupSetMemberIdentityResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupSetMemberIdentityResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupSetMemberIdentityResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupSetMemberIdentityResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupSetMemberIdentityResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupSetMemberIdentityResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 8;
inline bool IMGroupSetMemberIdentityResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupSetMemberIdentityResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupSetMemberIdentityResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.result_code)
  return result_code_;
}
inline void IMGroupSetMemberIdentityResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.result_code)
}

// optional string reason = 9;
inline bool IMGroupSetMemberIdentityResp::has_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_reason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupSetMemberIdentityResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupSetMemberIdentityResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.reason)
  return *reason_;
}
inline void IMGroupSetMemberIdentityResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.reason)
}
inline void IMGroupSetMemberIdentityResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityResp.reason)
}
inline void IMGroupSetMemberIdentityResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityResp.reason)
}
inline ::std::string* IMGroupSetMemberIdentityResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityResp.reason)
  return reason_;
}
inline ::std::string* IMGroupSetMemberIdentityResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupSetMemberIdentityResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMGroupSetMemberIdentityResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMGroupSetMemberIdentityResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMGroupSetMemberIdentityResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupSetMemberIdentityResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
  return *attach_data_;
}
inline void IMGroupSetMemberIdentityResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
}
inline void IMGroupSetMemberIdentityResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
}
inline void IMGroupSetMemberIdentityResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
}
inline ::std::string* IMGroupSetMemberIdentityResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupSetMemberIdentityResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetMemberIdentityResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetMemberIdentityResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberInfoUpdateReq

// required uint32 member_id = 1;
inline bool IMGroupMemberInfoUpdateReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInfoUpdateReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInfoUpdateReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInfoUpdateReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateReq.member_id)
  return member_id_;
}
inline void IMGroupMemberInfoUpdateReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateReq.member_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberInfoUpdateReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInfoUpdateReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInfoUpdateReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInfoUpdateReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateReq.group_id)
  return group_id_;
}
inline void IMGroupMemberInfoUpdateReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateReq.group_id)
}

// required string name = 3;
inline bool IMGroupMemberInfoUpdateReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberInfoUpdateReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberInfoUpdateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberInfoUpdateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberInfoUpdateReq::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateReq.name)
  return *name_;
}
inline void IMGroupMemberInfoUpdateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateReq.name)
}
inline void IMGroupMemberInfoUpdateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoUpdateReq.name)
}
inline void IMGroupMemberInfoUpdateReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoUpdateReq.name)
}
inline ::std::string* IMGroupMemberInfoUpdateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoUpdateReq.name)
  return name_;
}
inline ::std::string* IMGroupMemberInfoUpdateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoUpdateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoUpdateReq.name)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInfoUpdateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberInfoUpdateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberInfoUpdateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberInfoUpdateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInfoUpdateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInfoUpdateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
}
inline void IMGroupMemberInfoUpdateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
}
inline void IMGroupMemberInfoUpdateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
}
inline ::std::string* IMGroupMemberInfoUpdateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInfoUpdateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoUpdateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoUpdateReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberInfoUpdateResp

// required uint32 member_id = 1;
inline bool IMGroupMemberInfoUpdateResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInfoUpdateResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.member_id)
  return member_id_;
}
inline void IMGroupMemberInfoUpdateResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.member_id)
}

// required uint32 creator_id = 2;
inline bool IMGroupMemberInfoUpdateResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInfoUpdateResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberInfoUpdateResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.creator_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberInfoUpdateResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberInfoUpdateResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.group_id)
  return group_id_;
}
inline void IMGroupMemberInfoUpdateResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.group_id)
}

// required string name = 4;
inline bool IMGroupMemberInfoUpdateResp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberInfoUpdateResp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMGroupMemberInfoUpdateResp::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.name)
  return *name_;
}
inline void IMGroupMemberInfoUpdateResp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.name)
}
inline void IMGroupMemberInfoUpdateResp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoUpdateResp.name)
}
inline void IMGroupMemberInfoUpdateResp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoUpdateResp.name)
}
inline ::std::string* IMGroupMemberInfoUpdateResp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoUpdateResp.name)
  return name_;
}
inline ::std::string* IMGroupMemberInfoUpdateResp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoUpdateResp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoUpdateResp.name)
}

// repeated uint32 member_list = 5;
inline int IMGroupMemberInfoUpdateResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberInfoUpdateResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberInfoUpdateResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.member_list)
}
inline void IMGroupMemberInfoUpdateResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberInfoUpdateResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberInfoUpdateResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberInfoUpdateResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberInfoUpdateResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberInfoUpdateResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 6;
inline bool IMGroupMemberInfoUpdateResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberInfoUpdateResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoUpdateResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.result_code)
  return result_code_;
}
inline void IMGroupMemberInfoUpdateResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.result_code)
}

// optional string reason = 7;
inline bool IMGroupMemberInfoUpdateResp::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberInfoUpdateResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberInfoUpdateResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.reason)
  return *reason_;
}
inline void IMGroupMemberInfoUpdateResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.reason)
}
inline void IMGroupMemberInfoUpdateResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoUpdateResp.reason)
}
inline void IMGroupMemberInfoUpdateResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoUpdateResp.reason)
}
inline ::std::string* IMGroupMemberInfoUpdateResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoUpdateResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberInfoUpdateResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoUpdateResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoUpdateResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInfoUpdateResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberInfoUpdateResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberInfoUpdateResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberInfoUpdateResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInfoUpdateResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInfoUpdateResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
}
inline void IMGroupMemberInfoUpdateResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
}
inline void IMGroupMemberInfoUpdateResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
}
inline ::std::string* IMGroupMemberInfoUpdateResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInfoUpdateResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoUpdateResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoUpdateResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberForbiddenReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberForbiddenReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberForbiddenReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberForbiddenReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberForbiddenReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberForbiddenReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenReq.creator_id)
}

// required uint32 member_id = 2;
inline bool IMGroupMemberForbiddenReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberForbiddenReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberForbiddenReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberForbiddenReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenReq.member_id)
  return member_id_;
}
inline void IMGroupMemberForbiddenReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenReq.member_id)
}

// required uint32 group_id = 3;
inline bool IMGroupMemberForbiddenReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberForbiddenReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberForbiddenReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberForbiddenReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenReq.group_id)
  return group_id_;
}
inline void IMGroupMemberForbiddenReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenReq.group_id)
}

// required uint32 state = 4;
inline bool IMGroupMemberForbiddenReq::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberForbiddenReq::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberForbiddenReq::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberForbiddenReq::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenReq::state() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenReq.state)
  return state_;
}
inline void IMGroupMemberForbiddenReq::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenReq.state)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberForbiddenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberForbiddenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberForbiddenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberForbiddenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberForbiddenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberForbiddenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenReq.attach_data)
}
inline void IMGroupMemberForbiddenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberForbiddenReq.attach_data)
}
inline void IMGroupMemberForbiddenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberForbiddenReq.attach_data)
}
inline ::std::string* IMGroupMemberForbiddenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberForbiddenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberForbiddenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberForbiddenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberForbiddenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberForbiddenResp

// required uint32 member_id = 1;
inline bool IMGroupMemberForbiddenResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberForbiddenResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberForbiddenResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.member_id)
  return member_id_;
}
inline void IMGroupMemberForbiddenResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.member_id)
}

// required string member_name = 2;
inline bool IMGroupMemberForbiddenResp::has_member_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_member_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberForbiddenResp::clear_has_member_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberForbiddenResp::clear_member_name() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_->clear();
  }
  clear_has_member_name();
}
inline const ::std::string& IMGroupMemberForbiddenResp::member_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.member_name)
  return *member_name_;
}
inline void IMGroupMemberForbiddenResp::set_member_name(const ::std::string& value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.member_name)
}
inline void IMGroupMemberForbiddenResp::set_member_name(const char* value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberForbiddenResp.member_name)
}
inline void IMGroupMemberForbiddenResp::set_member_name(const char* value, size_t size) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberForbiddenResp.member_name)
}
inline ::std::string* IMGroupMemberForbiddenResp::mutable_member_name() {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberForbiddenResp.member_name)
  return member_name_;
}
inline ::std::string* IMGroupMemberForbiddenResp::release_member_name() {
  clear_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = member_name_;
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberForbiddenResp::set_allocated_member_name(::std::string* member_name) {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (member_name) {
    set_has_member_name();
    member_name_ = member_name;
  } else {
    clear_has_member_name();
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberForbiddenResp.member_name)
}

// required uint32 creator_id = 3;
inline bool IMGroupMemberForbiddenResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberForbiddenResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberForbiddenResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberForbiddenResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.creator_id)
}

// required uint32 group_id = 4;
inline bool IMGroupMemberForbiddenResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberForbiddenResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberForbiddenResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.group_id)
  return group_id_;
}
inline void IMGroupMemberForbiddenResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.group_id)
}

// required uint32 state = 5;
inline bool IMGroupMemberForbiddenResp::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberForbiddenResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberForbiddenResp::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::state() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.state)
  return state_;
}
inline void IMGroupMemberForbiddenResp::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.state)
}

// repeated uint32 member_list = 6;
inline int IMGroupMemberForbiddenResp::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberForbiddenResp::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberForbiddenResp::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.member_list)
}
inline void IMGroupMemberForbiddenResp::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberForbiddenResp.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberForbiddenResp::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberForbiddenResp.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberForbiddenResp::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberForbiddenResp.member_list)
  return &member_list_;
}

// required uint32 result_code = 7;
inline bool IMGroupMemberForbiddenResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberForbiddenResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberForbiddenResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberForbiddenResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.result_code)
  return result_code_;
}
inline void IMGroupMemberForbiddenResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.result_code)
}

// optional string reason = 8;
inline bool IMGroupMemberForbiddenResp::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberForbiddenResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberForbiddenResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberForbiddenResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.reason)
  return *reason_;
}
inline void IMGroupMemberForbiddenResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.reason)
}
inline void IMGroupMemberForbiddenResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberForbiddenResp.reason)
}
inline void IMGroupMemberForbiddenResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberForbiddenResp.reason)
}
inline ::std::string* IMGroupMemberForbiddenResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberForbiddenResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberForbiddenResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberForbiddenResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberForbiddenResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberForbiddenResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupMemberForbiddenResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupMemberForbiddenResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupMemberForbiddenResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberForbiddenResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberForbiddenResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberForbiddenResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberForbiddenResp.attach_data)
}
inline void IMGroupMemberForbiddenResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberForbiddenResp.attach_data)
}
inline void IMGroupMemberForbiddenResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberForbiddenResp.attach_data)
}
inline ::std::string* IMGroupMemberForbiddenResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberForbiddenResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberForbiddenResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberForbiddenResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberForbiddenResp.attach_data)
}

// -------------------------------------------------------------------

// IMGroupBaseInfoAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupBaseInfoAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupBaseInfoAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupBaseInfoAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupBaseInfoAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupBaseInfoAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupBaseInfoAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.group_id)
}

// required string group_name = 3;
inline bool IMGroupBaseInfoAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupBaseInfoAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupBaseInfoAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupBaseInfoAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
}
inline void IMGroupBaseInfoAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
}
inline void IMGroupBaseInfoAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
}
inline ::std::string* IMGroupBaseInfoAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupBaseInfoAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupBaseInfoAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupBaseInfoAlterNotify.group_name)
}

// required string group_descrp = 4;
inline bool IMGroupBaseInfoAlterNotify::has_group_descrp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_group_descrp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_group_descrp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupBaseInfoAlterNotify::clear_group_descrp() {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_->clear();
  }
  clear_has_group_descrp();
}
inline const ::std::string& IMGroupBaseInfoAlterNotify::group_descrp() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
  return *group_descrp_;
}
inline void IMGroupBaseInfoAlterNotify::set_group_descrp(const ::std::string& value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
}
inline void IMGroupBaseInfoAlterNotify::set_group_descrp(const char* value) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
}
inline void IMGroupBaseInfoAlterNotify::set_group_descrp(const char* value, size_t size) {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  group_descrp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
}
inline ::std::string* IMGroupBaseInfoAlterNotify::mutable_group_descrp() {
  set_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_descrp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
  return group_descrp_;
}
inline ::std::string* IMGroupBaseInfoAlterNotify::release_group_descrp() {
  clear_has_group_descrp();
  if (group_descrp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_descrp_;
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupBaseInfoAlterNotify::set_allocated_group_descrp(::std::string* group_descrp) {
  if (group_descrp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_descrp_;
  }
  if (group_descrp) {
    set_has_group_descrp();
    group_descrp_ = group_descrp;
  } else {
    clear_has_group_descrp();
    group_descrp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupBaseInfoAlterNotify.group_descrp)
}

// required string group_portrait = 5;
inline bool IMGroupBaseInfoAlterNotify::has_group_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_group_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_group_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupBaseInfoAlterNotify::clear_group_portrait() {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_->clear();
  }
  clear_has_group_portrait();
}
inline const ::std::string& IMGroupBaseInfoAlterNotify::group_portrait() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
  return *group_portrait_;
}
inline void IMGroupBaseInfoAlterNotify::set_group_portrait(const ::std::string& value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
}
inline void IMGroupBaseInfoAlterNotify::set_group_portrait(const char* value) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
}
inline void IMGroupBaseInfoAlterNotify::set_group_portrait(const char* value, size_t size) {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  group_portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
}
inline ::std::string* IMGroupBaseInfoAlterNotify::mutable_group_portrait() {
  set_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
  return group_portrait_;
}
inline ::std::string* IMGroupBaseInfoAlterNotify::release_group_portrait() {
  clear_has_group_portrait();
  if (group_portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_portrait_;
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupBaseInfoAlterNotify::set_allocated_group_portrait(::std::string* group_portrait) {
  if (group_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_portrait_;
  }
  if (group_portrait) {
    set_has_group_portrait();
    group_portrait_ = group_portrait;
  } else {
    clear_has_group_portrait();
    group_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupBaseInfoAlterNotify.group_portrait)
}

// required uint32 forbidden = 6;
inline bool IMGroupBaseInfoAlterNotify::has_forbidden() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_forbidden() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_forbidden() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupBaseInfoAlterNotify::clear_forbidden() {
  forbidden_ = 0u;
  clear_has_forbidden();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::forbidden() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.forbidden)
  return forbidden_;
}
inline void IMGroupBaseInfoAlterNotify::set_forbidden(::google::protobuf::uint32 value) {
  set_has_forbidden();
  forbidden_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.forbidden)
}

// required uint32 creator_id = 7;
inline bool IMGroupBaseInfoAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupBaseInfoAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupBaseInfoAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.creator_id)
}

// repeated uint32 member_list = 8;
inline int IMGroupBaseInfoAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupBaseInfoAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupBaseInfoAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.member_list)
}
inline void IMGroupBaseInfoAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupBaseInfoAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupBaseInfoAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupBaseInfoAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupBaseInfoAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupBaseInfoAlterNotify.member_list)
  return &member_list_;
}

// repeated uint32 user_id = 9;
inline int IMGroupBaseInfoAlterNotify::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupBaseInfoAlterNotify::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.user_id)
  return user_id_.Get(index);
}
inline void IMGroupBaseInfoAlterNotify::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.user_id)
}
inline void IMGroupBaseInfoAlterNotify::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupBaseInfoAlterNotify.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupBaseInfoAlterNotify::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupBaseInfoAlterNotify.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupBaseInfoAlterNotify::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupBaseInfoAlterNotify.user_id)
  return &user_id_;
}

// repeated string user_name = 10;
inline int IMGroupBaseInfoAlterNotify::user_name_size() const {
  return user_name_.size();
}
inline void IMGroupBaseInfoAlterNotify::clear_user_name() {
  user_name_.Clear();
}
inline const ::std::string& IMGroupBaseInfoAlterNotify::user_name(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
  return user_name_.Get(index);
}
inline ::std::string* IMGroupBaseInfoAlterNotify::mutable_user_name(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
  return user_name_.Mutable(index);
}
inline void IMGroupBaseInfoAlterNotify::set_user_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
  user_name_.Mutable(index)->assign(value);
}
inline void IMGroupBaseInfoAlterNotify::set_user_name(int index, const char* value) {
  user_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
}
inline void IMGroupBaseInfoAlterNotify::set_user_name(int index, const char* value, size_t size) {
  user_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
}
inline ::std::string* IMGroupBaseInfoAlterNotify::add_user_name() {
  return user_name_.Add();
}
inline void IMGroupBaseInfoAlterNotify::add_user_name(const ::std::string& value) {
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
}
inline void IMGroupBaseInfoAlterNotify::add_user_name(const char* value) {
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
}
inline void IMGroupBaseInfoAlterNotify::add_user_name(const char* value, size_t size) {
  user_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMGroupBaseInfoAlterNotify::user_name() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
  return user_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMGroupBaseInfoAlterNotify::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupBaseInfoAlterNotify.user_name)
  return &user_name_;
}

// optional string creator_name = 11;
inline bool IMGroupBaseInfoAlterNotify::has_creator_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_creator_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IMGroupBaseInfoAlterNotify::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupBaseInfoAlterNotify::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
  return *creator_name_;
}
inline void IMGroupBaseInfoAlterNotify::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
}
inline void IMGroupBaseInfoAlterNotify::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
}
inline void IMGroupBaseInfoAlterNotify::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
}
inline ::std::string* IMGroupBaseInfoAlterNotify::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupBaseInfoAlterNotify::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupBaseInfoAlterNotify::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupBaseInfoAlterNotify.creator_name)
}

// optional uint32 group_type = 12;
inline bool IMGroupBaseInfoAlterNotify::has_group_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IMGroupBaseInfoAlterNotify::set_has_group_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IMGroupBaseInfoAlterNotify::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IMGroupBaseInfoAlterNotify::clear_group_type() {
  group_type_ = 0u;
  clear_has_group_type();
}
inline ::google::protobuf::uint32 IMGroupBaseInfoAlterNotify::group_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupBaseInfoAlterNotify.group_type)
  return group_type_;
}
inline void IMGroupBaseInfoAlterNotify::set_group_type(::google::protobuf::uint32 value) {
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupBaseInfoAlterNotify.group_type)
}

// -------------------------------------------------------------------

// IMGroupMemberListAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupMemberListAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberListAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberListAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberListAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupMemberListAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupMemberListAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.notify_type)
}

// repeated uint32 user_id = 2;
inline int IMGroupMemberListAlterNotify::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupMemberListAlterNotify::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberListAlterNotify::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.user_id)
  return user_id_.Get(index);
}
inline void IMGroupMemberListAlterNotify::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.user_id)
}
inline void IMGroupMemberListAlterNotify::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberListAlterNotify.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberListAlterNotify::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberListAlterNotify.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberListAlterNotify::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberListAlterNotify.user_id)
  return &user_id_;
}

// repeated string user_name = 3;
inline int IMGroupMemberListAlterNotify::user_name_size() const {
  return user_name_.size();
}
inline void IMGroupMemberListAlterNotify::clear_user_name() {
  user_name_.Clear();
}
inline const ::std::string& IMGroupMemberListAlterNotify::user_name(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.user_name)
  return user_name_.Get(index);
}
inline ::std::string* IMGroupMemberListAlterNotify::mutable_user_name(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberListAlterNotify.user_name)
  return user_name_.Mutable(index);
}
inline void IMGroupMemberListAlterNotify::set_user_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.user_name)
  user_name_.Mutable(index)->assign(value);
}
inline void IMGroupMemberListAlterNotify::set_user_name(int index, const char* value) {
  user_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberListAlterNotify.user_name)
}
inline void IMGroupMemberListAlterNotify::set_user_name(int index, const char* value, size_t size) {
  user_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberListAlterNotify.user_name)
}
inline ::std::string* IMGroupMemberListAlterNotify::add_user_name() {
  return user_name_.Add();
}
inline void IMGroupMemberListAlterNotify::add_user_name(const ::std::string& value) {
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberListAlterNotify.user_name)
}
inline void IMGroupMemberListAlterNotify::add_user_name(const char* value) {
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Group.IMGroupMemberListAlterNotify.user_name)
}
inline void IMGroupMemberListAlterNotify::add_user_name(const char* value, size_t size) {
  user_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Group.IMGroupMemberListAlterNotify.user_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMGroupMemberListAlterNotify::user_name() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberListAlterNotify.user_name)
  return user_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMGroupMemberListAlterNotify::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberListAlterNotify.user_name)
  return &user_name_;
}

// repeated uint32 member_list = 4;
inline int IMGroupMemberListAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberListAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberListAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberListAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.member_list)
}
inline void IMGroupMemberListAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberListAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberListAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberListAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberListAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberListAlterNotify.member_list)
  return &member_list_;
}

// optional uint32 creator_id = 5;
inline bool IMGroupMemberListAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberListAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberListAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberListAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupMemberListAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.creator_id)
}

// optional uint32 group_id = 6;
inline bool IMGroupMemberListAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberListAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberListAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberListAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberListAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupMemberListAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.group_id)
}

// optional string group_name = 7;
inline bool IMGroupMemberListAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberListAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberListAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberListAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupMemberListAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberListAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupMemberListAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberListAlterNotify.group_name)
}
inline void IMGroupMemberListAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberListAlterNotify.group_name)
}
inline void IMGroupMemberListAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberListAlterNotify.group_name)
}
inline ::std::string* IMGroupMemberListAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberListAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupMemberListAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberListAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberListAlterNotify.group_name)
}

// -------------------------------------------------------------------

// IMMemberBaseInfoAlterNotify

// required uint32 notify_type = 1;
inline bool IMMemberBaseInfoAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMemberBaseInfoAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.notify_type)
  return notify_type_;
}
inline void IMMemberBaseInfoAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMMemberBaseInfoAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMemberBaseInfoAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.group_id)
  return group_id_;
}
inline void IMMemberBaseInfoAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.group_id)
}

// required uint32 creator_id = 3;
inline bool IMMemberBaseInfoAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMemberBaseInfoAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.creator_id)
  return creator_id_;
}
inline void IMMemberBaseInfoAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.creator_id)
}

// required uint32 user_id = 4;
inline bool IMMemberBaseInfoAlterNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMemberBaseInfoAlterNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.user_id)
  return user_id_;
}
inline void IMMemberBaseInfoAlterNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.user_id)
}

// required string name = 5;
inline bool IMMemberBaseInfoAlterNotify::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMemberBaseInfoAlterNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IMMemberBaseInfoAlterNotify::name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.name)
  return *name_;
}
inline void IMMemberBaseInfoAlterNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.name)
}
inline void IMMemberBaseInfoAlterNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMMemberBaseInfoAlterNotify.name)
}
inline void IMMemberBaseInfoAlterNotify::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMMemberBaseInfoAlterNotify.name)
}
inline ::std::string* IMMemberBaseInfoAlterNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMMemberBaseInfoAlterNotify.name)
  return name_;
}
inline ::std::string* IMMemberBaseInfoAlterNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMemberBaseInfoAlterNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMMemberBaseInfoAlterNotify.name)
}

// required uint32 degree = 6;
inline bool IMMemberBaseInfoAlterNotify::has_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMMemberBaseInfoAlterNotify::clear_degree() {
  degree_ = 0u;
  clear_has_degree();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::degree() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.degree)
  return degree_;
}
inline void IMMemberBaseInfoAlterNotify::set_degree(::google::protobuf::uint32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.degree)
}

// required uint32 forbidden = 7;
inline bool IMMemberBaseInfoAlterNotify::has_forbidden() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMMemberBaseInfoAlterNotify::set_has_forbidden() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMMemberBaseInfoAlterNotify::clear_has_forbidden() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMMemberBaseInfoAlterNotify::clear_forbidden() {
  forbidden_ = 0u;
  clear_has_forbidden();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::forbidden() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.forbidden)
  return forbidden_;
}
inline void IMMemberBaseInfoAlterNotify::set_forbidden(::google::protobuf::uint32 value) {
  set_has_forbidden();
  forbidden_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.forbidden)
}

// repeated uint32 member_list = 8;
inline int IMMemberBaseInfoAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMMemberBaseInfoAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMMemberBaseInfoAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMMemberBaseInfoAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMMemberBaseInfoAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMMemberBaseInfoAlterNotify.member_list)
}
inline void IMMemberBaseInfoAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMMemberBaseInfoAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMMemberBaseInfoAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMMemberBaseInfoAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMMemberBaseInfoAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMMemberBaseInfoAlterNotify.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// IMGroupMemberIdentityAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupMemberIdentityAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupMemberIdentityAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberIdentityAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupMemberIdentityAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.group_id)
}

// required uint32 creator_id = 3;
inline bool IMGroupMemberIdentityAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupMemberIdentityAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.creator_id)
}

// required uint32 user_id = 4;
inline bool IMGroupMemberIdentityAlterNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.user_id)
  return user_id_;
}
inline void IMGroupMemberIdentityAlterNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.user_id)
}

// required string user_name = 5;
inline bool IMGroupMemberIdentityAlterNotify::has_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMGroupMemberIdentityAlterNotify::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
  return *user_name_;
}
inline void IMGroupMemberIdentityAlterNotify::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
}
inline void IMGroupMemberIdentityAlterNotify::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
}
inline void IMGroupMemberIdentityAlterNotify::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
}
inline ::std::string* IMGroupMemberIdentityAlterNotify::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
  return user_name_;
}
inline ::std::string* IMGroupMemberIdentityAlterNotify::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberIdentityAlterNotify::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberIdentityAlterNotify.user_name)
}

// required uint32 degree = 6;
inline bool IMGroupMemberIdentityAlterNotify::has_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_degree() {
  degree_ = 0u;
  clear_has_degree();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::degree() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.degree)
  return degree_;
}
inline void IMGroupMemberIdentityAlterNotify::set_degree(::google::protobuf::uint32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.degree)
}

// repeated uint32 member_list = 7;
inline int IMGroupMemberIdentityAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupMemberIdentityAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupMemberIdentityAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupMemberIdentityAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.member_list)
}
inline void IMGroupMemberIdentityAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupMemberIdentityAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupMemberIdentityAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupMemberIdentityAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupMemberIdentityAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupMemberIdentityAlterNotify.member_list)
  return &member_list_;
}

// optional string group_name = 8;
inline bool IMGroupMemberIdentityAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberIdentityAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberIdentityAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupMemberIdentityAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupMemberIdentityAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
}
inline void IMGroupMemberIdentityAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
}
inline void IMGroupMemberIdentityAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
}
inline ::std::string* IMGroupMemberIdentityAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupMemberIdentityAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberIdentityAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberIdentityAlterNotify.group_name)
}

// -------------------------------------------------------------------

// IMGroupSetAnnounceAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupSetAnnounceAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupSetAnnounceAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupSetAnnounceAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupSetAnnounceAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.group_id)
}

// required uint32 creator_id = 3;
inline bool IMGroupSetAnnounceAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupSetAnnounceAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.creator_id)
}

// required string creator_name = 4;
inline bool IMGroupSetAnnounceAlterNotify::has_creator_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_creator_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupSetAnnounceAlterNotify::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
  return *creator_name_;
}
inline void IMGroupSetAnnounceAlterNotify::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
}
inline void IMGroupSetAnnounceAlterNotify::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
}
inline void IMGroupSetAnnounceAlterNotify::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceAlterNotify::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceAlterNotify.creator_name)
}

// required string announce = 5;
inline bool IMGroupSetAnnounceAlterNotify::has_announce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_announce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_announce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_announce() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_->clear();
  }
  clear_has_announce();
}
inline const ::std::string& IMGroupSetAnnounceAlterNotify::announce() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
  return *announce_;
}
inline void IMGroupSetAnnounceAlterNotify::set_announce(const ::std::string& value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
}
inline void IMGroupSetAnnounceAlterNotify::set_announce(const char* value) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
}
inline void IMGroupSetAnnounceAlterNotify::set_announce(const char* value, size_t size) {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  announce_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::mutable_announce() {
  set_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    announce_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
  return announce_;
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::release_announce() {
  clear_has_announce();
  if (announce_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = announce_;
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceAlterNotify::set_allocated_announce(::std::string* announce) {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (announce) {
    set_has_announce();
    announce_ = announce;
  } else {
    clear_has_announce();
    announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceAlterNotify.announce)
}

// required uint32 update_time = 6;
inline bool IMGroupSetAnnounceAlterNotify::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceAlterNotify::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.update_time)
  return update_time_;
}
inline void IMGroupSetAnnounceAlterNotify::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.update_time)
}

// optional string group_name = 7;
inline bool IMGroupSetAnnounceAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupSetAnnounceAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupSetAnnounceAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupSetAnnounceAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupSetAnnounceAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
}
inline void IMGroupSetAnnounceAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
}
inline void IMGroupSetAnnounceAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupSetAnnounceAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupSetAnnounceAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupSetAnnounceAlterNotify.group_name)
}

// repeated uint32 member_list = 8;
inline int IMGroupSetAnnounceAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupSetAnnounceAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupSetAnnounceAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupSetAnnounceAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupSetAnnounceAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupSetAnnounceAlterNotify.member_list)
}
inline void IMGroupSetAnnounceAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupSetAnnounceAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupSetAnnounceAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupSetAnnounceAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupSetAnnounceAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupSetAnnounceAlterNotify.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// IMGroupManagementModifyAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupManagementModifyAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupManagementModifyAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupManagementModifyAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupManagementModifyAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupManagementModifyAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupManagementModifyAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.group_id)
}

// required uint32 creator_id = 3;
inline bool IMGroupManagementModifyAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupManagementModifyAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupManagementModifyAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.creator_id)
}

// required string creator_name = 4;
inline bool IMGroupManagementModifyAlterNotify::has_creator_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_creator_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupManagementModifyAlterNotify::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& IMGroupManagementModifyAlterNotify::creator_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
  return *creator_name_;
}
inline void IMGroupManagementModifyAlterNotify::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
}
inline void IMGroupManagementModifyAlterNotify::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
}
inline void IMGroupManagementModifyAlterNotify::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
}
inline ::std::string* IMGroupManagementModifyAlterNotify::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    creator_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
  return creator_name_;
}
inline ::std::string* IMGroupManagementModifyAlterNotify::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyAlterNotify::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyAlterNotify.creator_name)
}

// required string group_name = 5;
inline bool IMGroupManagementModifyAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupManagementModifyAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupManagementModifyAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupManagementModifyAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
}
inline void IMGroupManagementModifyAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
}
inline void IMGroupManagementModifyAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
}
inline ::std::string* IMGroupManagementModifyAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupManagementModifyAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyAlterNotify.group_name)
}

// required uint32 new_manager_id = 6;
inline bool IMGroupManagementModifyAlterNotify::has_new_manager_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_new_manager_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_new_manager_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupManagementModifyAlterNotify::clear_new_manager_id() {
  new_manager_id_ = 0u;
  clear_has_new_manager_id();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyAlterNotify::new_manager_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_id)
  return new_manager_id_;
}
inline void IMGroupManagementModifyAlterNotify::set_new_manager_id(::google::protobuf::uint32 value) {
  set_has_new_manager_id();
  new_manager_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_id)
}

// required string new_manager_name = 7;
inline bool IMGroupManagementModifyAlterNotify::has_new_manager_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupManagementModifyAlterNotify::set_has_new_manager_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupManagementModifyAlterNotify::clear_has_new_manager_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupManagementModifyAlterNotify::clear_new_manager_name() {
  if (new_manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_manager_name_->clear();
  }
  clear_has_new_manager_name();
}
inline const ::std::string& IMGroupManagementModifyAlterNotify::new_manager_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
  return *new_manager_name_;
}
inline void IMGroupManagementModifyAlterNotify::set_new_manager_name(const ::std::string& value) {
  set_has_new_manager_name();
  if (new_manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_manager_name_ = new ::std::string;
  }
  new_manager_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
}
inline void IMGroupManagementModifyAlterNotify::set_new_manager_name(const char* value) {
  set_has_new_manager_name();
  if (new_manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_manager_name_ = new ::std::string;
  }
  new_manager_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
}
inline void IMGroupManagementModifyAlterNotify::set_new_manager_name(const char* value, size_t size) {
  set_has_new_manager_name();
  if (new_manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_manager_name_ = new ::std::string;
  }
  new_manager_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
}
inline ::std::string* IMGroupManagementModifyAlterNotify::mutable_new_manager_name() {
  set_has_new_manager_name();
  if (new_manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_manager_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
  return new_manager_name_;
}
inline ::std::string* IMGroupManagementModifyAlterNotify::release_new_manager_name() {
  clear_has_new_manager_name();
  if (new_manager_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_manager_name_;
    new_manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupManagementModifyAlterNotify::set_allocated_new_manager_name(::std::string* new_manager_name) {
  if (new_manager_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_manager_name_;
  }
  if (new_manager_name) {
    set_has_new_manager_name();
    new_manager_name_ = new_manager_name;
  } else {
    clear_has_new_manager_name();
    new_manager_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupManagementModifyAlterNotify.new_manager_name)
}

// repeated uint32 member_list = 8;
inline int IMGroupManagementModifyAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupManagementModifyAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupManagementModifyAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupManagementModifyAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupManagementModifyAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupManagementModifyAlterNotify.member_list)
}
inline void IMGroupManagementModifyAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupManagementModifyAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupManagementModifyAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupManagementModifyAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupManagementModifyAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupManagementModifyAlterNotify.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// IMGroupAtAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupAtAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupAtAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupAtAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupAtAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupAtAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupAtAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupAtAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupAtAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.group_id)
}

// required uint32 from_user_id = 3;
inline bool IMGroupAtAlterNotify::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupAtAlterNotify::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupAtAlterNotify::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.from_user_id)
  return from_user_id_;
}
inline void IMGroupAtAlterNotify::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.from_user_id)
}

// required string from_user_name = 4;
inline bool IMGroupAtAlterNotify::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupAtAlterNotify::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupAtAlterNotify::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& IMGroupAtAlterNotify::from_user_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.from_user_name)
  return *from_user_name_;
}
inline void IMGroupAtAlterNotify::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.from_user_name)
}
inline void IMGroupAtAlterNotify::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtAlterNotify.from_user_name)
}
inline void IMGroupAtAlterNotify::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtAlterNotify.from_user_name)
}
inline ::std::string* IMGroupAtAlterNotify::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtAlterNotify.from_user_name)
  return from_user_name_;
}
inline ::std::string* IMGroupAtAlterNotify::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtAlterNotify::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtAlterNotify.from_user_name)
}

// required uint32 group_at_type = 5;
inline bool IMGroupAtAlterNotify::has_group_at_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_group_at_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupAtAlterNotify::clear_has_group_at_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupAtAlterNotify::clear_group_at_type() {
  group_at_type_ = 0u;
  clear_has_group_at_type();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::group_at_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.group_at_type)
  return group_at_type_;
}
inline void IMGroupAtAlterNotify::set_group_at_type(::google::protobuf::uint32 value) {
  set_has_group_at_type();
  group_at_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.group_at_type)
}

// repeated uint32 peer_id = 6;
inline int IMGroupAtAlterNotify::peer_id_size() const {
  return peer_id_.size();
}
inline void IMGroupAtAlterNotify::clear_peer_id() {
  peer_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::peer_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.peer_id)
  return peer_id_.Get(index);
}
inline void IMGroupAtAlterNotify::set_peer_id(int index, ::google::protobuf::uint32 value) {
  peer_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.peer_id)
}
inline void IMGroupAtAlterNotify::add_peer_id(::google::protobuf::uint32 value) {
  peer_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupAtAlterNotify.peer_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupAtAlterNotify::peer_id() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupAtAlterNotify.peer_id)
  return peer_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupAtAlterNotify::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupAtAlterNotify.peer_id)
  return &peer_id_;
}

// optional string group_name = 7;
inline bool IMGroupAtAlterNotify::has_group_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_group_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupAtAlterNotify::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupAtAlterNotify::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& IMGroupAtAlterNotify::group_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.group_name)
  return *group_name_;
}
inline void IMGroupAtAlterNotify::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.group_name)
}
inline void IMGroupAtAlterNotify::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupAtAlterNotify.group_name)
}
inline void IMGroupAtAlterNotify::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupAtAlterNotify.group_name)
}
inline ::std::string* IMGroupAtAlterNotify::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupAtAlterNotify.group_name)
  return group_name_;
}
inline ::std::string* IMGroupAtAlterNotify::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupAtAlterNotify::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupAtAlterNotify.group_name)
}

// optional uint32 msg_id = 8;
inline bool IMGroupAtAlterNotify::has_msg_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupAtAlterNotify::set_has_msg_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupAtAlterNotify::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupAtAlterNotify::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMGroupAtAlterNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupAtAlterNotify.msg_id)
  return msg_id_;
}
inline void IMGroupAtAlterNotify::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupAtAlterNotify.msg_id)
}

// -------------------------------------------------------------------

// IMGroupRemoveAnnounceAlterNotify

// required uint32 notify_type = 1;
inline bool IMGroupRemoveAnnounceAlterNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_notify_type() {
  notify_type_ = 0u;
  clear_has_notify_type();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceAlterNotify::notify_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceAlterNotify.notify_type)
  return notify_type_;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_notify_type(::google::protobuf::uint32 value) {
  set_has_notify_type();
  notify_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceAlterNotify.notify_type)
}

// required uint32 group_id = 2;
inline bool IMGroupRemoveAnnounceAlterNotify::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceAlterNotify::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceAlterNotify.group_id)
  return group_id_;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceAlterNotify.group_id)
}

// required uint32 creator_id = 3;
inline bool IMGroupRemoveAnnounceAlterNotify::has_creator_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_has_creator_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceAlterNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceAlterNotify.creator_id)
  return creator_id_;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceAlterNotify.creator_id)
}

// required uint32 update_time = 4;
inline bool IMGroupRemoveAnnounceAlterNotify::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceAlterNotify::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceAlterNotify.update_time)
  return update_time_;
}
inline void IMGroupRemoveAnnounceAlterNotify::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceAlterNotify.update_time)
}

// repeated uint32 member_list = 5;
inline int IMGroupRemoveAnnounceAlterNotify::member_list_size() const {
  return member_list_.size();
}
inline void IMGroupRemoveAnnounceAlterNotify::clear_member_list() {
  member_list_.Clear();
}
inline ::google::protobuf::uint32 IMGroupRemoveAnnounceAlterNotify::member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupRemoveAnnounceAlterNotify.member_list)
  return member_list_.Get(index);
}
inline void IMGroupRemoveAnnounceAlterNotify::set_member_list(int index, ::google::protobuf::uint32 value) {
  member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupRemoveAnnounceAlterNotify.member_list)
}
inline void IMGroupRemoveAnnounceAlterNotify::add_member_list(::google::protobuf::uint32 value) {
  member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Group.IMGroupRemoveAnnounceAlterNotify.member_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupRemoveAnnounceAlterNotify::member_list() const {
  // @@protoc_insertion_point(field_list:IM.Group.IMGroupRemoveAnnounceAlterNotify.member_list)
  return member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupRemoveAnnounceAlterNotify::mutable_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Group.IMGroupRemoveAnnounceAlterNotify.member_list)
  return &member_list_;
}

// -------------------------------------------------------------------

// IMGroupMemberInfoReq

// required uint32 creator_id = 1;
inline bool IMGroupMemberInfoReq::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInfoReq::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInfoReq::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInfoReq::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoReq::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoReq.creator_id)
  return creator_id_;
}
inline void IMGroupMemberInfoReq::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoReq.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberInfoReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInfoReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInfoReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInfoReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoReq.group_id)
  return group_id_;
}
inline void IMGroupMemberInfoReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoReq.group_id)
}

// required uint32 member_id = 3;
inline bool IMGroupMemberInfoReq::has_member_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberInfoReq::set_has_member_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberInfoReq::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberInfoReq::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoReq::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoReq.member_id)
  return member_id_;
}
inline void IMGroupMemberInfoReq::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoReq.member_id)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoReq.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoReq.attach_data)
}
inline void IMGroupMemberInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoReq.attach_data)
}
inline void IMGroupMemberInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoReq.attach_data)
}
inline ::std::string* IMGroupMemberInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupMemberInfoResp

// required uint32 creator_id = 1;
inline bool IMGroupMemberInfoResp::has_creator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_creator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupMemberInfoResp::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupMemberInfoResp::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::creator_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.creator_id)
  return creator_id_;
}
inline void IMGroupMemberInfoResp::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.creator_id)
}

// required uint32 group_id = 2;
inline bool IMGroupMemberInfoResp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGroupMemberInfoResp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGroupMemberInfoResp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.group_id)
  return group_id_;
}
inline void IMGroupMemberInfoResp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.group_id)
}

// required uint32 member_id = 3;
inline bool IMGroupMemberInfoResp::has_member_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupMemberInfoResp::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupMemberInfoResp::clear_member_id() {
  member_id_ = 0u;
  clear_has_member_id();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::member_id() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_id)
  return member_id_;
}
inline void IMGroupMemberInfoResp::set_member_id(::google::protobuf::uint32 value) {
  set_has_member_id();
  member_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_id)
}

// required string member_name = 4;
inline bool IMGroupMemberInfoResp::has_member_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGroupMemberInfoResp::clear_has_member_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGroupMemberInfoResp::clear_member_name() {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_->clear();
  }
  clear_has_member_name();
}
inline const ::std::string& IMGroupMemberInfoResp::member_name() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_name)
  return *member_name_;
}
inline void IMGroupMemberInfoResp::set_member_name(const ::std::string& value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_name)
}
inline void IMGroupMemberInfoResp::set_member_name(const char* value) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoResp.member_name)
}
inline void IMGroupMemberInfoResp::set_member_name(const char* value, size_t size) {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  member_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoResp.member_name)
}
inline ::std::string* IMGroupMemberInfoResp::mutable_member_name() {
  set_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    member_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoResp.member_name)
  return member_name_;
}
inline ::std::string* IMGroupMemberInfoResp::release_member_name() {
  clear_has_member_name();
  if (member_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = member_name_;
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoResp::set_allocated_member_name(::std::string* member_name) {
  if (member_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete member_name_;
  }
  if (member_name) {
    set_has_member_name();
    member_name_ = member_name;
  } else {
    clear_has_member_name();
    member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoResp.member_name)
}

// required uint32 member_forbidden = 5;
inline bool IMGroupMemberInfoResp::has_member_forbidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_forbidden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGroupMemberInfoResp::clear_has_member_forbidden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGroupMemberInfoResp::clear_member_forbidden() {
  member_forbidden_ = 0u;
  clear_has_member_forbidden();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::member_forbidden() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_forbidden)
  return member_forbidden_;
}
inline void IMGroupMemberInfoResp::set_member_forbidden(::google::protobuf::uint32 value) {
  set_has_member_forbidden();
  member_forbidden_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_forbidden)
}

// required uint32 member_degree = 6;
inline bool IMGroupMemberInfoResp::has_member_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGroupMemberInfoResp::clear_has_member_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGroupMemberInfoResp::clear_member_degree() {
  member_degree_ = 0u;
  clear_has_member_degree();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::member_degree() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_degree)
  return member_degree_;
}
inline void IMGroupMemberInfoResp::set_member_degree(::google::protobuf::uint32 value) {
  set_has_member_degree();
  member_degree_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_degree)
}

// required uint32 member_type = 7;
inline bool IMGroupMemberInfoResp::has_member_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMGroupMemberInfoResp::clear_has_member_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMGroupMemberInfoResp::clear_member_type() {
  member_type_ = 0u;
  clear_has_member_type();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::member_type() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_type)
  return member_type_;
}
inline void IMGroupMemberInfoResp::set_member_type(::google::protobuf::uint32 value) {
  set_has_member_type();
  member_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_type)
}

// required uint32 member_status = 8;
inline bool IMGroupMemberInfoResp::has_member_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_member_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMGroupMemberInfoResp::clear_has_member_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMGroupMemberInfoResp::clear_member_status() {
  member_status_ = 0u;
  clear_has_member_status();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::member_status() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.member_status)
  return member_status_;
}
inline void IMGroupMemberInfoResp::set_member_status(::google::protobuf::uint32 value) {
  set_has_member_status();
  member_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.member_status)
}

// required uint32 result_code = 9;
inline bool IMGroupMemberInfoResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IMGroupMemberInfoResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IMGroupMemberInfoResp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMGroupMemberInfoResp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.result_code)
  return result_code_;
}
inline void IMGroupMemberInfoResp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.result_code)
}

// optional string reason = 10;
inline bool IMGroupMemberInfoResp::has_reason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_reason() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IMGroupMemberInfoResp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IMGroupMemberInfoResp::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& IMGroupMemberInfoResp::reason() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.reason)
  return *reason_;
}
inline void IMGroupMemberInfoResp::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.reason)
}
inline void IMGroupMemberInfoResp::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoResp.reason)
}
inline void IMGroupMemberInfoResp::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoResp.reason)
}
inline ::std::string* IMGroupMemberInfoResp::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoResp.reason)
  return reason_;
}
inline ::std::string* IMGroupMemberInfoResp::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoResp::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoResp.reason)
}

// optional bytes attach_data = 20;
inline bool IMGroupMemberInfoResp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IMGroupMemberInfoResp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IMGroupMemberInfoResp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IMGroupMemberInfoResp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupMemberInfoResp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Group.IMGroupMemberInfoResp.attach_data)
  return *attach_data_;
}
inline void IMGroupMemberInfoResp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Group.IMGroupMemberInfoResp.attach_data)
}
inline void IMGroupMemberInfoResp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Group.IMGroupMemberInfoResp.attach_data)
}
inline void IMGroupMemberInfoResp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Group.IMGroupMemberInfoResp.attach_data)
}
inline ::std::string* IMGroupMemberInfoResp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Group.IMGroupMemberInfoResp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupMemberInfoResp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupMemberInfoResp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Group.IMGroupMemberInfoResp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eGroup_2eproto__INCLUDED
